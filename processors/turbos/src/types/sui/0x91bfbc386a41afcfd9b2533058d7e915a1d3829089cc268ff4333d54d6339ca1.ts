/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1, original address 0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@sentio/sdk/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import { CallFilter, MoveFetchConfig } from "@sentio/sdk/move";
import {
  SuiBindOptions,
  SuiBaseProcessor,
  SuiNetwork,
  TypedFunctionPayload,
  SuiContext,
} from "@sentio/sdk/sui";

import * as _0x2 from "@sentio/sdk/sui/builtin/0x2";
import * as _0x1 from "@sentio/sdk/sui/builtin/0x1";

export namespace fee {
  export interface Fee<T0> {
    id: _0x2.object$.UID;
    fee: number;
    tick_spacing: number;
  }

  export namespace Fee {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee::Fee";

    const TYPE = new TypeDescriptor<Fee<any>>(Fee.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Fee<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function createFee<T0 = any>(
      tx: Transaction,
      args: [
        T0 | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee::create_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function getFee<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee::get_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function getTickSpacing<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee::get_tick_spacing",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function createFee<T0 = any>(
      client: SuiClient,
      args: [T0, number, number],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[fee.Fee<T0>]>> {
      const tx = new Transaction();
      builder.createFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[fee.Fee<T0>]>(
        inspectRes,
      );
    }
    export async function getFee<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.getFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function getTickSpacing<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.getTickSpacing(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
  }
}

export namespace fee10000bps {
  export interface FEE10000BPS {
    dummy_field: boolean;
  }

  export namespace FEE10000BPS {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee10000bps::FEE10000BPS";

    const TYPE = new TypeDescriptor<FEE10000BPS>(FEE10000BPS.TYPE_QNAME);

    export function type(): TypeDescriptor<FEE10000BPS> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace fee100bps {
  export interface FEE100BPS {
    dummy_field: boolean;
  }

  export namespace FEE100BPS {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee100bps::FEE100BPS";

    const TYPE = new TypeDescriptor<FEE100BPS>(FEE100BPS.TYPE_QNAME);

    export function type(): TypeDescriptor<FEE100BPS> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace fee3000bps {
  export interface FEE3000BPS {
    dummy_field: boolean;
  }

  export namespace FEE3000BPS {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee3000bps::FEE3000BPS";

    const TYPE = new TypeDescriptor<FEE3000BPS>(FEE3000BPS.TYPE_QNAME);

    export function type(): TypeDescriptor<FEE3000BPS> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace fee500bps {
  export interface FEE500BPS {
    dummy_field: boolean;
  }

  export namespace FEE500BPS {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::fee500bps::FEE500BPS";

    const TYPE = new TypeDescriptor<FEE500BPS>(FEE500BPS.TYPE_QNAME);

    export function type(): TypeDescriptor<FEE500BPS> {
      return TYPE.apply();
    }
  }

  export namespace builder {}
  export namespace view {}
}

export namespace full_math_u128 {
  export namespace builder {
    export function fullMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u128::full_mul",
        arguments: _args,
      });
    }
    export function mulDivCeil(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u128::mul_div_ceil",
        arguments: _args,
      });
    }
    export function mulDivFloor(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u128::mul_div_floor",
        arguments: _args,
      });
    }
    export function mulDivRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u128::mul_div_round",
        arguments: _args,
      });
    }
    export function mulShl(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u128::mul_shl",
        arguments: _args,
      });
    }
    export function mulShr(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u128::mul_shr",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function fullMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.fullMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivCeil(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivCeil(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivFloor(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivFloor(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivRound(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShl(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShr(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace full_math_u32 {
  export namespace builder {
    export function fullMul(
      tx: Transaction,
      args: [number | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u32::full_mul",
        arguments: _args,
      });
    }
    export function mulDivCeil(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u32::mul_div_ceil",
        arguments: _args,
      });
    }
    export function mulDivFloor(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u32::mul_div_floor",
        arguments: _args,
      });
    }
    export function mulDivRound(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u32::mul_div_round",
        arguments: _args,
      });
    }
    export function mulShl(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u32::mul_shl",
        arguments: _args,
      });
    }
    export function mulShr(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u32::mul_shr",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function fullMul(
      client: SuiClient,
      args: [number, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.fullMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivCeil(
      client: SuiClient,
      args: [number, number, number],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.mulDivCeil(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function mulDivFloor(
      client: SuiClient,
      args: [number, number, number],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.mulDivFloor(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function mulDivRound(
      client: SuiClient,
      args: [number, number, number],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.mulDivRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function mulShl(
      client: SuiClient,
      args: [number, number, number],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.mulShl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function mulShr(
      client: SuiClient,
      args: [number, number, number],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.mulShr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
  }
}

export namespace full_math_u64 {
  export namespace builder {
    export function fullMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u64::full_mul",
        arguments: _args,
      });
    }
    export function mulDivCeil(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u64::mul_div_ceil",
        arguments: _args,
      });
    }
    export function mulDivFloor(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u64::mul_div_floor",
        arguments: _args,
      });
    }
    export function mulDivRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u64::mul_div_round",
        arguments: _args,
      });
    }
    export function mulShl(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u64::mul_shl",
        arguments: _args,
      });
    }
    export function mulShr(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::full_math_u64::mul_shr",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function fullMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.fullMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivCeil(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivCeil(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivFloor(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivFloor(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivRound(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShl(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShr(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export class i128 extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("i128", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): i128 {
    return new i128({ ...i128.DEFAULT_OPTIONS, ...options });
  }

  onEventI128(
    func: (event: i128.I128Instance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): i128 {
    this.onMoveEvent(func, { type: "i128::I128" }, fetchConfig);
    return this;
  }
}

export namespace i128 {
  export interface I128 {
    bits: bigint;
  }

  export namespace I128 {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::I128";

    const TYPE = new TypeDescriptor<I128>(I128.TYPE_QNAME);

    export function type(): TypeDescriptor<I128> {
      return TYPE.apply();
    }
  }

  export type I128Instance = TypedEventInstance<I128> & {
    data_decoded: I128;
    type_arguments: [];
  };

  export namespace builder {
    export function abs(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::abs",
        arguments: _args,
      });
    }
    export function absU128(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::abs_u128",
        arguments: _args,
      });
    }
    export function add(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::add",
        arguments: _args,
      });
    }
    export function and(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::and",
        arguments: _args,
      });
    }
    export function asI32(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::as_i32",
        arguments: _args,
      });
    }
    export function asI64(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::as_i64",
        arguments: _args,
      });
    }
    export function asU128(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::as_u128",
        arguments: _args,
      });
    }
    export function cmp(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::cmp",
        arguments: _args,
      });
    }
    export function div(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::div",
        arguments: _args,
      });
    }
    export function eq(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::eq",
        arguments: _args,
      });
    }
    export function from$(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::from",
        arguments: _args,
      });
    }
    export function gt(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::gt",
        arguments: _args,
      });
    }
    export function gte(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::gte",
        arguments: _args,
      });
    }
    export function isNeg(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::is_neg",
        arguments: _args,
      });
    }
    export function lt(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::lt",
        arguments: _args,
      });
    }
    export function lte(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::lte",
        arguments: _args,
      });
    }
    export function mul(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::mul",
        arguments: _args,
      });
    }
    export function neg(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::neg",
        arguments: _args,
      });
    }
    export function negFrom(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::neg_from",
        arguments: _args,
      });
    }
    export function or(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::or",
        arguments: _args,
      });
    }
    export function overflowingAdd(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::overflowing_add",
        arguments: _args,
      });
    }
    export function overflowingSub(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::overflowing_sub",
        arguments: _args,
      });
    }
    export function shl(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::shl",
        arguments: _args,
      });
    }
    export function shr(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::shr",
        arguments: _args,
      });
    }
    export function sign(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::sign",
        arguments: _args,
      });
    }
    export function sub(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::wrapping_sub",
        arguments: _args,
      });
    }
    export function zero(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i128::zero",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function abs(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.abs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function absU128(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.absU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function add(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function and(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.and(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function asI32(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.asI32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function asI64(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.asI64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function asU128(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.asU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function cmp(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.cmp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function div(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.div(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function eq(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.eq(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function from$(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.from$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function gt(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function gte(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isNeg(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isNeg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lt(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lte(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function mul(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.mul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function neg(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.neg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function negFrom(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.negFrom(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function or(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.or(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function overflowingAdd(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128, boolean]>> {
      const tx = new Transaction();
      builder.overflowingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [i128.I128, boolean]
      >(inspectRes);
    }
    export async function overflowingSub(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128, boolean]>> {
      const tx = new Transaction();
      builder.overflowingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [i128.I128, boolean]
      >(inspectRes);
    }
    export async function shl(
      client: SuiClient,
      args: [i128.I128, number],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.shl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function shr(
      client: SuiClient,
      args: [i128.I128, number],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.shr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function sign(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.sign(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function sub(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.sub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function zero(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.zero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
  }
}

export class i32 extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("i32", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): i32 {
    return new i32({ ...i32.DEFAULT_OPTIONS, ...options });
  }

  onEventI32(
    func: (event: i32.I32Instance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): i32 {
    this.onMoveEvent(func, { type: "i32::I32" }, fetchConfig);
    return this;
  }
}

export namespace i32 {
  export interface I32 {
    bits: number;
  }

  export namespace I32 {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::I32";

    const TYPE = new TypeDescriptor<I32>(I32.TYPE_QNAME);

    export function type(): TypeDescriptor<I32> {
      return TYPE.apply();
    }
  }

  export type I32Instance = TypedEventInstance<I32> & {
    data_decoded: I32;
    type_arguments: [];
  };

  export namespace builder {
    export function abs(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::abs",
        arguments: _args,
      });
    }
    export function absU32(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::abs_u32",
        arguments: _args,
      });
    }
    export function add(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::add",
        arguments: _args,
      });
    }
    export function and(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::and",
        arguments: _args,
      });
    }
    export function asU32(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::as_u32",
        arguments: _args,
      });
    }
    export function cmp(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::cmp",
        arguments: _args,
      });
    }
    export function div(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::div",
        arguments: _args,
      });
    }
    export function eq(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::eq",
        arguments: _args,
      });
    }
    export function from$(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::from",
        arguments: _args,
      });
    }
    export function fromU32(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::from_u32",
        arguments: _args,
      });
    }
    export function fromU32Neg(
      tx: Transaction,
      args: [number | TransactionArgument, boolean | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::from_u32_neg",
        arguments: _args,
      });
    }
    export function gt(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::gt",
        arguments: _args,
      });
    }
    export function gte(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::gte",
        arguments: _args,
      });
    }
    export function isNeg(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::is_neg",
        arguments: _args,
      });
    }
    export function lt(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::lt",
        arguments: _args,
      });
    }
    export function lte(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::lte",
        arguments: _args,
      });
    }
    export function mod(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::mod",
        arguments: _args,
      });
    }
    export function modEuclidean(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::mod_euclidean",
        arguments: _args,
      });
    }
    export function mul(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::mul",
        arguments: _args,
      });
    }
    export function negFrom(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::neg_from",
        arguments: _args,
      });
    }
    export function or(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::or",
        arguments: _args,
      });
    }
    export function shl(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::shl",
        arguments: _args,
      });
    }
    export function shr(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::shr",
        arguments: _args,
      });
    }
    export function sign(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::sign",
        arguments: _args,
      });
    }
    export function sub(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::wrapping_sub",
        arguments: _args,
      });
    }
    export function zero(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i32::zero",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function abs(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.abs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function absU32(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.absU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function add(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function and(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.and(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function asU32(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.asU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function cmp(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.cmp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function div(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.div(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function eq(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.eq(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function from$(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.from$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function fromU32(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.fromU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function fromU32Neg(
      client: SuiClient,
      args: [number, boolean],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.fromU32Neg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function gt(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function gte(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isNeg(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isNeg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lt(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lte(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function mod(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.mod(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function modEuclidean(
      client: SuiClient,
      args: [i32.I32, number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.modEuclidean(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function mul(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.mul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function negFrom(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.negFrom(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function or(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.or(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function shl(
      client: SuiClient,
      args: [i32.I32, number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.shl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function shr(
      client: SuiClient,
      args: [i32.I32, number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.shr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function sign(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.sign(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function sub(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.sub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function zero(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.zero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
  }
}

export class i64 extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("i64", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): i64 {
    return new i64({ ...i64.DEFAULT_OPTIONS, ...options });
  }

  onEventI64(
    func: (event: i64.I64Instance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): i64 {
    this.onMoveEvent(func, { type: "i64::I64" }, fetchConfig);
    return this;
  }
}

export namespace i64 {
  export interface I64 {
    bits: bigint;
  }

  export namespace I64 {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::I64";

    const TYPE = new TypeDescriptor<I64>(I64.TYPE_QNAME);

    export function type(): TypeDescriptor<I64> {
      return TYPE.apply();
    }
  }

  export type I64Instance = TypedEventInstance<I64> & {
    data_decoded: I64;
    type_arguments: [];
  };

  export namespace builder {
    export function abs(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::abs",
        arguments: _args,
      });
    }
    export function absU64(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::abs_u64",
        arguments: _args,
      });
    }
    export function add(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::add",
        arguments: _args,
      });
    }
    export function and(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::and",
        arguments: _args,
      });
    }
    export function asU64(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::as_u64",
        arguments: _args,
      });
    }
    export function cmp(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::cmp",
        arguments: _args,
      });
    }
    export function div(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::div",
        arguments: _args,
      });
    }
    export function eq(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::eq",
        arguments: _args,
      });
    }
    export function from$(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::from",
        arguments: _args,
      });
    }
    export function fromU64(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::from_u64",
        arguments: _args,
      });
    }
    export function gt(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::gt",
        arguments: _args,
      });
    }
    export function gte(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::gte",
        arguments: _args,
      });
    }
    export function isNeg(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::is_neg",
        arguments: _args,
      });
    }
    export function lt(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::lt",
        arguments: _args,
      });
    }
    export function lte(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::lte",
        arguments: _args,
      });
    }
    export function mod(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::mod",
        arguments: _args,
      });
    }
    export function mul(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::mul",
        arguments: _args,
      });
    }
    export function negFrom(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::neg_from",
        arguments: _args,
      });
    }
    export function or(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::or",
        arguments: _args,
      });
    }
    export function shl(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::shl",
        arguments: _args,
      });
    }
    export function shr(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::shr",
        arguments: _args,
      });
    }
    export function sign(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::sign",
        arguments: _args,
      });
    }
    export function sub(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::wrapping_sub",
        arguments: _args,
      });
    }
    export function zero(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::i64::zero",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function abs(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.abs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function absU64(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.absU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function add(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function and(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.and(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function asU64(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.asU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function cmp(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.cmp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function div(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.div(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function eq(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.eq(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function from$(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.from$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function fromU64(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.fromU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function gt(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function gte(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isNeg(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isNeg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lt(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lte(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function mod(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.mod(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function mul(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.mul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function negFrom(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.negFrom(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function or(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.or(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function shl(
      client: SuiClient,
      args: [i64.I64, number],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.shl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function shr(
      client: SuiClient,
      args: [i64.I64, number],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.shr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function sign(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.sign(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function sub(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.sub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function zero(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.zero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
  }
}

export namespace math_bit {
  export namespace builder {
    export function leastSignificantBit(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_bit::least_significant_bit",
        arguments: _args,
      });
    }
    export function mostSignificantBit(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_bit::most_significant_bit",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function leastSignificantBit(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.leastSignificantBit(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function mostSignificantBit(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.mostSignificantBit(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
  }
}

export namespace math_liquidity {
  export namespace builder {
    export function addDelta(
      tx: Transaction,
      args: [bigint | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_liquidity::add_delta",
        arguments: _args,
      });
    }
    export function getAmountAForLiquidity(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_liquidity::get_amount_a_for_liquidity",
        arguments: _args,
      });
    }
    export function getAmountBForLiquidity(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_liquidity::get_amount_b_for_liquidity",
        arguments: _args,
      });
    }
    export function getAmountForLiquidity(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_liquidity::get_amount_for_liquidity",
        arguments: _args,
      });
    }
    export function getLiquidityForAmountA(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_liquidity::get_liquidity_for_amount_a",
        arguments: _args,
      });
    }
    export function getLiquidityForAmountB(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_liquidity::get_liquidity_for_amount_b",
        arguments: _args,
      });
    }
    export function getLiquidityForAmounts(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_liquidity::get_liquidity_for_amounts",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addDelta(
      client: SuiClient,
      args: [bigint, i128.I128],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.addDelta(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getAmountAForLiquidity(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getAmountAForLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getAmountBForLiquidity(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getAmountBForLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getAmountForLiquidity(
      client: SuiClient,
      args: [bigint, bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getAmountForLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getLiquidityForAmountA(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getLiquidityForAmountA(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getLiquidityForAmountB(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getLiquidityForAmountB(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getLiquidityForAmounts(
      client: SuiClient,
      args: [bigint, bigint, bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getLiquidityForAmounts(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace math_sqrt_price {
  export namespace builder {
    export function getAmountADelta(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        i128.I128 | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_sqrt_price::get_amount_a_delta",
        arguments: _args,
      });
    }
    export function getAmountADelta_(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_sqrt_price::get_amount_a_delta_",
        arguments: _args,
      });
    }
    export function getAmountBDelta(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        i128.I128 | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_sqrt_price::get_amount_b_delta",
        arguments: _args,
      });
    }
    export function getAmountBDelta_(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_sqrt_price::get_amount_b_delta_",
        arguments: _args,
      });
    }
    export function getNextSqrtPrice(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_sqrt_price::get_next_sqrt_price",
        arguments: _args,
      });
    }
    export function mulDivRoundFixed(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));
      _args.push(transactionArgumentOrPureU256(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_sqrt_price::mul_div_round_fixed",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function getAmountADelta(
      client: SuiClient,
      args: [bigint, bigint, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.getAmountADelta(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function getAmountADelta_(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getAmountADelta_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getAmountBDelta(
      client: SuiClient,
      args: [bigint, bigint, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.getAmountBDelta(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function getAmountBDelta_(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getAmountBDelta_(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getNextSqrtPrice(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getNextSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivRoundFixed(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivRoundFixed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace math_swap {
  export namespace builder {
    export function computeSwap(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));
      _args.push(transactionArgumentOrPureU32(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_swap::compute_swap",
        arguments: _args,
      });
    }
    export function getAmountFixedDelta(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_swap::get_amount_fixed_delta",
        arguments: _args,
      });
    }
    export function getAmountUnfixedDelta(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_swap::get_amount_unfixed_delta",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function computeSwap(
      client: SuiClient,
      args: [bigint, bigint, bigint, bigint, boolean, number],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint, bigint]>> {
      const tx = new Transaction();
      builder.computeSwap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function getAmountFixedDelta(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getAmountFixedDelta(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getAmountUnfixedDelta(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getAmountUnfixedDelta(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace math_tick {
  export namespace builder {
    export function getMaxTick(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_tick::get_max_tick",
        arguments: _args,
      });
    }
    export function getMinTick(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_tick::get_min_tick",
        arguments: _args,
      });
    }
    export function getSqrtPriceNegativeTick(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_tick::get_sqrt_price_negative_tick",
        arguments: _args,
      });
    }
    export function getSqrtPricePositiveTick(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_tick::get_sqrt_price_positive_tick",
        arguments: _args,
      });
    }
    export function maxLiquidityPerTick(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_tick::max_liquidity_per_tick",
        arguments: _args,
      });
    }
    export function sqrtPriceFromTickIndex(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_tick::sqrt_price_from_tick_index",
        arguments: _args,
      });
    }
    export function tickIndexFromSqrtPrice(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_tick::tick_index_from_sqrt_price",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function getMaxTick(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.getMaxTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function getMinTick(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.getMinTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function getSqrtPriceNegativeTick(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getSqrtPriceNegativeTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getSqrtPricePositiveTick(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getSqrtPricePositiveTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function maxLiquidityPerTick(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.maxLiquidityPerTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function sqrtPriceFromTickIndex(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.sqrtPriceFromTickIndex(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function tickIndexFromSqrtPrice(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.tickIndexFromSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
  }
}

export namespace math_u128 {
  export namespace builder {
    export function checkedDivRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::checked_div_round",
        arguments: _args,
      });
    }
    export function fromLoHi(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::from_lo_hi",
        arguments: _args,
      });
    }
    export function fullMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::full_mul",
        arguments: _args,
      });
    }
    export function hi(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::hi",
        arguments: _args,
      });
    }
    export function hiU128(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::hi_u128",
        arguments: _args,
      });
    }
    export function leadingZeros(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::leading_zeros",
        arguments: _args,
      });
    }
    export function lo(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::lo",
        arguments: _args,
      });
    }
    export function loU128(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::lo_u128",
        arguments: _args,
      });
    }
    export function max(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::max",
        arguments: _args,
      });
    }
    export function min(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::min",
        arguments: _args,
      });
    }
    export function overflowingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::overflowing_add",
        arguments: _args,
      });
    }
    export function overflowingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::overflowing_mul",
        arguments: _args,
      });
    }
    export function overflowingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::overflowing_sub",
        arguments: _args,
      });
    }
    export function pow(
      tx: Transaction,
      args: [bigint | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::pow",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::wrapping_mul",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u128::wrapping_sub",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function checkedDivRound(
      client: SuiClient,
      args: [bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.checkedDivRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function fromLoHi(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.fromLoHi(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function fullMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.fullMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function hi(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.hi(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function hiU128(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.hiU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function leadingZeros(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.leadingZeros(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function lo(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.lo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function loU128(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.loU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function max(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.max(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function min(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.min(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function overflowingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function pow(
      client: SuiClient,
      args: [bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.pow(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace math_u256 {
  export namespace builder {
    export function checkedShlw(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u256::checked_shlw",
        arguments: _args,
      });
    }
    export function divMod(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u256::div_mod",
        arguments: _args,
      });
    }
    export function divRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u256::div_round",
        arguments: _args,
      });
    }
    export function shlw(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u256::shlw",
        arguments: _args,
      });
    }
    export function shrw(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u256::shrw",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function checkedShlw(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.checkedShlw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function divMod(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.divMod(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function divRound(
      client: SuiClient,
      args: [bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.divRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function shlw(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.shlw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function shrw(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.shrw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace math_u64 {
  export namespace builder {
    export function carryAdd(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u64::carry_add",
        arguments: _args,
      });
    }
    export function overflowingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u64::overflowing_add",
        arguments: _args,
      });
    }
    export function overflowingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u64::overflowing_mul",
        arguments: _args,
      });
    }
    export function overflowingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u64::overflowing_sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u64::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u64::wrapping_mul",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::math_u64::wrapping_sub",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function carryAdd(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.carryAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function overflowingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export class pool extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("pool", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): pool {
    return new pool({ ...pool.DEFAULT_OPTIONS, ...options });
  }

  onEventAddRewardEvent(
    func: (event: pool.AddRewardEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::AddRewardEvent" }, fetchConfig);
    return this;
  }

  onEventBurnEvent(
    func: (event: pool.BurnEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::BurnEvent" }, fetchConfig);
    return this;
  }

  onEventCollectEvent(
    func: (event: pool.CollectEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::CollectEvent" }, fetchConfig);
    return this;
  }

  onEventCollectProtocolFeeEvent(
    func: (
      event: pool.CollectProtocolFeeEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(
      func,
      { type: "pool::CollectProtocolFeeEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventCollectRewardEvent(
    func: (event: pool.CollectRewardEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::CollectRewardEvent" }, fetchConfig);
    return this;
  }

  onEventComputeSwapState(
    func: (event: pool.ComputeSwapStateInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::ComputeSwapState" }, fetchConfig);
    return this;
  }

  onEventInitRewardEvent(
    func: (event: pool.InitRewardEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::InitRewardEvent" }, fetchConfig);
    return this;
  }

  onEventMintEvent(
    func: (event: pool.MintEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::MintEvent" }, fetchConfig);
    return this;
  }

  onEventRemoveRewardEvent(
    func: (event: pool.RemoveRewardEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::RemoveRewardEvent" }, fetchConfig);
    return this;
  }

  onEventSwapEvent(
    func: (event: pool.SwapEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::SwapEvent" }, fetchConfig);
    return this;
  }

  onEventTogglePoolStatusEvent(
    func: (event: pool.TogglePoolStatusEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(
      func,
      { type: "pool::TogglePoolStatusEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventUpdatePoolFeeProtocolEvent(
    func: (
      event: pool.UpdatePoolFeeProtocolEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(
      func,
      { type: "pool::UpdatePoolFeeProtocolEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventUpdateRewardEmissionsEvent(
    func: (
      event: pool.UpdateRewardEmissionsEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(
      func,
      { type: "pool::UpdateRewardEmissionsEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventUpdateRewardManagerEvent(
    func: (
      event: pool.UpdateRewardManagerEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(
      func,
      { type: "pool::UpdateRewardManagerEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventUpgradeEvent(
    func: (event: pool.UpgradeEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::UpgradeEvent" }, fetchConfig);
    return this;
  }
}

export namespace pool {
  export interface AddRewardEvent {
    pool: _0x2.object$.ID;
    reward_index: bigint;
    reward_vault: string;
    reward_manager: string;
    amount: bigint;
  }

  export namespace AddRewardEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::AddRewardEvent";

    const TYPE = new TypeDescriptor<AddRewardEvent>(AddRewardEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<AddRewardEvent> {
      return TYPE.apply();
    }
  }

  export type AddRewardEventInstance = TypedEventInstance<AddRewardEvent> & {
    data_decoded: AddRewardEvent;
    type_arguments: [];
  };

  export interface BurnEvent {
    pool: _0x2.object$.ID;
    owner: string;
    tick_lower_index: i32.I32;
    tick_upper_index: i32.I32;
    amount_a: bigint;
    amount_b: bigint;
    liquidity_delta: bigint;
  }

  export namespace BurnEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::BurnEvent";

    const TYPE = new TypeDescriptor<BurnEvent>(BurnEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<BurnEvent> {
      return TYPE.apply();
    }
  }

  export type BurnEventInstance = TypedEventInstance<BurnEvent> & {
    data_decoded: BurnEvent;
    type_arguments: [];
  };

  export interface CollectEvent {
    pool: _0x2.object$.ID;
    recipient: string;
    tick_lower_index: i32.I32;
    tick_upper_index: i32.I32;
    amount_a: bigint;
    amount_b: bigint;
  }

  export namespace CollectEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::CollectEvent";

    const TYPE = new TypeDescriptor<CollectEvent>(CollectEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<CollectEvent> {
      return TYPE.apply();
    }
  }

  export type CollectEventInstance = TypedEventInstance<CollectEvent> & {
    data_decoded: CollectEvent;
    type_arguments: [];
  };

  export interface CollectProtocolFeeEvent {
    pool: _0x2.object$.ID;
    recipient: string;
    amount_a: bigint;
    amount_b: bigint;
  }

  export namespace CollectProtocolFeeEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::CollectProtocolFeeEvent";

    const TYPE = new TypeDescriptor<CollectProtocolFeeEvent>(
      CollectProtocolFeeEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CollectProtocolFeeEvent> {
      return TYPE.apply();
    }
  }

  export type CollectProtocolFeeEventInstance =
    TypedEventInstance<CollectProtocolFeeEvent> & {
      data_decoded: CollectProtocolFeeEvent;
      type_arguments: [];
    };

  export interface CollectRewardEvent {
    pool: _0x2.object$.ID;
    recipient: string;
    tick_lower_index: i32.I32;
    tick_upper_index: i32.I32;
    amount: bigint;
    vault: _0x2.object$.ID;
    reward_index: bigint;
  }

  export namespace CollectRewardEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::CollectRewardEvent";

    const TYPE = new TypeDescriptor<CollectRewardEvent>(
      CollectRewardEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CollectRewardEvent> {
      return TYPE.apply();
    }
  }

  export type CollectRewardEventInstance =
    TypedEventInstance<CollectRewardEvent> & {
      data_decoded: CollectRewardEvent;
      type_arguments: [];
    };

  export interface ComputeSwapState {
    amount_a: bigint;
    amount_b: bigint;
    amount_specified_remaining: bigint;
    amount_calculated: bigint;
    sqrt_price: bigint;
    tick_current_index: i32.I32;
    fee_growth_global: bigint;
    protocol_fee: bigint;
    liquidity: bigint;
    fee_amount: bigint;
  }

  export namespace ComputeSwapState {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::ComputeSwapState";

    const TYPE = new TypeDescriptor<ComputeSwapState>(
      ComputeSwapState.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<ComputeSwapState> {
      return TYPE.apply();
    }
  }

  export type ComputeSwapStateInstance =
    TypedEventInstance<ComputeSwapState> & {
      data_decoded: ComputeSwapState;
      type_arguments: [];
    };

  export interface InitRewardEvent {
    pool: _0x2.object$.ID;
    reward_index: bigint;
    reward_vault: string;
    reward_manager: string;
  }

  export namespace InitRewardEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::InitRewardEvent";

    const TYPE = new TypeDescriptor<InitRewardEvent>(
      InitRewardEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<InitRewardEvent> {
      return TYPE.apply();
    }
  }

  export type InitRewardEventInstance = TypedEventInstance<InitRewardEvent> & {
    data_decoded: InitRewardEvent;
    type_arguments: [];
  };

  export interface MintEvent {
    pool: _0x2.object$.ID;
    owner: string;
    tick_lower_index: i32.I32;
    tick_upper_index: i32.I32;
    amount_a: bigint;
    amount_b: bigint;
    liquidity_delta: bigint;
  }

  export namespace MintEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::MintEvent";

    const TYPE = new TypeDescriptor<MintEvent>(MintEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<MintEvent> {
      return TYPE.apply();
    }
  }

  export type MintEventInstance = TypedEventInstance<MintEvent> & {
    data_decoded: MintEvent;
    type_arguments: [];
  };

  export interface Pool<T0, T1, T2> {
    id: _0x2.object$.UID;
    coin_a: _0x2.balance.Balance<T0>;
    coin_b: _0x2.balance.Balance<T1>;
    protocol_fees_a: bigint;
    protocol_fees_b: bigint;
    sqrt_price: bigint;
    tick_current_index: i32.I32;
    tick_spacing: number;
    max_liquidity_per_tick: bigint;
    fee: number;
    fee_protocol: number;
    unlocked: boolean;
    fee_growth_global_a: bigint;
    fee_growth_global_b: bigint;
    liquidity: bigint;
    tick_map: _0x2.table.Table<i32.I32, bigint>;
    deploy_time_ms: bigint;
    reward_infos: pool.PoolRewardInfo[];
    reward_last_updated_time_ms: bigint;
  }

  export namespace Pool {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::Pool";

    const TYPE = new TypeDescriptor<Pool<any, any, any>>(Pool.TYPE_QNAME);

    export function type<T0, T1, T2>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
      arg2: TypeDescriptor<T2> = ANY_TYPE,
    ): TypeDescriptor<Pool<T0, T1, T2>> {
      return TYPE.apply(arg0, arg1, arg2);
    }
  }

  export interface PoolRewardInfo {
    id: _0x2.object$.UID;
    vault: string;
    vault_coin_type: string;
    emissions_per_second: bigint;
    growth_global: bigint;
    manager: string;
  }

  export namespace PoolRewardInfo {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::PoolRewardInfo";

    const TYPE = new TypeDescriptor<PoolRewardInfo>(PoolRewardInfo.TYPE_QNAME);

    export function type(): TypeDescriptor<PoolRewardInfo> {
      return TYPE.apply();
    }
  }

  export interface PoolRewardVault<T0> {
    id: _0x2.object$.UID;
    coin: _0x2.balance.Balance<T0>;
  }

  export namespace PoolRewardVault {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::PoolRewardVault";

    const TYPE = new TypeDescriptor<PoolRewardVault<any>>(
      PoolRewardVault.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<PoolRewardVault<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface Position {
    id: _0x2.object$.UID;
    liquidity: bigint;
    fee_growth_inside_a: bigint;
    fee_growth_inside_b: bigint;
    tokens_owed_a: bigint;
    tokens_owed_b: bigint;
    reward_infos: pool.PositionRewardInfo[];
  }

  export namespace Position {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::Position";

    const TYPE = new TypeDescriptor<Position>(Position.TYPE_QNAME);

    export function type(): TypeDescriptor<Position> {
      return TYPE.apply();
    }
  }

  export interface PositionRewardInfo {
    reward_growth_inside: bigint;
    amount_owed: bigint;
  }

  export namespace PositionRewardInfo {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::PositionRewardInfo";

    const TYPE = new TypeDescriptor<PositionRewardInfo>(
      PositionRewardInfo.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<PositionRewardInfo> {
      return TYPE.apply();
    }
  }

  export interface RemoveRewardEvent {
    pool: _0x2.object$.ID;
    reward_index: bigint;
    reward_vault: string;
    reward_manager: string;
    amount: bigint;
    recipient: string;
  }

  export namespace RemoveRewardEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::RemoveRewardEvent";

    const TYPE = new TypeDescriptor<RemoveRewardEvent>(
      RemoveRewardEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RemoveRewardEvent> {
      return TYPE.apply();
    }
  }

  export type RemoveRewardEventInstance =
    TypedEventInstance<RemoveRewardEvent> & {
      data_decoded: RemoveRewardEvent;
      type_arguments: [];
    };

  export interface SwapEvent {
    pool: _0x2.object$.ID;
    recipient: string;
    amount_a: bigint;
    amount_b: bigint;
    liquidity: bigint;
    tick_current_index: i32.I32;
    tick_pre_index: i32.I32;
    sqrt_price: bigint;
    protocol_fee: bigint;
    fee_amount: bigint;
    a_to_b: boolean;
    is_exact_in: boolean;
  }

  export namespace SwapEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::SwapEvent";

    const TYPE = new TypeDescriptor<SwapEvent>(SwapEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<SwapEvent> {
      return TYPE.apply();
    }
  }

  export type SwapEventInstance = TypedEventInstance<SwapEvent> & {
    data_decoded: SwapEvent;
    type_arguments: [];
  };

  export interface Tick {
    id: _0x2.object$.UID;
    liquidity_gross: bigint;
    liquidity_net: i128.I128;
    fee_growth_outside_a: bigint;
    fee_growth_outside_b: bigint;
    reward_growths_outside: bigint[];
    initialized: boolean;
  }

  export namespace Tick {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::Tick";

    const TYPE = new TypeDescriptor<Tick>(Tick.TYPE_QNAME);

    export function type(): TypeDescriptor<Tick> {
      return TYPE.apply();
    }
  }

  export interface TogglePoolStatusEvent {
    pool: _0x2.object$.ID;
    status: boolean;
  }

  export namespace TogglePoolStatusEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::TogglePoolStatusEvent";

    const TYPE = new TypeDescriptor<TogglePoolStatusEvent>(
      TogglePoolStatusEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<TogglePoolStatusEvent> {
      return TYPE.apply();
    }
  }

  export type TogglePoolStatusEventInstance =
    TypedEventInstance<TogglePoolStatusEvent> & {
      data_decoded: TogglePoolStatusEvent;
      type_arguments: [];
    };

  export interface UpdatePoolFeeProtocolEvent {
    pool: _0x2.object$.ID;
    fee_protocol: number;
  }

  export namespace UpdatePoolFeeProtocolEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::UpdatePoolFeeProtocolEvent";

    const TYPE = new TypeDescriptor<UpdatePoolFeeProtocolEvent>(
      UpdatePoolFeeProtocolEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdatePoolFeeProtocolEvent> {
      return TYPE.apply();
    }
  }

  export type UpdatePoolFeeProtocolEventInstance =
    TypedEventInstance<UpdatePoolFeeProtocolEvent> & {
      data_decoded: UpdatePoolFeeProtocolEvent;
      type_arguments: [];
    };

  export interface UpdateRewardEmissionsEvent {
    pool: _0x2.object$.ID;
    reward_index: bigint;
    reward_vault: string;
    reward_manager: string;
    reward_emissions_per_second: bigint;
  }

  export namespace UpdateRewardEmissionsEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::UpdateRewardEmissionsEvent";

    const TYPE = new TypeDescriptor<UpdateRewardEmissionsEvent>(
      UpdateRewardEmissionsEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateRewardEmissionsEvent> {
      return TYPE.apply();
    }
  }

  export type UpdateRewardEmissionsEventInstance =
    TypedEventInstance<UpdateRewardEmissionsEvent> & {
      data_decoded: UpdateRewardEmissionsEvent;
      type_arguments: [];
    };

  export interface UpdateRewardManagerEvent {
    pool: _0x2.object$.ID;
    reward_index: bigint;
    reward_manager: string;
  }

  export namespace UpdateRewardManagerEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::UpdateRewardManagerEvent";

    const TYPE = new TypeDescriptor<UpdateRewardManagerEvent>(
      UpdateRewardManagerEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateRewardManagerEvent> {
      return TYPE.apply();
    }
  }

  export type UpdateRewardManagerEventInstance =
    TypedEventInstance<UpdateRewardManagerEvent> & {
      data_decoded: UpdateRewardManagerEvent;
      type_arguments: [];
    };

  export interface UpgradeEvent {
    old_version: bigint;
    new_version: bigint;
  }

  export namespace UpgradeEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::UpgradeEvent";

    const TYPE = new TypeDescriptor<UpgradeEvent>(UpgradeEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<UpgradeEvent> {
      return TYPE.apply();
    }
  }

  export type UpgradeEventInstance = TypedEventInstance<UpgradeEvent> & {
    data_decoded: UpgradeEvent;
    type_arguments: [];
  };

  export interface Versioned {
    id: _0x2.object$.UID;
    version: bigint;
  }

  export namespace Versioned {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::Versioned";

    const TYPE = new TypeDescriptor<Versioned>(Versioned.TYPE_QNAME);

    export function type(): TypeDescriptor<Versioned> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::add_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function burn<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        i32.I32 | TransactionArgument,
        i32.I32 | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::burn",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function checkVersion(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::check_version",
        arguments: _args,
      });
    }
    export function collect<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        i32.I32 | TransactionArgument,
        i32.I32 | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::collect",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function collectProtocolFee<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureAddress(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::collect_protocol_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function collectReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        i32.I32 | TransactionArgument,
        i32.I32 | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureU64(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::collect_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function computeSwapResult<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureBool(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::compute_swap_result",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function deployPool<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU32(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::deploy_pool",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPoolBalance<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_pool_balance",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPoolFee<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_pool_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPoolSqrtPrice<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_pool_sqrt_price",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPosition<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        i32.I32 | TransactionArgument,
        i32.I32 | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_position",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPositionBaseInfo<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_position_base_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPositionFeeGrowthInsideA<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_position_fee_growth_inside_a",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPositionFeeGrowthInsideB<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_position_fee_growth_inside_b",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPositionKey(
      tx: Transaction,
      args: [
        string | TransactionArgument,
        i32.I32 | TransactionArgument,
        i32.I32 | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureAddress(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_position_key",
        arguments: _args,
      });
    }
    export function getPositionRewardInfo(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_position_reward_info",
        arguments: _args,
      });
    }
    export function getPositionRewardInfos<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_position_reward_infos",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getTick<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        i32.I32 | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::get_tick",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function initReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::init_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function mergeCoin<T0 = any>(
      tx: Transaction,
      args: [(string | TransactionObjectArgument)[] | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrVec(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::merge_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mint<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        i32.I32 | TransactionArgument,
        i32.I32 | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::mint",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function positionTick(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::position_tick",
        arguments: _args,
      });
    }
    export function removeReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureAddress(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::remove_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function splitAndTransfer<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        bigint | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::split_and_transfer",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function swap<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::swap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function swapCoinAB<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureAddress(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::swap_coin_a_b",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function swapCoinABBC<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::swap_coin_a_b_b_c",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function swapCoinABCB<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::swap_coin_a_b_c_b",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function swapCoinBA<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureAddress(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::swap_coin_b_a",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function swapCoinBABC<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::swap_coin_b_a_b_c",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function swapCoinBACB<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::swap_coin_b_a_c_b",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function togglePoolStatus<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::toggle_pool_status",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function transferIn<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::transfer_in",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function transferOut<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureAddress(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::transfer_out",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updatePoolFeeProtocol<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::update_pool_fee_protocol",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateRewardEmissions<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::update_reward_emissions",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateRewardManager<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::update_reward_manager",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function upgrade(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::upgrade",
        arguments: _args,
      });
    }
    export function version(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool::version",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [string, string, bigint, _0x2.coin.Coin<T3>, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function burn<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, i32.I32, i32.I32, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.burn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function checkVersion(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collect<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, i32.I32, i32.I32, bigint, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.collect(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function collectProtocolFee<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectProtocolFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [string, string, string, i32.I32, i32.I32, bigint, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.collectReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function computeSwapResult<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, boolean, bigint, boolean, bigint, boolean, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.ComputeSwapState]>> {
      const tx = new Transaction();
      builder.computeSwapResult(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.ComputeSwapState]
      >(inspectRes);
    }
    export async function deployPool<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [number, number, bigint, number, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0, T1, T2>]>> {
      const tx = new Transaction();
      builder.deployPool(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0, T1, T2>]
      >(inspectRes);
    }
    export async function getPoolBalance<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getPoolBalance(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getPoolFee<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.getPoolFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function getPoolSqrtPrice<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPoolSqrtPrice(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPosition<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, i32.I32, i32.I32],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.getPosition(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function getPositionBaseInfo<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<
      TypedDevInspectResults<[bigint, bigint, bigint, bigint, bigint, string]>
    > {
      const tx = new Transaction();
      builder.getPositionBaseInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint, bigint, string]
      >(inspectRes);
    }
    export async function getPositionFeeGrowthInsideA<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPositionFeeGrowthInsideA(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPositionFeeGrowthInsideB<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPositionFeeGrowthInsideB(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPositionKey(
      client: SuiClient,
      args: [string, i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.getPositionKey(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function getPositionRewardInfo(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getPositionRewardInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getPositionRewardInfos<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.getPositionRewardInfos(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function getTick<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, i32.I32],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.getTick(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function initReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [string, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.PoolRewardVault<T3>]>> {
      const tx = new Transaction();
      builder.initReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.PoolRewardVault<T3>]
      >(inspectRes);
    }
    export async function mergeCoin<T0 = any>(
      client: SuiClient,
      args: [string[]],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.mergeCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function mint<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, i32.I32, i32.I32, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.mint(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function positionTick(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32, number]>> {
      const tx = new Transaction();
      builder.positionTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [i32.I32, number]
      >(inspectRes);
    }
    export async function removeReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [string, string, bigint, bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function splitAndTransfer<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.Coin<T0>, bigint, _0x2.coin.Coin<T1>, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.splitAndTransfer(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swap<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, boolean, bigint, boolean, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.swap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function swapCoinAB<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.Coin<T0>, bigint, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapCoinAB(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapCoinABBC<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        _0x2.coin.Coin<T0>,
        bigint,
        bigint,
        bigint,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapCoinABBC(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapCoinABCB<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        _0x2.coin.Coin<T0>,
        bigint,
        bigint,
        bigint,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapCoinABCB(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapCoinBA<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.Coin<T1>, bigint, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapCoinBA(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapCoinBABC<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        _0x2.coin.Coin<T0>,
        bigint,
        bigint,
        bigint,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapCoinBABC(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapCoinBACB<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        _0x2.coin.Coin<T0>,
        bigint,
        bigint,
        bigint,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapCoinBACB(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function togglePoolStatus<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.togglePoolStatus(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transferIn<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.Coin<T0>, _0x2.coin.Coin<T1>],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transferIn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transferOut<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transferOut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updatePoolFeeProtocol<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, number],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updatePoolFeeProtocol(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateRewardEmissions<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateRewardEmissions(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateRewardManager<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateRewardManager(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function upgrade(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.upgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function version(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.version(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export class pool_factory extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("pool_factory", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): pool_factory {
    return new pool_factory({ ...pool_factory.DEFAULT_OPTIONS, ...options });
  }

  onEntryCollectProtocolFee(
    func: (
      call: pool_factory.CollectProtocolFeePayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::collect_protocol_fee",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryDeployPool(
    func: (call: pool_factory.DeployPoolPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::deploy_pool",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryDeployPoolAndMint(
    func: (
      call: pool_factory.DeployPoolAndMintPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::deploy_pool_and_mint",
      },
      fetchConfig,
    );
    return this;
  }

  onEntrySetFeeProtocol(
    func: (call: pool_factory.SetFeeProtocolPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::set_fee_protocol",
      },
      fetchConfig,
    );
    return this;
  }

  onEntrySetFeeTier(
    func: (call: pool_factory.SetFeeTierPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::set_fee_tier",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryTogglePoolStatus(
    func: (call: pool_factory.TogglePoolStatusPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::toggle_pool_status",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpdateNftDescription(
    func: (
      call: pool_factory.UpdateNftDescriptionPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::update_nft_description",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpdateNftImgUrl(
    func: (call: pool_factory.UpdateNftImgUrlPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::update_nft_img_url",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpdateNftName(
    func: (call: pool_factory.UpdateNftNamePayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::update_nft_name",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpdatePoolFeeProtocol(
    func: (
      call: pool_factory.UpdatePoolFeeProtocolPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::update_pool_fee_protocol",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpgrade(
    func: (call: pool_factory.UpgradePayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_factory::upgrade",
      },
      fetchConfig,
    );
    return this;
  }

  onEventFeeAmountEnabledEvent(
    func: (
      event: pool_factory.FeeAmountEnabledEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onMoveEvent(
      func,
      { type: "pool_factory::FeeAmountEnabledEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventPoolCreatedEvent(
    func: (
      event: pool_factory.PoolCreatedEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onMoveEvent(
      func,
      { type: "pool_factory::PoolCreatedEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventSetFeeProtocolEvent(
    func: (
      event: pool_factory.SetFeeProtocolEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_factory {
    this.onMoveEvent(
      func,
      { type: "pool_factory::SetFeeProtocolEvent" },
      fetchConfig,
    );
    return this;
  }
}

export namespace pool_factory {
  export interface FeeAmountEnabledEvent {
    fee: number;
    tick_spacing: number;
  }

  export namespace FeeAmountEnabledEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::FeeAmountEnabledEvent";

    const TYPE = new TypeDescriptor<FeeAmountEnabledEvent>(
      FeeAmountEnabledEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<FeeAmountEnabledEvent> {
      return TYPE.apply();
    }
  }

  export type FeeAmountEnabledEventInstance =
    TypedEventInstance<FeeAmountEnabledEvent> & {
      data_decoded: FeeAmountEnabledEvent;
      type_arguments: [];
    };

  export interface PoolConfig {
    id: _0x2.object$.UID;
    fee_map: _0x2.vec_map.VecMap<string, _0x2.object$.ID>;
    fee_protocol: number;
    pools: _0x2.table.Table<_0x2.object$.ID, pool_factory.PoolSimpleInfo>;
  }

  export namespace PoolConfig {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::PoolConfig";

    const TYPE = new TypeDescriptor<PoolConfig>(PoolConfig.TYPE_QNAME);

    export function type(): TypeDescriptor<PoolConfig> {
      return TYPE.apply();
    }
  }

  export interface PoolCreatedEvent {
    account: string;
    pool: _0x2.object$.ID;
    fee: number;
    tick_spacing: number;
    fee_protocol: number;
    sqrt_price: bigint;
  }

  export namespace PoolCreatedEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::PoolCreatedEvent";

    const TYPE = new TypeDescriptor<PoolCreatedEvent>(
      PoolCreatedEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<PoolCreatedEvent> {
      return TYPE.apply();
    }
  }

  export type PoolCreatedEventInstance =
    TypedEventInstance<PoolCreatedEvent> & {
      data_decoded: PoolCreatedEvent;
      type_arguments: [];
    };

  export interface PoolFactoryAdminCap {
    id: _0x2.object$.UID;
  }

  export namespace PoolFactoryAdminCap {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::PoolFactoryAdminCap";

    const TYPE = new TypeDescriptor<PoolFactoryAdminCap>(
      PoolFactoryAdminCap.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<PoolFactoryAdminCap> {
      return TYPE.apply();
    }
  }

  export interface PoolSimpleInfo {
    pool_id: _0x2.object$.ID;
    pool_key: _0x2.object$.ID;
    coin_type_a: _0x1.type_name.TypeName;
    coin_type_b: _0x1.type_name.TypeName;
    fee_type: _0x1.type_name.TypeName;
    fee: number;
    tick_spacing: number;
  }

  export namespace PoolSimpleInfo {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::PoolSimpleInfo";

    const TYPE = new TypeDescriptor<PoolSimpleInfo>(PoolSimpleInfo.TYPE_QNAME);

    export function type(): TypeDescriptor<PoolSimpleInfo> {
      return TYPE.apply();
    }
  }

  export interface SetFeeProtocolEvent {
    fee_protocol: number;
  }

  export namespace SetFeeProtocolEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::SetFeeProtocolEvent";

    const TYPE = new TypeDescriptor<SetFeeProtocolEvent>(
      SetFeeProtocolEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<SetFeeProtocolEvent> {
      return TYPE.apply();
    }
  }

  export type SetFeeProtocolEventInstance =
    TypedEventInstance<SetFeeProtocolEvent> & {
      data_decoded: SetFeeProtocolEvent;
      type_arguments: [];
    };

  export namespace builder {
    export function collectProtocolFee<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureAddress(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::collect_protocol_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function deployPool<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::deploy_pool",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function deployPoolAndMint<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
        boolean | TransactionArgument,
        number | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrPureU32(args[6], tx));
      _args.push(transactionArgumentOrPureBool(args[7], tx));
      _args.push(transactionArgumentOrPureU32(args[8], tx));
      _args.push(transactionArgumentOrPureBool(args[9], tx));
      _args.push(transactionArgumentOrPureU64(args[10], tx));
      _args.push(transactionArgumentOrPureU64(args[11], tx));
      _args.push(transactionArgumentOrPureU64(args[12], tx));
      _args.push(transactionArgumentOrPureU64(args[13], tx));
      _args.push(transactionArgumentOrPureAddress(args[14], tx));
      _args.push(transactionArgumentOrPureU64(args[15], tx));
      _args.push(transactionArgumentOrObject(args[16], tx));
      _args.push(transactionArgumentOrObject(args[17], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::deploy_pool_and_mint",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function setFeeProtocol(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::set_fee_protocol",
        arguments: _args,
      });
    }
    export function setFeeTier<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::set_fee_tier",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function togglePoolStatus<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::toggle_pool_status",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateNftDescription(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::update_nft_description",
        arguments: _args,
      });
    }
    export function updateNftImgUrl(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::update_nft_img_url",
        arguments: _args,
      });
    }
    export function updateNftName(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::update_nft_name",
        arguments: _args,
      });
    }
    export function updatePoolFeeProtocol<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::update_pool_fee_protocol",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function upgrade(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_factory::upgrade",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function collectProtocolFee<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, bigint, bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectProtocolFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deployPool<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.deployPool(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deployPoolAndMint<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        bigint,
        string,
        string[],
        string[],
        number,
        boolean,
        number,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.deployPoolAndMint(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setFeeProtocol(
      client: SuiClient,
      args: [string, string, number, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFeeProtocol(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setFeeTier<T0 = any>(
      client: SuiClient,
      args: [string, string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setFeeTier(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function togglePoolStatus<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.togglePoolStatus(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateNftDescription(
      client: SuiClient,
      args: [string, string, string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateNftDescription(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateNftImgUrl(
      client: SuiClient,
      args: [string, string, string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateNftImgUrl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateNftName(
      client: SuiClient,
      args: [string, string, string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateNftName(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updatePoolFeeProtocol<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, number, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updatePoolFeeProtocol(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function upgrade(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.upgrade(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }

  export interface CollectProtocolFeePayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [string, string, bigint, bigint, string, string, string]
    > {
    arguments_decoded: [string, string, bigint, bigint, string, string, string];
    type_arguments: [string, string, string];
  }

  export interface DeployPoolPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [string, string, bigint, string, string, string]
    > {
    arguments_decoded: [string, string, bigint, string, string, string];
    type_arguments: [string, string, string];
  }

  export interface DeployPoolAndMintPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [
        string,
        string,
        bigint,
        string,
        _0x2.coin.Coin<T0>[],
        _0x2.coin.Coin<T1>[],
        number,
        boolean,
        number,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      bigint,
      string,
      _0x2.coin.Coin<T0>[],
      _0x2.coin.Coin<T1>[],
      number,
      boolean,
      number,
      boolean,
      bigint,
      bigint,
      bigint,
      bigint,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }

  export interface SetFeeProtocolPayload
    extends TypedFunctionPayload<[string, string, number, string]> {
    arguments_decoded: [string, string, number, string];
    type_arguments: [];
  }

  export interface SetFeeTierPayload<T0 = any>
    extends TypedFunctionPayload<[string, string, string, string]> {
    arguments_decoded: [string, string, string, string];
    type_arguments: [string];
  }

  export interface TogglePoolStatusPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<[string, string, string, string]> {
    arguments_decoded: [string, string, string, string];
    type_arguments: [string, string, string];
  }

  export interface UpdateNftDescriptionPayload
    extends TypedFunctionPayload<[string, string, string, string, string]> {
    arguments_decoded: [string, string, string, string, string];
    type_arguments: [];
  }

  export interface UpdateNftImgUrlPayload
    extends TypedFunctionPayload<[string, string, string, string, string]> {
    arguments_decoded: [string, string, string, string, string];
    type_arguments: [];
  }

  export interface UpdateNftNamePayload
    extends TypedFunctionPayload<[string, string, string, string, string]> {
    arguments_decoded: [string, string, string, string, string];
    type_arguments: [];
  }

  export interface UpdatePoolFeeProtocolPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<[string, string, number, string, string]> {
    arguments_decoded: [string, string, number, string, string];
    type_arguments: [string, string, string];
  }

  export interface UpgradePayload
    extends TypedFunctionPayload<[string, string]> {
    arguments_decoded: [string, string];
    type_arguments: [];
  }
}

export class pool_fetcher extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("pool_fetcher", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): pool_fetcher {
    return new pool_fetcher({ ...pool_fetcher.DEFAULT_OPTIONS, ...options });
  }

  onEntryComputeSwapResult(
    func: (
      call: pool_fetcher.ComputeSwapResultPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool_fetcher {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "pool_fetcher::compute_swap_result",
      },
      fetchConfig,
    );
    return this;
  }
}

export namespace pool_fetcher {
  export namespace builder {
    export function computeSwapResult<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::pool_fetcher::compute_swap_result",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function computeSwapResult<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, boolean, bigint, boolean, bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.ComputeSwapState]>> {
      const tx = new Transaction();
      builder.computeSwapResult(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.ComputeSwapState]
      >(inspectRes);
    }
  }

  export interface ComputeSwapResultPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [string, boolean, bigint, boolean, bigint, string, string, string]
    > {
    arguments_decoded: [
      string,
      boolean,
      bigint,
      boolean,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }
}

export class position_manager extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("position_manager", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): position_manager {
    return new position_manager({
      ...position_manager.DEFAULT_OPTIONS,
      ...options,
    });
  }

  onEntryBurn(
    func: (call: position_manager.BurnPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "position_manager::burn",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryCollect(
    func: (call: position_manager.CollectPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "position_manager::collect",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryCollectReward(
    func: (
      call: position_manager.CollectRewardPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "position_manager::collect_reward",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryDecreaseLiquidity(
    func: (
      call: position_manager.DecreaseLiquidityPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "position_manager::decrease_liquidity",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryIncreaseLiquidity(
    func: (
      call: position_manager.IncreaseLiquidityPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "position_manager::increase_liquidity",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryMint(
    func: (call: position_manager.MintPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "position_manager::mint",
      },
      fetchConfig,
    );
    return this;
  }

  onEventCollectEvent(
    func: (
      event: position_manager.CollectEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onMoveEvent(
      func,
      { type: "position_manager::CollectEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventCollectRewardEvent(
    func: (
      event: position_manager.CollectRewardEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onMoveEvent(
      func,
      { type: "position_manager::CollectRewardEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventDecreaseLiquidityEvent(
    func: (
      event: position_manager.DecreaseLiquidityEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onMoveEvent(
      func,
      { type: "position_manager::DecreaseLiquidityEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventIncreaseLiquidityEvent(
    func: (
      event: position_manager.IncreaseLiquidityEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_manager {
    this.onMoveEvent(
      func,
      { type: "position_manager::IncreaseLiquidityEvent" },
      fetchConfig,
    );
    return this;
  }
}

export namespace position_manager {
  export interface CollectEvent {
    pool: _0x2.object$.ID;
    amount_a: bigint;
    amount_b: bigint;
    recipient: string;
  }

  export namespace CollectEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::CollectEvent";

    const TYPE = new TypeDescriptor<CollectEvent>(CollectEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<CollectEvent> {
      return TYPE.apply();
    }
  }

  export type CollectEventInstance = TypedEventInstance<CollectEvent> & {
    data_decoded: CollectEvent;
    type_arguments: [];
  };

  export interface CollectRewardEvent {
    pool: _0x2.object$.ID;
    amount: bigint;
    vault: _0x2.object$.ID;
    reward_index: bigint;
    recipient: string;
  }

  export namespace CollectRewardEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::CollectRewardEvent";

    const TYPE = new TypeDescriptor<CollectRewardEvent>(
      CollectRewardEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CollectRewardEvent> {
      return TYPE.apply();
    }
  }

  export type CollectRewardEventInstance =
    TypedEventInstance<CollectRewardEvent> & {
      data_decoded: CollectRewardEvent;
      type_arguments: [];
    };

  export interface DecreaseLiquidityEvent {
    pool: _0x2.object$.ID;
    amount_a: bigint;
    amount_b: bigint;
    liquidity: bigint;
  }

  export namespace DecreaseLiquidityEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::DecreaseLiquidityEvent";

    const TYPE = new TypeDescriptor<DecreaseLiquidityEvent>(
      DecreaseLiquidityEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<DecreaseLiquidityEvent> {
      return TYPE.apply();
    }
  }

  export type DecreaseLiquidityEventInstance =
    TypedEventInstance<DecreaseLiquidityEvent> & {
      data_decoded: DecreaseLiquidityEvent;
      type_arguments: [];
    };

  export interface IncreaseLiquidityEvent {
    pool: _0x2.object$.ID;
    amount_a: bigint;
    amount_b: bigint;
    liquidity: bigint;
  }

  export namespace IncreaseLiquidityEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::IncreaseLiquidityEvent";

    const TYPE = new TypeDescriptor<IncreaseLiquidityEvent>(
      IncreaseLiquidityEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<IncreaseLiquidityEvent> {
      return TYPE.apply();
    }
  }

  export type IncreaseLiquidityEventInstance =
    TypedEventInstance<IncreaseLiquidityEvent> & {
      data_decoded: IncreaseLiquidityEvent;
      type_arguments: [];
    };

  export interface Position {
    id: _0x2.object$.UID;
    tick_lower_index: i32.I32;
    tick_upper_index: i32.I32;
    liquidity: bigint;
    fee_growth_inside_a: bigint;
    fee_growth_inside_b: bigint;
    tokens_owed_a: bigint;
    tokens_owed_b: bigint;
    reward_infos: position_manager.PositionRewardInfo[];
  }

  export namespace Position {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::Position";

    const TYPE = new TypeDescriptor<Position>(Position.TYPE_QNAME);

    export function type(): TypeDescriptor<Position> {
      return TYPE.apply();
    }
  }

  export interface PositionRewardInfo {
    reward_growth_inside: bigint;
    amount_owed: bigint;
  }

  export namespace PositionRewardInfo {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::PositionRewardInfo";

    const TYPE = new TypeDescriptor<PositionRewardInfo>(
      PositionRewardInfo.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<PositionRewardInfo> {
      return TYPE.apply();
    }
  }

  export interface Positions {
    id: _0x2.object$.UID;
    nft_minted: bigint;
    user_position: _0x2.table.Table<string, _0x2.object$.ID>;
    nft_name: string;
    nft_description: string;
    nft_img_url: string;
  }

  export namespace Positions {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::Positions";

    const TYPE = new TypeDescriptor<Positions>(Positions.TYPE_QNAME);

    export function type(): TypeDescriptor<Positions> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function burn<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        position_nft.TurbosPositionNFT | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::burn",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function collect<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureAddress(args[5], tx));
      _args.push(transactionArgumentOrPureU64(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::collect",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function collectReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::collect_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function decreaseLiquidity<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureU64(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::decrease_liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function increaseLiquidity<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureU64(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::increase_liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function mint<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        number | TransactionArgument,
        boolean | TransactionArgument,
        number | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureU32(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));
      _args.push(transactionArgumentOrPureU32(args[6], tx));
      _args.push(transactionArgumentOrPureBool(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrPureU64(args[10], tx));
      _args.push(transactionArgumentOrPureU64(args[11], tx));
      _args.push(transactionArgumentOrPureAddress(args[12], tx));
      _args.push(transactionArgumentOrPureU64(args[13], tx));
      _args.push(transactionArgumentOrObject(args[14], tx));
      _args.push(transactionArgumentOrObject(args[15], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::mint",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateNftDescription(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::update_nft_description",
        arguments: _args,
      });
    }
    export function updateNftImgUrl(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::update_nft_img_url",
        arguments: _args,
      });
    }
    export function updateNftName(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_manager::update_nft_name",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function burn<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, position_nft.TurbosPositionNFT, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.burn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collect<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collect(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function decreaseLiquidity<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.decreaseLiquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function increaseLiquidity<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string[],
        string[],
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.increaseLiquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function mint<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string[],
        string[],
        number,
        boolean,
        number,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.mint(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateNftDescription(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateNftDescription(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateNftImgUrl(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateNftImgUrl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateNftName(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateNftName(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }

  export interface BurnPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [string, position_nft.TurbosPositionNFT, string, string]
    > {
    arguments_decoded: [string, position_nft.TurbosPositionNFT, string, string];
    type_arguments: [string, string, string];
  }

  export interface CollectPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      string,
      bigint,
      bigint,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }

  export interface CollectRewardPayload<T0 = any, T1 = any, T2 = any, T3 = any>
    extends TypedFunctionPayload<
      [
        string,
        string,
        string,
        string,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      string,
      string,
      bigint,
      bigint,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string, string];
  }

  export interface DecreaseLiquidityPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [
        string,
        string,
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      string,
      bigint,
      bigint,
      bigint,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }

  export interface IncreaseLiquidityPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [
        string,
        string,
        _0x2.coin.Coin<T0>[],
        _0x2.coin.Coin<T1>[],
        string,
        bigint,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      _0x2.coin.Coin<T0>[],
      _0x2.coin.Coin<T1>[],
      string,
      bigint,
      bigint,
      bigint,
      bigint,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }

  export interface MintPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [
        string,
        string,
        _0x2.coin.Coin<T0>[],
        _0x2.coin.Coin<T1>[],
        number,
        boolean,
        number,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      _0x2.coin.Coin<T0>[],
      _0x2.coin.Coin<T1>[],
      number,
      boolean,
      number,
      boolean,
      bigint,
      bigint,
      bigint,
      bigint,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }
}

export class position_nft extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("position_nft", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): position_nft {
    return new position_nft({ ...position_nft.DEFAULT_OPTIONS, ...options });
  }

  onEventMintNFTEvent(
    func: (event: position_nft.MintNFTEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position_nft {
    this.onMoveEvent(func, { type: "position_nft::MintNFTEvent" }, fetchConfig);
    return this;
  }
}

export namespace position_nft {
  export interface MintNFTEvent {
    object_id: _0x2.object$.ID;
    creator: string;
    name: string;
  }

  export namespace MintNFTEvent {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_nft::MintNFTEvent";

    const TYPE = new TypeDescriptor<MintNFTEvent>(MintNFTEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<MintNFTEvent> {
      return TYPE.apply();
    }
  }

  export type MintNFTEventInstance = TypedEventInstance<MintNFTEvent> & {
    data_decoded: MintNFTEvent;
    type_arguments: [];
  };

  export interface POSITION_NFT {
    dummy_field: boolean;
  }

  export namespace POSITION_NFT {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_nft::POSITION_NFT";

    const TYPE = new TypeDescriptor<POSITION_NFT>(POSITION_NFT.TYPE_QNAME);

    export function type(): TypeDescriptor<POSITION_NFT> {
      return TYPE.apply();
    }
  }

  export interface TurbosPositionNFT {
    id: _0x2.object$.UID;
    name: string;
    description: string;
    img_url: _0x2.url.Url;
    pool_id: _0x2.object$.ID;
    position_id: _0x2.object$.ID;
    coin_type_a: _0x1.type_name.TypeName;
    coin_type_b: _0x1.type_name.TypeName;
    fee_type: _0x1.type_name.TypeName;
  }

  export namespace TurbosPositionNFT {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_nft::TurbosPositionNFT";

    const TYPE = new TypeDescriptor<TurbosPositionNFT>(
      TurbosPositionNFT.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<TurbosPositionNFT> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function burn(
      tx: Transaction,
      args: [position_nft.TurbosPositionNFT | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_nft::burn",
        arguments: _args,
      });
    }
    export function mint(
      tx: Transaction,
      args: [
        string | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        _0x1.type_name.TypeName | TransactionArgument,
        _0x1.type_name.TypeName | TransactionArgument,
        _0x1.type_name.TypeName | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_nft::mint",
        arguments: _args,
      });
    }
    export function poolId(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_nft::pool_id",
        arguments: _args,
      });
    }
    export function positionId(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::position_nft::position_id",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function burn(
      client: SuiClient,
      args: [position_nft.TurbosPositionNFT],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.burn(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function mint(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        _0x2.object$.ID,
        _0x2.object$.ID,
        _0x1.type_name.TypeName,
        _0x1.type_name.TypeName,
        _0x1.type_name.TypeName,
      ],
    ): Promise<TypedDevInspectResults<[position_nft.TurbosPositionNFT]>> {
      const tx = new Transaction();
      builder.mint(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [position_nft.TurbosPositionNFT]
      >(inspectRes);
    }
    export async function poolId(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.poolId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function positionId(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.positionId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
  }
}

export class reward_manager extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("reward_manager", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): reward_manager {
    return new reward_manager({
      ...reward_manager.DEFAULT_OPTIONS,
      ...options,
    });
  }

  onEntryAddReward(
    func: (call: reward_manager.AddRewardPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): reward_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "reward_manager::add_reward",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryInitReward(
    func: (call: reward_manager.InitRewardPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): reward_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "reward_manager::init_reward",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryRemoveReward(
    func: (call: reward_manager.RemoveRewardPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): reward_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "reward_manager::remove_reward",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpdateRewardEmissions(
    func: (
      call: reward_manager.UpdateRewardEmissionsPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): reward_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "reward_manager::update_reward_emissions",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpdateRewardManager(
    func: (
      call: reward_manager.UpdateRewardManagerPayload,
      ctx: SuiContext,
    ) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): reward_manager {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "reward_manager::update_reward_manager",
      },
      fetchConfig,
    );
    return this;
  }
}

export namespace reward_manager {
  export interface RewardManagerAdminCap {
    id: _0x2.object$.UID;
  }

  export namespace RewardManagerAdminCap {
    export const TYPE_QNAME =
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::reward_manager::RewardManagerAdminCap";

    const TYPE = new TypeDescriptor<RewardManagerAdminCap>(
      RewardManagerAdminCap.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RewardManagerAdminCap> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::reward_manager::add_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function initReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureAddress(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::reward_manager::init_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function removeReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureAddress(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::reward_manager::remove_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function updateRewardEmissions<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::reward_manager::update_reward_emissions",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateRewardManager<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureAddress(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::reward_manager::update_reward_manager",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [string, string, bigint, string[], bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function initReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [string, string, bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.initReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeReward<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [string, string, bigint, bigint, string, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateRewardEmissions<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint, bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateRewardEmissions(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateRewardManager<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, bigint, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateRewardManager(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }

  export interface AddRewardPayload<T0 = any, T1 = any, T2 = any, T3 = any>
    extends TypedFunctionPayload<
      [
        string,
        string,
        bigint,
        _0x2.coin.Coin<T3>[],
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      bigint,
      _0x2.coin.Coin<T3>[],
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string, string];
  }

  export interface InitRewardPayload<T0 = any, T1 = any, T2 = any, T3 = any>
    extends TypedFunctionPayload<
      [string, string, bigint, string, string, string]
    > {
    arguments_decoded: [string, string, bigint, string, string, string];
    type_arguments: [string, string, string, string];
  }

  export interface RemoveRewardPayload<T0 = any, T1 = any, T2 = any, T3 = any>
    extends TypedFunctionPayload<
      [string, string, bigint, bigint, string, string, string, string]
    > {
    arguments_decoded: [
      string,
      string,
      bigint,
      bigint,
      string,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string, string];
  }

  export interface UpdateRewardEmissionsPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [string, bigint, bigint, string, string, string]
    > {
    arguments_decoded: [string, bigint, bigint, string, string, string];
    type_arguments: [string, string, string];
  }

  export interface UpdateRewardManagerPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [string, string, bigint, string, string, string]
    > {
    arguments_decoded: [string, string, bigint, string, string, string];
    type_arguments: [string, string, string];
  }
}

export namespace string_tools {
  export namespace builder {
    export function addressToHexstring(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::string_tools::address_to_hexstring",
        arguments: _args,
      });
    }
    export function bytesToHexstring(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::string_tools::bytes_to_hexstring",
        arguments: _args,
      });
    }
    export function getPositionKey(
      tx: Transaction,
      args: [
        string | TransactionArgument,
        number | TransactionArgument,
        boolean | TransactionArgument,
        number | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureAddress(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));
      _args.push(transactionArgumentOrPureU32(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::string_tools::get_position_key",
        arguments: _args,
      });
    }
    export function u64ToHexstring(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::string_tools::u64_to_hexstring",
        arguments: _args,
      });
    }
    export function u64ToString(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::string_tools::u64_to_string",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addressToHexstring(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.addressToHexstring(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function bytesToHexstring(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.bytesToHexstring(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function getPositionKey(
      client: SuiClient,
      args: [string, number, boolean, number, boolean],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.getPositionKey(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function u64ToHexstring(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.u64ToHexstring(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function u64ToString(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.u64ToString(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export class swap_router extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("swap_router", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): swap_router {
    return new swap_router({ ...swap_router.DEFAULT_OPTIONS, ...options });
  }

  onEntrySwapAB(
    func: (call: swap_router.SwapABPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): swap_router {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "swap_router::swap_a_b",
      },
      fetchConfig,
    );
    return this;
  }

  onEntrySwapABBC(
    func: (call: swap_router.SwapABBCPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): swap_router {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "swap_router::swap_a_b_b_c",
      },
      fetchConfig,
    );
    return this;
  }

  onEntrySwapABCB(
    func: (call: swap_router.SwapABCBPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): swap_router {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "swap_router::swap_a_b_c_b",
      },
      fetchConfig,
    );
    return this;
  }

  onEntrySwapBA(
    func: (call: swap_router.SwapBAPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): swap_router {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "swap_router::swap_b_a",
      },
      fetchConfig,
    );
    return this;
  }

  onEntrySwapBABC(
    func: (call: swap_router.SwapBABCPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): swap_router {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "swap_router::swap_b_a_b_c",
      },
      fetchConfig,
    );
    return this;
  }

  onEntrySwapBACB(
    func: (call: swap_router.SwapBACBPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): swap_router {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "swap_router::swap_b_a_c_b",
      },
      fetchConfig,
    );
    return this;
  }
}

export namespace swap_router {
  export namespace builder {
    export function swapAB<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::swap_router::swap_a_b",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function swapABBC<T0 = any, T1 = any, T2 = any, T3 = any, T4 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrPureBool(args[7], tx));
      _args.push(transactionArgumentOrPureAddress(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::swap_router::swap_a_b_b_c",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function swapABCB<T0 = any, T1 = any, T2 = any, T3 = any, T4 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrPureBool(args[7], tx));
      _args.push(transactionArgumentOrPureAddress(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::swap_router::swap_a_b_c_b",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function swapBA<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::swap_router::swap_b_a",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function swapBABC<T0 = any, T1 = any, T2 = any, T3 = any, T4 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrPureBool(args[7], tx));
      _args.push(transactionArgumentOrPureAddress(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::swap_router::swap_b_a_b_c",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function swapBACB<T0 = any, T1 = any, T2 = any, T3 = any, T4 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrPureBool(args[7], tx));
      _args.push(transactionArgumentOrPureAddress(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1::swap_router::swap_b_a_c_b",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function swapAB<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string[],
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapAB(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapABBC<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapABBC(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapABCB<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapABCB(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapBA<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string[],
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapBA(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapBABC<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapBABC(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function swapBACB<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapBACB(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }

  export interface SwapABPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [
        string,
        _0x2.coin.Coin<T0>[],
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      _0x2.coin.Coin<T0>[],
      bigint,
      bigint,
      bigint,
      boolean,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }

  export interface SwapABBCPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
  > extends TypedFunctionPayload<
      [
        string,
        string,
        _0x2.coin.Coin<T0>[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      _0x2.coin.Coin<T0>[],
      bigint,
      bigint,
      bigint,
      bigint,
      boolean,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string, string, string];
  }

  export interface SwapABCBPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
  > extends TypedFunctionPayload<
      [
        string,
        string,
        _0x2.coin.Coin<T0>[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      _0x2.coin.Coin<T0>[],
      bigint,
      bigint,
      bigint,
      bigint,
      boolean,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string, string, string];
  }

  export interface SwapBAPayload<T0 = any, T1 = any, T2 = any>
    extends TypedFunctionPayload<
      [
        string,
        _0x2.coin.Coin<T1>[],
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      _0x2.coin.Coin<T1>[],
      bigint,
      bigint,
      bigint,
      boolean,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string];
  }

  export interface SwapBABCPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
  > extends TypedFunctionPayload<
      [
        string,
        string,
        _0x2.coin.Coin<T0>[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      _0x2.coin.Coin<T0>[],
      bigint,
      bigint,
      bigint,
      bigint,
      boolean,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string, string, string];
  }

  export interface SwapBACBPayload<
    T0 = any,
    T1 = any,
    T2 = any,
    T3 = any,
    T4 = any,
  > extends TypedFunctionPayload<
      [
        string,
        string,
        _0x2.coin.Coin<T0>[],
        bigint,
        bigint,
        bigint,
        bigint,
        boolean,
        string,
        bigint,
        string,
        string,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      _0x2.coin.Coin<T0>[],
      bigint,
      bigint,
      bigint,
      bigint,
      boolean,
      string,
      bigint,
      string,
      string,
      string,
    ];
    type_arguments: [string, string, string, string, string];
  }
}

const MODULES = JSON.parse(
  '{"fee":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"fee","friends":[],"structs":{"Fee":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"fee","type":"U32"},{"name":"tick_spacing","type":"U32"}]}},"exposedFunctions":{"create_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U32","U32",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"fee","name":"Fee","typeArguments":[{"TypeParameter":0}]}}]},"get_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"fee","name":"Fee","typeArguments":[{"TypeParameter":0}]}}}],"return":["U32"]},"get_tick_spacing":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"fee","name":"Fee","typeArguments":[{"TypeParameter":0}]}}}],"return":["U32"]}}},"fee10000bps":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"fee10000bps","friends":[],"structs":{"FEE10000BPS":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"fee100bps":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"fee100bps","friends":[],"structs":{"FEE100BPS":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"fee3000bps":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"fee3000bps","friends":[],"structs":{"FEE3000BPS":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"fee500bps":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"fee500bps","friends":[],"structs":{"FEE500BPS":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{}},"full_math_u128":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"full_math_u128","friends":[],"structs":{},"exposedFunctions":{"full_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U256"]},"mul_div_ceil":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"mul_div_floor":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"mul_div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"mul_shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U8"],"return":["U128"]},"mul_shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U8"],"return":["U128"]}}},"full_math_u32":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"full_math_u32","friends":[],"structs":{},"exposedFunctions":{"full_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32","U32"],"return":["U64"]},"mul_div_ceil":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32","U32","U32"],"return":["U32"]},"mul_div_floor":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32","U32","U32"],"return":["U32"]},"mul_div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32","U32","U32"],"return":["U32"]},"mul_shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32","U32","U8"],"return":["U32"]},"mul_shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32","U32","U8"],"return":["U32"]}}},"full_math_u64":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"full_math_u64","friends":[],"structs":{},"exposedFunctions":{"full_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U128"]},"mul_div_ceil":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64"]},"mul_div_floor":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64"]},"mul_div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64"]},"mul_shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U8"],"return":["U64"]},"mul_shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U8"],"return":["U64"]}}},"i128":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"i128","friends":[],"structs":{"I128":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bits","type":"U128"}]}},"exposedFunctions":{"abs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"abs_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["U128"]},"add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"and":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"as_i32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"as_i64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"as_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["U128"]},"cmp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["U8"]},"div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"eq":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"gt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"gte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"is_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"lt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"lte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"neg_from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"or":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"overflowing_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},"Bool"]},"overflowing_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},"Bool"]},"shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"sign":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["U8"]},"sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]}}},"i32":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"i32","friends":[],"structs":{"I32":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bits","type":"U32"}]}},"exposedFunctions":{"abs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"abs_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["U32"]},"add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"and":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"as_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["U32"]},"cmp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["U8"]},"div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"eq":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"from_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"from_u32_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32","Bool"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"gt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"gte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"is_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"lt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"lte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"mod":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"mod_euclidean":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U32"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"neg_from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"or":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"sign":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["U8"]},"sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]}}},"i64":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"i64","friends":[],"structs":{"I64":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bits","type":"U64"}]}},"exposedFunctions":{"abs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"abs_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["U64"]},"add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"and":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"as_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["U64"]},"cmp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["U8"]},"div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"eq":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"from_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"gt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"gte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"is_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"lt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"lte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"mod":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"neg_from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"or":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"sign":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":["U8"]},"sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i64","name":"I64","typeArguments":[]}}]}}},"math_bit":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_bit","friends":[],"structs":{},"exposedFunctions":{"least_significant_bit":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U8"]},"most_significant_bit":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U8"]}}},"math_liquidity":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_liquidity","friends":[],"structs":{},"exposedFunctions":{"add_delta":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":["U128"]},"get_amount_a_for_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"get_amount_b_for_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"get_amount_for_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","U128"],"return":["U128","U128"]},"get_liquidity_for_amount_a":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"get_liquidity_for_amount_b":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"get_liquidity_for_amounts":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","U128","U128"],"return":["U128"]}}},"math_sqrt_price":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_sqrt_price","friends":[],"structs":{},"exposedFunctions":{"get_amount_a_delta":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"get_amount_a_delta_":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool"],"return":["U128"]},"get_amount_b_delta":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}]},"get_amount_b_delta_":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool"],"return":["U128"]},"get_next_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool","Bool"],"return":["U128"]},"mul_div_round_fixed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256","U256","U256"],"return":["U128"]}}},"math_swap":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_swap","friends":[],"structs":{},"exposedFunctions":{"compute_swap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","U128","Bool","U32"],"return":["U128","U128","U128","U128"]},"get_amount_fixed_delta":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool","Bool"],"return":["U128"]},"get_amount_unfixed_delta":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool","Bool"],"return":["U128"]}}},"math_tick":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_tick","friends":[],"structs":{},"exposedFunctions":{"get_max_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"get_min_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]},"get_sqrt_price_negative_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["U128"]},"get_sqrt_price_positive_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["U128"]},"max_liquidity_per_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":["U128"]},"sqrt_price_from_tick_index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":["U128"]},"tick_index_from_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}]}}},"math_u128":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_u128","friends":[],"structs":{},"exposedFunctions":{"checked_div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","Bool"],"return":["U128"]},"from_lo_hi":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U128"]},"full_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","U128"]},"hi":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U64"]},"hi_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U128"]},"leading_zeros":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U8"]},"lo":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U64"]},"lo_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U128"]},"max":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"min":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"overflowing_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","Bool"]},"overflowing_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","Bool"]},"overflowing_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","Bool"]},"pow":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U8"],"return":["U128"]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"wrapping_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]}}},"math_u256":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_u256","friends":[],"structs":{},"exposedFunctions":{"checked_shlw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U256","Bool"]},"div_mod":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256","U256"],"return":["U256","U256"]},"div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256","U256","Bool"],"return":["U256"]},"shlw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U256"]},"shrw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U256"]}}},"math_u64":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"math_u64","friends":[],"structs":{},"exposedFunctions":{"carry_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64","U64"]},"overflowing_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64","Bool"]},"overflowing_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64","Bool"]},"overflowing_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64","Bool"]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"wrapping_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]}}},"pool":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"pool","friends":[{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"pool_factory"},{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"pool_fetcher"},{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"position_manager"},{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"reward_manager"},{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"swap_router"}],"structs":{"AddRewardEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"reward_index","type":"U64"},{"name":"reward_vault","type":"Address"},{"name":"reward_manager","type":"Address"},{"name":"amount","type":"U64"}]},"BurnEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"owner","type":"Address"},{"name":"tick_lower_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"},{"name":"liquidity_delta","type":"U128"}]},"CollectEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"recipient","type":"Address"},{"name":"tick_lower_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"}]},"CollectProtocolFeeEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"recipient","type":"Address"},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"}]},"CollectRewardEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"recipient","type":"Address"},{"name":"tick_lower_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"amount","type":"U64"},{"name":"vault","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"reward_index","type":"U64"}]},"ComputeSwapState":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"amount_a","type":"U128"},{"name":"amount_b","type":"U128"},{"name":"amount_specified_remaining","type":"U128"},{"name":"amount_calculated","type":"U128"},{"name":"sqrt_price","type":"U128"},{"name":"tick_current_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"fee_growth_global","type":"U128"},{"name":"protocol_fee","type":"U128"},{"name":"liquidity","type":"U128"},{"name":"fee_amount","type":"U128"}]},"InitRewardEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"reward_index","type":"U64"},{"name":"reward_vault","type":"Address"},{"name":"reward_manager","type":"Address"}]},"MintEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"owner","type":"Address"},{"name":"tick_lower_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"},{"name":"liquidity_delta","type":"U128"}]},"Pool":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"coin_a","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"coin_b","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}}},{"name":"protocol_fees_a","type":"U64"},{"name":"protocol_fees_b","type":"U64"},{"name":"sqrt_price","type":"U128"},{"name":"tick_current_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_spacing","type":"U32"},{"name":"max_liquidity_per_tick","type":"U128"},{"name":"fee","type":"U32"},{"name":"fee_protocol","type":"U32"},{"name":"unlocked","type":"Bool"},{"name":"fee_growth_global_a","type":"U128"},{"name":"fee_growth_global_b","type":"U128"},{"name":"liquidity","type":"U128"},{"name":"tick_map","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U256"]}}},{"name":"deploy_time_ms","type":"U64"},{"name":"reward_infos","type":{"Vector":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardInfo","typeArguments":[]}}}},{"name":"reward_last_updated_time_ms","type":"U64"}]},"PoolRewardInfo":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"vault","type":"Address"},{"name":"vault_coin_type","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"emissions_per_second","type":"U128"},{"name":"growth_global","type":"U128"},{"name":"manager","type":"Address"}]},"PoolRewardVault":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"coin","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}}]},"Position":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"liquidity","type":"U128"},{"name":"fee_growth_inside_a","type":"U128"},{"name":"fee_growth_inside_b","type":"U128"},{"name":"tokens_owed_a","type":"U64"},{"name":"tokens_owed_b","type":"U64"},{"name":"reward_infos","type":{"Vector":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PositionRewardInfo","typeArguments":[]}}}}]},"PositionRewardInfo":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"reward_growth_inside","type":"U128"},{"name":"amount_owed","type":"U64"}]},"RemoveRewardEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"reward_index","type":"U64"},{"name":"reward_vault","type":"Address"},{"name":"reward_manager","type":"Address"},{"name":"amount","type":"U64"},{"name":"recipient","type":"Address"}]},"SwapEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"recipient","type":"Address"},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"},{"name":"liquidity","type":"U128"},{"name":"tick_current_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_pre_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"sqrt_price","type":"U128"},{"name":"protocol_fee","type":"U64"},{"name":"fee_amount","type":"U64"},{"name":"a_to_b","type":"Bool"},{"name":"is_exact_in","type":"Bool"}]},"Tick":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"liquidity_gross","type":"U128"},{"name":"liquidity_net","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i128","name":"I128","typeArguments":[]}}},{"name":"fee_growth_outside_a","type":"U128"},{"name":"fee_growth_outside_b","type":"U128"},{"name":"reward_growths_outside","type":{"Vector":"U128"}},{"name":"initialized","type":"Bool"}]},"TogglePoolStatusEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"status","type":"Bool"}]},"UpdatePoolFeeProtocolEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"fee_protocol","type":"U32"}]},"UpdateRewardEmissionsEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"reward_index","type":"U64"},{"name":"reward_vault","type":"Address"},{"name":"reward_manager","type":"Address"},{"name":"reward_emissions_per_second","type":"U128"}]},"UpdateRewardManagerEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"reward_index","type":"U64"},{"name":"reward_manager","type":"Address"}]},"UpgradeEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"old_version","type":"U64"},{"name":"new_version","type":"U64"}]},"Versioned":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"version","type":"U64"}]}},"exposedFunctions":{"add_reward":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardVault","typeArguments":[{"TypeParameter":3}]}}},"U64",{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"burn":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"Address",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64","U64"]},"check_version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}}],"return":[]},"collect":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"Address",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64","U64"]},"collect_protocol_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_reward":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardVault","typeArguments":[{"TypeParameter":3}]}}},"Address",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64"]},"compute_swap_result":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"Address","Bool","U128","Bool","U128","Bool",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"ComputeSwapState","typeArguments":[]}}]},"deploy_pool":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":["U32","U32","U128","U32",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}]},"get_pool_balance":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}}],"return":["U64","U64"]},"get_pool_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}}],"return":["U32"]},"get_pool_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}}],"return":["U128"]},"get_position":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"Address",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Position","typeArguments":[]}}}]},"get_position_base_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":["U128","U128","U128","U64","U64",{"Reference":{"Vector":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PositionRewardInfo","typeArguments":[]}}}}]},"get_position_fee_growth_inside_a":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":["U128"]},"get_position_fee_growth_inside_b":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":["U128"]},"get_position_key":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"get_position_reward_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PositionRewardInfo","typeArguments":[]}}}],"return":["U128","U64"]},"get_position_reward_infos":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[{"Reference":{"Vector":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PositionRewardInfo","typeArguments":[]}}}}]},"get_tick":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Tick","typeArguments":[]}}}]},"init_reward":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardVault","typeArguments":[{"TypeParameter":3}]}}]},"merge_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"mint":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"Address",{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U64","U64"]},"position_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}},"U8"]},"remove_reward":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardVault","typeArguments":[{"TypeParameter":3}]}}},"U64","U64","Address",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"split_and_transfer":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},"U64",{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"Address","Bool","U128","Bool","U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":["U128","U128"]},"swap_coin_a_b":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},"U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_coin_a_b_b_c":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":2},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":4},{"TypeParameter":3}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},"U64","U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_coin_a_b_c_b":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":2},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":4},{"TypeParameter":2},{"TypeParameter":3}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},"U64","U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_coin_b_a":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},"U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_coin_b_a_b_c":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":4},{"TypeParameter":3}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},"U64","U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_coin_b_a_c_b":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":4},{"TypeParameter":2},{"TypeParameter":3}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},"U64","U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"toggle_pool_status":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"transfer_in":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}],"return":[]},"transfer_out":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_pool_fee_protocol":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U32"],"return":[]},"update_reward_emissions":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_reward_manager":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"upgrade":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}}],"return":[]},"version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}}],"return":["U64"]}}},"pool_factory":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"pool_factory","friends":[],"structs":{"FeeAmountEnabledEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"fee","type":"U32"},{"name":"tick_spacing","type":"U32"}]},"PoolConfig":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"fee_map","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}},{"name":"fee_protocol","type":"U32"},{"name":"pools","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolSimpleInfo","typeArguments":[]}}]}}}]},"PoolCreatedEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"account","type":"Address"},{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"fee","type":"U32"},{"name":"tick_spacing","type":"U32"},{"name":"fee_protocol","type":"U32"},{"name":"sqrt_price","type":"U128"}]},"PoolFactoryAdminCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"PoolSimpleInfo":{"abilities":{"abilities":["Copy","Store"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"pool_key","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"coin_type_a","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"coin_type_b","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"fee_type","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"fee","type":"U32"},{"name":"tick_spacing","type":"U32"}]},"SetFeeProtocolEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"fee_protocol","type":"U32"}]}},"exposedFunctions":{"collect_protocol_fee":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","U64","Address",{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deploy_pool":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolConfig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"fee","name":"Fee","typeArguments":[{"TypeParameter":2}]}}},"U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"deploy_pool_and_mint":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolConfig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"fee","name":"Fee","typeArguments":[{"TypeParameter":2}]}}},"U128",{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},"U32","Bool","U32","Bool","U64","U64","U64","U64","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"set_fee_protocol":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolConfig","typeArguments":[]}}},"U32",{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}}],"return":[]},"set_fee_tier":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolConfig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"fee","name":"Fee","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}}],"return":[]},"toggle_pool_status":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_nft_description":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_nft_img_url":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_nft_name":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_pool_fee_protocol":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U32",{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"upgrade":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool_factory","name":"PoolFactoryAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}}],"return":[]}}},"pool_fetcher":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"pool_fetcher","friends":[],"structs":{},"exposedFunctions":{"compute_swap_result":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"Bool","U128","Bool","U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"ComputeSwapState","typeArguments":[]}}]}}},"position_manager":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"position_manager","friends":[{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"pool_factory"}],"structs":{"CollectEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"},{"name":"recipient","type":"Address"}]},"CollectRewardEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount","type":"U64"},{"name":"vault","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"reward_index","type":"U64"},{"name":"recipient","type":"Address"}]},"DecreaseLiquidityEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"},{"name":"liquidity","type":"U128"}]},"IncreaseLiquidityEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"},{"name":"liquidity","type":"U128"}]},"Position":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"tick_lower_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper_index","type":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"i32","name":"I32","typeArguments":[]}}},{"name":"liquidity","type":"U128"},{"name":"fee_growth_inside_a","type":"U128"},{"name":"fee_growth_inside_b","type":"U128"},{"name":"tokens_owed_a","type":"U64"},{"name":"tokens_owed_b","type":"U64"},{"name":"reward_infos","type":{"Vector":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"PositionRewardInfo","typeArguments":[]}}}}]},"PositionRewardInfo":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"reward_growth_inside","type":"U128"},{"name":"amount_owed","type":"U64"}]},"Positions":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"nft_minted","type":"U64"},{"name":"user_position","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":["Address",{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}},{"name":"nft_name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"nft_description","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"nft_img_url","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]}},"exposedFunctions":{"burn":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}},"U64","U64","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_reward":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardVault","typeArguments":[{"TypeParameter":3}]}}},"U64","U64","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"decrease_liquidity":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}},"U128","U64","U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"increase_liquidity":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}},"U64","U64","U64","U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"mint":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},"U32","Bool","U32","Bool","U64","U64","U64","U64","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_nft_description":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"update_nft_img_url":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]},"update_nft_name":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_manager","name":"Positions","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}],"return":[]}}},"position_nft":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"position_nft","friends":[{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"position_manager"}],"structs":{"MintNFTEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"object_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"creator","type":"Address"},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"POSITION_NFT":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"TurbosPositionNFT":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"description","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"img_url","type":{"Struct":{"address":"0x2","module":"url","name":"Url","typeArguments":[]}}},{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"position_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"coin_type_a","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"coin_type_b","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"fee_type","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]}},"exposedFunctions":{"burn":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}],"return":[]},"mint":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}]},"pool_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"position_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"position_nft","name":"TurbosPositionNFT","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}},"reward_manager":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"reward_manager","friends":[],"structs":{"RewardManagerAdminCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]}},"exposedFunctions":{"add_reward":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardVault","typeArguments":[{"TypeParameter":3}]}}},"U64",{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"init_reward":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"reward_manager","name":"RewardManagerAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","Address",{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"remove_reward":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"PoolRewardVault","typeArguments":[{"TypeParameter":3}]}}},"U64","U64","Address",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_reward_emissions":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_reward_manager":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"reward_manager","name":"RewardManagerAdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},"U64","Address",{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"string_tools":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"string_tools","friends":[],"structs":{},"exposedFunctions":{"address_to_hexstring":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":"Address"}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"bytes_to_hexstring":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Vector":"U8"}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"get_position_key":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["Address","U32","Bool","U32","Bool"],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"u64_to_hexstring":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"u64_to_string":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},"swap_router":{"fileFormatVersion":6,"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","name":"swap_router","friends":[],"structs":{},"exposedFunctions":{"swap_a_b":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U128","Bool","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_a_b_b_c":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":2},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":4},{"TypeParameter":3}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U128","U128","Bool","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_a_b_c_b":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":2},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":4},{"TypeParameter":2},{"TypeParameter":3}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U128","U128","Bool","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_b_a":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1},{"TypeParameter":2}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},"U64","U64","U128","Bool","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_b_a_b_c":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":4},{"TypeParameter":3}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U128","U128","Bool","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"swap_b_a_c_b":{"visibility":"Public","isEntry":true,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":2},{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":4},{"TypeParameter":2},{"TypeParameter":3}]}}},{"Vector":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U128","U128","Bool","Address","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1","module":"pool","name":"Versioned","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x91bfbc386a41afcfd9b2533058d7e915a1d3829089cc268ff4333d54d6339ca1",
    );
  }
}

loadAllTypes(defaultMoveCoder(SuiNetwork.MAIN_NET));
