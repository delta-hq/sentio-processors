
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { String, Int, BigInt, Float, ID, Bytes, Timestamp, Boolean } from '@sentio/sdk/store'
import { Entity, Required, One, Many, Column, ListColumn, AbstractEntity } from '@sentio/sdk/store'
import { BigDecimal } from '@sentio/bigdecimal'
import { DatabaseSchema } from '@sentio/sdk'

export enum PositionSide {
  SUPPLY = "SUPPLY", BORROW = "BORROW"
}




@Entity("Account")
export class Account extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("String")
	account: String

	@Required
	@One("Pool")
	pool: Promise<Pool>

	poolID: ID

	@Required
	@Column("BigInt")
	cTokenBalance: BigInt

	@Required
	@Column("BigInt")
	borrowsNew: BigInt

	@Required
	@Column("BigInt")
	lastAccountBorrowIndex: BigInt
  constructor(data: Partial<Account>) {super()}
}

@Entity("Pool")
export class Pool extends AbstractEntity  {

	@Required
	@Column("ID")
	id: ID

	@Required
	@Column("BigInt")
	borrowIndex: BigInt

	@Required
	@Column("Int")
	chainId: Int

	@Required
	@Column("BigInt")
	creationBlockNumber: BigInt

	@Required
	@Column("BigInt")
	creationTimestamp: BigInt

	@Required
	@Column("String")
	underlyingTokenAddress: String

	@Required
	@Column("String")
	underlyingTokenSymbol: String

	@Required
	@Column("Int")
	underlyingTokenDecimals: Int

	@Required
	@Column("String")
	receiptTokenAddress: String

	@Required
	@Column("String")
	receiptTokenSymbol: String

	@Required
	@Column("Int")
	receiptTokenDecimals: Int

	@Required
	@Column("String")
	poolType: String
  constructor(data: Partial<Pool>) {super()}
}


const source = `enum PositionSide {
    SUPPLY
    BORROW
}

type Account @entity {
    "{user_address}-{pool_address}"
    id: ID!
    "{user_address}"
    account: String!
    "{pool_address}"
    pool: Pool!
    "cTokenAmount"
    cTokenBalance: BigInt!
    "Latest borrow from borrow and repay"
    borrowsNew: BigInt!
    "Last borrow update borrow index"
    lastAccountBorrowIndex: BigInt!
}

type Pool @entity {
    "{pool_address}"
    id: ID!
    "Borrow index, from AccrueInterest()"
    borrowIndex: BigInt!
    "Chain ID"
    chainId: Int!
    "Creation block number"
    creationBlockNumber: BigInt!
    "Creation timestamp"
    creationTimestamp: BigInt!
    "Underlying token address"
    underlyingTokenAddress: String!
    "Underlying token symbol"
    underlyingTokenSymbol: String!
    "Underlying token decimals"
    underlyingTokenDecimals: Int!
    "Receipt token address (cToken)"
    receiptTokenAddress: String!
    "Receipt token symbol"
    receiptTokenSymbol: String!
    "Receipt token decimals"
    receiptTokenDecimals: Int!
    "Pool type"
    poolType: String!
}`
DatabaseSchema.register({
  source,
  entities: {
    "Account": Account,
		"Pool": Pool
  }
})
