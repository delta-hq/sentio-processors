/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57, original address 0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@sentio/sdk/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import { CallFilter, MoveFetchConfig } from "@sentio/sdk/move";
import {
  SuiBindOptions,
  SuiBaseProcessor,
  SuiNetwork,
  TypedFunctionPayload,
  SuiContext,
} from "@sentio/sdk/sui";

export namespace full_math_u128 {
  export namespace builder {
    export function fullMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u128::full_mul",
        arguments: _args,
      });
    }
    export function mulDivCeil(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u128::mul_div_ceil",
        arguments: _args,
      });
    }
    export function mulDivFloor(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u128::mul_div_floor",
        arguments: _args,
      });
    }
    export function mulDivRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u128::mul_div_round",
        arguments: _args,
      });
    }
    export function mulShl(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u128::mul_shl",
        arguments: _args,
      });
    }
    export function mulShr(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u128::mul_shr",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function fullMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.fullMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivCeil(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivCeil(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivFloor(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivFloor(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivRound(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShl(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShr(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace full_math_u64 {
  export namespace builder {
    export function fullMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u64::full_mul",
        arguments: _args,
      });
    }
    export function mulDivCeil(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u64::mul_div_ceil",
        arguments: _args,
      });
    }
    export function mulDivFloor(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u64::mul_div_floor",
        arguments: _args,
      });
    }
    export function mulDivRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u64::mul_div_round",
        arguments: _args,
      });
    }
    export function mulShl(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u64::mul_shl",
        arguments: _args,
      });
    }
    export function mulShr(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::full_math_u64::mul_shr",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function fullMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.fullMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivCeil(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivCeil(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivFloor(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivFloor(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulDivRound(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulDivRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShl(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function mulShr(
      client: SuiClient,
      args: [bigint, bigint, number],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.mulShr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export class i128 extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("i128", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): i128 {
    return new i128({ ...i128.DEFAULT_OPTIONS, ...options });
  }

  onEventI128(
    func: (event: i128.I128Instance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): i128 {
    this.onMoveEvent(func, { type: "i128::I128" }, fetchConfig);
    return this;
  }
}

export namespace i128 {
  export interface I128 {
    bits: bigint;
  }

  export namespace I128 {
    export const TYPE_QNAME =
      "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::I128";

    const TYPE = new TypeDescriptor<I128>(I128.TYPE_QNAME);

    export function type(): TypeDescriptor<I128> {
      return TYPE.apply();
    }
  }

  export interface I128Instance extends TypedEventInstance<I128> {
    data_decoded: I128;
    type_arguments: [];
  }

  export namespace builder {
    export function abs(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::abs",
        arguments: _args,
      });
    }
    export function absU128(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::abs_u128",
        arguments: _args,
      });
    }
    export function add(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::add",
        arguments: _args,
      });
    }
    export function and(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::and",
        arguments: _args,
      });
    }
    export function asI32(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::as_i32",
        arguments: _args,
      });
    }
    export function asI64(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::as_i64",
        arguments: _args,
      });
    }
    export function asU128(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::as_u128",
        arguments: _args,
      });
    }
    export function cmp(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::cmp",
        arguments: _args,
      });
    }
    export function div(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::div",
        arguments: _args,
      });
    }
    export function eq(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::eq",
        arguments: _args,
      });
    }
    export function from$(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::from",
        arguments: _args,
      });
    }
    export function gt(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::gt",
        arguments: _args,
      });
    }
    export function gte(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::gte",
        arguments: _args,
      });
    }
    export function isNeg(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::is_neg",
        arguments: _args,
      });
    }
    export function lt(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::lt",
        arguments: _args,
      });
    }
    export function lte(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::lte",
        arguments: _args,
      });
    }
    export function mul(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::mul",
        arguments: _args,
      });
    }
    export function neg(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::neg",
        arguments: _args,
      });
    }
    export function negFrom(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::neg_from",
        arguments: _args,
      });
    }
    export function or(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::or",
        arguments: _args,
      });
    }
    export function overflowingAdd(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::overflowing_add",
        arguments: _args,
      });
    }
    export function overflowingSub(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::overflowing_sub",
        arguments: _args,
      });
    }
    export function shl(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::shl",
        arguments: _args,
      });
    }
    export function shr(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::shr",
        arguments: _args,
      });
    }
    export function sign(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::sign",
        arguments: _args,
      });
    }
    export function sub(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [i128.I128 | TransactionArgument, i128.I128 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::wrapping_sub",
        arguments: _args,
      });
    }
    export function zero(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i128::zero",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function abs(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.abs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function absU128(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.absU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function add(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function and(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.and(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function asI32(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.asI32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function asI64(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.asI64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function asU128(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.asU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function cmp(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.cmp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function div(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.div(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function eq(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.eq(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function from$(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.from$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function gt(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function gte(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isNeg(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isNeg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lt(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lte(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function mul(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.mul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function neg(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.neg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function negFrom(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.negFrom(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function or(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.or(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function overflowingAdd(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128, boolean]>> {
      const tx = new Transaction();
      builder.overflowingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [i128.I128, boolean]
      >(inspectRes);
    }
    export async function overflowingSub(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128, boolean]>> {
      const tx = new Transaction();
      builder.overflowingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [i128.I128, boolean]
      >(inspectRes);
    }
    export async function shl(
      client: SuiClient,
      args: [i128.I128, number],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.shl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function shr(
      client: SuiClient,
      args: [i128.I128, number],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.shr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function sign(
      client: SuiClient,
      args: [i128.I128],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.sign(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function sub(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.sub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [i128.I128, i128.I128],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
    export async function zero(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[i128.I128]>> {
      const tx = new Transaction();
      builder.zero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i128.I128]>(
        inspectRes,
      );
    }
  }
}

export class i32 extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("i32", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): i32 {
    return new i32({ ...i32.DEFAULT_OPTIONS, ...options });
  }

  onEventI32(
    func: (event: i32.I32Instance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): i32 {
    this.onMoveEvent(func, { type: "i32::I32" }, fetchConfig);
    return this;
  }
}

export namespace i32 {
  export interface I32 {
    bits: number;
  }

  export namespace I32 {
    export const TYPE_QNAME =
      "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::I32";

    const TYPE = new TypeDescriptor<I32>(I32.TYPE_QNAME);

    export function type(): TypeDescriptor<I32> {
      return TYPE.apply();
    }
  }

  export interface I32Instance extends TypedEventInstance<I32> {
    data_decoded: I32;
    type_arguments: [];
  }

  export namespace builder {
    export function abs(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::abs",
        arguments: _args,
      });
    }
    export function absU32(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::abs_u32",
        arguments: _args,
      });
    }
    export function add(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::add",
        arguments: _args,
      });
    }
    export function and(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::and",
        arguments: _args,
      });
    }
    export function asU32(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::as_u32",
        arguments: _args,
      });
    }
    export function cmp(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::cmp",
        arguments: _args,
      });
    }
    export function div(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::div",
        arguments: _args,
      });
    }
    export function eq(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::eq",
        arguments: _args,
      });
    }
    export function from$(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::from",
        arguments: _args,
      });
    }
    export function fromU32(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::from_u32",
        arguments: _args,
      });
    }
    export function gt(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::gt",
        arguments: _args,
      });
    }
    export function gte(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::gte",
        arguments: _args,
      });
    }
    export function isNeg(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::is_neg",
        arguments: _args,
      });
    }
    export function lt(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::lt",
        arguments: _args,
      });
    }
    export function lte(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::lte",
        arguments: _args,
      });
    }
    export function mod(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::mod",
        arguments: _args,
      });
    }
    export function mul(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::mul",
        arguments: _args,
      });
    }
    export function negFrom(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::neg_from",
        arguments: _args,
      });
    }
    export function or(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::or",
        arguments: _args,
      });
    }
    export function shl(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::shl",
        arguments: _args,
      });
    }
    export function shr(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::shr",
        arguments: _args,
      });
    }
    export function sign(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::sign",
        arguments: _args,
      });
    }
    export function sub(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [i32.I32 | TransactionArgument, i32.I32 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::wrapping_sub",
        arguments: _args,
      });
    }
    export function zero(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i32::zero",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function abs(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.abs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function absU32(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.absU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function add(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function and(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.and(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function asU32(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.asU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function cmp(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.cmp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function div(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.div(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function eq(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.eq(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function from$(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.from$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function fromU32(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.fromU32(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function gt(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function gte(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isNeg(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isNeg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lt(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lte(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function mod(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.mod(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function mul(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.mul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function negFrom(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.negFrom(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function or(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.or(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function shl(
      client: SuiClient,
      args: [i32.I32, number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.shl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function shr(
      client: SuiClient,
      args: [i32.I32, number],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.shr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function sign(
      client: SuiClient,
      args: [i32.I32],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.sign(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function sub(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.sub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [i32.I32, i32.I32],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
    export async function zero(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[i32.I32]>> {
      const tx = new Transaction();
      builder.zero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i32.I32]>(
        inspectRes,
      );
    }
  }
}

export class i64 extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("i64", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): i64 {
    return new i64({ ...i64.DEFAULT_OPTIONS, ...options });
  }

  onEventI64(
    func: (event: i64.I64Instance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): i64 {
    this.onMoveEvent(func, { type: "i64::I64" }, fetchConfig);
    return this;
  }
}

export namespace i64 {
  export interface I64 {
    bits: bigint;
  }

  export namespace I64 {
    export const TYPE_QNAME =
      "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::I64";

    const TYPE = new TypeDescriptor<I64>(I64.TYPE_QNAME);

    export function type(): TypeDescriptor<I64> {
      return TYPE.apply();
    }
  }

  export interface I64Instance extends TypedEventInstance<I64> {
    data_decoded: I64;
    type_arguments: [];
  }

  export namespace builder {
    export function abs(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::abs",
        arguments: _args,
      });
    }
    export function absU64(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::abs_u64",
        arguments: _args,
      });
    }
    export function add(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::add",
        arguments: _args,
      });
    }
    export function and(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::and",
        arguments: _args,
      });
    }
    export function asU64(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::as_u64",
        arguments: _args,
      });
    }
    export function cmp(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::cmp",
        arguments: _args,
      });
    }
    export function div(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::div",
        arguments: _args,
      });
    }
    export function eq(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::eq",
        arguments: _args,
      });
    }
    export function from$(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::from",
        arguments: _args,
      });
    }
    export function fromU64(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::from_u64",
        arguments: _args,
      });
    }
    export function gt(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::gt",
        arguments: _args,
      });
    }
    export function gte(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::gte",
        arguments: _args,
      });
    }
    export function isNeg(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::is_neg",
        arguments: _args,
      });
    }
    export function lt(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::lt",
        arguments: _args,
      });
    }
    export function lte(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::lte",
        arguments: _args,
      });
    }
    export function mod(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::mod",
        arguments: _args,
      });
    }
    export function mul(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::mul",
        arguments: _args,
      });
    }
    export function negFrom(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::neg_from",
        arguments: _args,
      });
    }
    export function or(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::or",
        arguments: _args,
      });
    }
    export function shl(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::shl",
        arguments: _args,
      });
    }
    export function shr(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::shr",
        arguments: _args,
      });
    }
    export function sign(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::sign",
        arguments: _args,
      });
    }
    export function sub(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [i64.I64 | TransactionArgument, i64.I64 | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::wrapping_sub",
        arguments: _args,
      });
    }
    export function zero(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::i64::zero",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function abs(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.abs(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function absU64(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.absU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function add(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.add(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function and(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.and(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function asU64(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.asU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function cmp(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.cmp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function div(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.div(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function eq(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.eq(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function from$(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.from$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function fromU64(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.fromU64(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function gt(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function gte(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.gte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isNeg(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isNeg(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lt(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lt(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lte(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.lte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function mod(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.mod(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function mul(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.mul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function negFrom(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.negFrom(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function or(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.or(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function shl(
      client: SuiClient,
      args: [i64.I64, number],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.shl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function shr(
      client: SuiClient,
      args: [i64.I64, number],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.shr(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function sign(
      client: SuiClient,
      args: [i64.I64],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.sign(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function sub(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.sub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [i64.I64, i64.I64],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
    export async function zero(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[i64.I64]>> {
      const tx = new Transaction();
      builder.zero(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[i64.I64]>(
        inspectRes,
      );
    }
  }
}

export namespace math_u128 {
  export namespace builder {
    export function addCheck(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::add_check",
        arguments: _args,
      });
    }
    export function checkedDivRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::checked_div_round",
        arguments: _args,
      });
    }
    export function fromLoHi(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::from_lo_hi",
        arguments: _args,
      });
    }
    export function fullMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::full_mul",
        arguments: _args,
      });
    }
    export function hi(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::hi",
        arguments: _args,
      });
    }
    export function hiU128(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::hi_u128",
        arguments: _args,
      });
    }
    export function lo(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::lo",
        arguments: _args,
      });
    }
    export function loU128(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::lo_u128",
        arguments: _args,
      });
    }
    export function max(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::max",
        arguments: _args,
      });
    }
    export function min(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::min",
        arguments: _args,
      });
    }
    export function overflowingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::overflowing_add",
        arguments: _args,
      });
    }
    export function overflowingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::overflowing_mul",
        arguments: _args,
      });
    }
    export function overflowingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::overflowing_sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::wrapping_mul",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u128::wrapping_sub",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addCheck(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.addCheck(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function checkedDivRound(
      client: SuiClient,
      args: [bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.checkedDivRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function fromLoHi(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.fromLoHi(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function fullMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.fullMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function hi(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.hi(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function hiU128(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.hiU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function lo(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.lo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function loU128(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.loU128(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function max(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.max(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function min(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.min(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function overflowingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace math_u256 {
  export namespace builder {
    export function addCheck(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u256::add_check",
        arguments: _args,
      });
    }
    export function checkedShlw(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u256::checked_shlw",
        arguments: _args,
      });
    }
    export function divMod(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u256::div_mod",
        arguments: _args,
      });
    }
    export function divRound(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));
      _args.push(transactionArgumentOrPureU256(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u256::div_round",
        arguments: _args,
      });
    }
    export function shlw(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u256::shlw",
        arguments: _args,
      });
    }
    export function shrw(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU256(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u256::shrw",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addCheck(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.addCheck(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function checkedShlw(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.checkedShlw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function divMod(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.divMod(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function divRound(
      client: SuiClient,
      args: [bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.divRound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function shlw(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.shlw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function shrw(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.shrw(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace math_u64 {
  export namespace builder {
    export function addCheck(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::add_check",
        arguments: _args,
      });
    }
    export function carryAdd(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::carry_add",
        arguments: _args,
      });
    }
    export function overflowingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::overflowing_add",
        arguments: _args,
      });
    }
    export function overflowingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::overflowing_mul",
        arguments: _args,
      });
    }
    export function overflowingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::overflowing_sub",
        arguments: _args,
      });
    }
    export function wrappingAdd(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::wrapping_add",
        arguments: _args,
      });
    }
    export function wrappingMul(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::wrapping_mul",
        arguments: _args,
      });
    }
    export function wrappingSub(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57::math_u64::wrapping_sub",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addCheck(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.addCheck(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function carryAdd(
      client: SuiClient,
      args: [bigint, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.carryAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function overflowingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function overflowingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, boolean]>> {
      const tx = new Transaction();
      builder.overflowingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, boolean]
      >(inspectRes);
    }
    export async function wrappingAdd(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingAdd(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingMul(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingMul(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function wrappingSub(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.wrappingSub(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '[{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"full_math_u128","friends":[],"structs":{},"exposedFunctions":{"full_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U256"]},"mul_div_ceil":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"mul_div_floor":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"mul_div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128"],"return":["U128"]},"mul_shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U8"],"return":["U128"]},"mul_shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U8"],"return":["U128"]}}},{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"full_math_u64","friends":[],"structs":{},"exposedFunctions":{"full_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U128"]},"mul_div_ceil":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64"]},"mul_div_floor":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64"]},"mul_div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64"]},"mul_shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U8"],"return":["U64"]},"mul_shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U8"],"return":["U64"]}}},{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"i128","friends":[],"structs":{"I128":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bits","type":"U128"}]}},"exposedFunctions":{"abs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"abs_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["U128"]},"add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"and":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"as_i32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"as_i64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"as_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["U128"]},"cmp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["U8"]},"div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"eq":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"gt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"gte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"is_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"lt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"lte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["Bool"]},"mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"neg_from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"or":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"overflowing_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},"Bool"]},"overflowing_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},"Bool"]},"shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"sign":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":["U8"]},"sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"i32","friends":[],"structs":{"I32":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bits","type":"U32"}]}},"exposedFunctions":{"abs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"abs_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U32"]},"add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"and":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"as_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U32"]},"cmp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U8"]},"div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"eq":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"from_u32":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"gt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"gte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"is_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"lt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"lte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["Bool"]},"mod":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"neg_from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"or":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"sign":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U8"]},"sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"i64","friends":[],"structs":{"I64":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"bits","type":"U64"}]}},"exposedFunctions":{"abs":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"abs_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["U64"]},"add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"and":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"as_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["U64"]},"cmp":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["U8"]},"div":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"eq":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"from_u64":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"gt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"gte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"is_neg":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"lt":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"lte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["Bool"]},"mod":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"neg_from":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"or":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"shl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"shr":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},"U8"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"sign":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":["U8"]},"sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]},"zero":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i64","name":"I64","typeArguments":[]}}]}}},{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"math_u128","friends":[],"structs":{},"exposedFunctions":{"add_check":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["Bool"]},"checked_div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","Bool"],"return":["U128"]},"from_lo_hi":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U128"]},"full_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","U128"]},"hi":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U64"]},"hi_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U128"]},"lo":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U64"]},"lo_u128":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":["U128"]},"max":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"min":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"overflowing_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","Bool"]},"overflowing_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","Bool"]},"overflowing_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128","Bool"]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"wrapping_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128"],"return":["U128"]}}},{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"math_u256","friends":[],"structs":{},"exposedFunctions":{"add_check":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256","U256"],"return":["Bool"]},"checked_shlw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U256","Bool"]},"div_mod":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256","U256"],"return":["U256","U256"]},"div_round":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256","U256","Bool"],"return":["U256"]},"shlw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U256"]},"shrw":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U256"],"return":["U256"]}}},{"fileFormatVersion":6,"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","name":"math_u64","friends":[],"structs":{},"exposedFunctions":{"add_check":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["Bool"]},"carry_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64","U64"],"return":["U64","U64"]},"overflowing_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64","Bool"]},"overflowing_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64","Bool"]},"overflowing_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64","Bool"]},"wrapping_add":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"wrapping_mul":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"wrapping_sub":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]}}}]',
);

export function loadAllTypes(coder: MoveCoder) {
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57",
    );
  }
}

loadAllTypes(defaultMoveCoder(SuiNetwork.MAIN_NET));
