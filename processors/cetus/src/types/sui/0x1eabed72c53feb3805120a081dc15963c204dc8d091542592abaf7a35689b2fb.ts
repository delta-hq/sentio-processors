/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb, original address 0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@sentio/sdk/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import { CallFilter, MoveFetchConfig } from "@sentio/sdk/move";
import {
  SuiBindOptions,
  SuiBaseProcessor,
  SuiNetwork,
  TypedFunctionPayload,
  SuiContext,
} from "@sentio/sdk/sui";

import * as _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa from "./0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.js";
import * as _0x2 from "@sentio/sdk/sui/builtin/0x2";
import * as _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57 from "./0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.js";
import * as _0x1 from "@sentio/sdk/sui/builtin/0x1";

export class acl extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("acl", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): acl {
    return new acl({ ...acl.DEFAULT_OPTIONS, ...options });
  }

  onEventMember(
    func: (event: acl.MemberInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): acl {
    this.onMoveEvent(func, { type: "acl::Member" }, fetchConfig);
    return this;
  }
}

export namespace acl {
  export interface ACL {
    permissions: _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.linked_table.LinkedTable<
      string,
      bigint
    >;
  }

  export namespace ACL {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::ACL";

    const TYPE = new TypeDescriptor<ACL>(ACL.TYPE_QNAME);

    export function type(): TypeDescriptor<ACL> {
      return TYPE.apply();
    }
  }

  export interface Member {
    address: string;
    permission: bigint;
  }

  export namespace Member {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::Member";

    const TYPE = new TypeDescriptor<Member>(Member.TYPE_QNAME);

    export function type(): TypeDescriptor<Member> {
      return TYPE.apply();
    }
  }

  export interface MemberInstance extends TypedEventInstance<Member> {
    data_decoded: Member;
    type_arguments: [];
  }

  export namespace builder {
    export function addRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::add_role",
        arguments: _args,
      });
    }
    export function getMembers(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::get_members",
        arguments: _args,
      });
    }
    export function getPermission(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::get_permission",
        arguments: _args,
      });
    }
    export function hasRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::has_role",
        arguments: _args,
      });
    }
    export function new$(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::new",
        arguments: _args,
      });
    }
    export function removeMember(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::remove_member",
        arguments: _args,
      });
    }
    export function removeRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPureU8(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::remove_role",
        arguments: _args,
      });
    }
    export function setRoles(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::acl::set_roles",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addRole(
      client: SuiClient,
      args: [string, string, number],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function getMembers(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[acl.Member[]]>> {
      const tx = new Transaction();
      builder.getMembers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [acl.Member[]]
      >(inspectRes);
    }
    export async function getPermission(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPermission(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function hasRole(
      client: SuiClient,
      args: [string, string, number],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.hasRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function new$(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[acl.ACL]>> {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[acl.ACL]>(
        inspectRes,
      );
    }
    export async function removeMember(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeMember(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeRole(
      client: SuiClient,
      args: [string, string, number],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setRoles(
      client: SuiClient,
      args: [string, string, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setRoles(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace clmm_math {
  export namespace builder {
    export function computeSwapStep(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));
      _args.push(transactionArgumentOrPureBool(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::compute_swap_step",
        arguments: _args,
      });
    }
    export function feeRateDenominator(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::fee_rate_denominator",
        arguments: _args,
      });
    }
    export function getAmountByLiquidity(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_amount_by_liquidity",
        arguments: _args,
      });
    }
    export function getDeltaA(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_delta_a",
        arguments: _args,
      });
    }
    export function getDeltaB(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_delta_b",
        arguments: _args,
      });
    }
    export function getDeltaDownFromOutput(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_delta_down_from_output",
        arguments: _args,
      });
    }
    export function getDeltaUpFromInput(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_delta_up_from_input",
        arguments: _args,
      });
    }
    export function getLiquidityByAmount(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_liquidity_by_amount",
        arguments: _args,
      });
    }
    export function getLiquidityFromA(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_liquidity_from_a",
        arguments: _args,
      });
    }
    export function getLiquidityFromB(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_liquidity_from_b",
        arguments: _args,
      });
    }
    export function getNextSqrtPriceAUp(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_next_sqrt_price_a_up",
        arguments: _args,
      });
    }
    export function getNextSqrtPriceBDown(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_next_sqrt_price_b_down",
        arguments: _args,
      });
    }
    export function getNextSqrtPriceFromInput(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_next_sqrt_price_from_input",
        arguments: _args,
      });
    }
    export function getNextSqrtPriceFromOutput(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::clmm_math::get_next_sqrt_price_from_output",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function computeSwapStep(
      client: SuiClient,
      args: [bigint, bigint, bigint, bigint, bigint, boolean, boolean],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint, bigint]>> {
      const tx = new Transaction();
      builder.computeSwapStep(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function feeRateDenominator(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.feeRateDenominator(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getAmountByLiquidity(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        bigint,
        boolean,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getAmountByLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getDeltaA(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getDeltaA(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getDeltaB(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getDeltaB(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getDeltaDownFromOutput(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getDeltaDownFromOutput(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getDeltaUpFromInput(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getDeltaUpFromInput(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getLiquidityByAmount(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        bigint,
        boolean,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint]>> {
      const tx = new Transaction();
      builder.getLiquidityByAmount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function getLiquidityFromA(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getLiquidityFromA(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getLiquidityFromB(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getLiquidityFromB(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getNextSqrtPriceAUp(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getNextSqrtPriceAUp(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getNextSqrtPriceBDown(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getNextSqrtPriceBDown(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getNextSqrtPriceFromInput(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getNextSqrtPriceFromInput(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getNextSqrtPriceFromOutput(
      client: SuiClient,
      args: [bigint, bigint, bigint, boolean],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getNextSqrtPriceFromOutput(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export class config extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("config", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): config {
    return new config({ ...config.DEFAULT_OPTIONS, ...options });
  }

  onEventAddFeeTierEvent(
    func: (event: config.AddFeeTierEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::AddFeeTierEvent" }, fetchConfig);
    return this;
  }

  onEventAddRoleEvent(
    func: (event: config.AddRoleEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::AddRoleEvent" }, fetchConfig);
    return this;
  }

  onEventDeleteFeeTierEvent(
    func: (event: config.DeleteFeeTierEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::DeleteFeeTierEvent" }, fetchConfig);
    return this;
  }

  onEventFeeTier(
    func: (event: config.FeeTierInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::FeeTier" }, fetchConfig);
    return this;
  }

  onEventInitConfigEvent(
    func: (event: config.InitConfigEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::InitConfigEvent" }, fetchConfig);
    return this;
  }

  onEventRemoveMemberEvent(
    func: (event: config.RemoveMemberEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::RemoveMemberEvent" }, fetchConfig);
    return this;
  }

  onEventRemoveRoleEvent(
    func: (event: config.RemoveRoleEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::RemoveRoleEvent" }, fetchConfig);
    return this;
  }

  onEventSetPackageVersion(
    func: (event: config.SetPackageVersionInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::SetPackageVersion" }, fetchConfig);
    return this;
  }

  onEventSetRolesEvent(
    func: (event: config.SetRolesEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::SetRolesEvent" }, fetchConfig);
    return this;
  }

  onEventUpdateFeeRateEvent(
    func: (event: config.UpdateFeeRateEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::UpdateFeeRateEvent" }, fetchConfig);
    return this;
  }

  onEventUpdateFeeTierEvent(
    func: (event: config.UpdateFeeTierEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): config {
    this.onMoveEvent(func, { type: "config::UpdateFeeTierEvent" }, fetchConfig);
    return this;
  }
}

export namespace config {
  export interface AddFeeTierEvent {
    tick_spacing: number;
    fee_rate: bigint;
  }

  export namespace AddFeeTierEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::AddFeeTierEvent";

    const TYPE = new TypeDescriptor<AddFeeTierEvent>(
      AddFeeTierEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<AddFeeTierEvent> {
      return TYPE.apply();
    }
  }

  export interface AddFeeTierEventInstance
    extends TypedEventInstance<AddFeeTierEvent> {
    data_decoded: AddFeeTierEvent;
    type_arguments: [];
  }

  export interface AddRoleEvent {
    member: string;
    role: number;
  }

  export namespace AddRoleEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::AddRoleEvent";

    const TYPE = new TypeDescriptor<AddRoleEvent>(AddRoleEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<AddRoleEvent> {
      return TYPE.apply();
    }
  }

  export interface AddRoleEventInstance
    extends TypedEventInstance<AddRoleEvent> {
    data_decoded: AddRoleEvent;
    type_arguments: [];
  }

  export interface AdminCap {
    id: _0x2.object$.UID;
  }

  export namespace AdminCap {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::AdminCap";

    const TYPE = new TypeDescriptor<AdminCap>(AdminCap.TYPE_QNAME);

    export function type(): TypeDescriptor<AdminCap> {
      return TYPE.apply();
    }
  }

  export interface DeleteFeeTierEvent {
    tick_spacing: number;
    fee_rate: bigint;
  }

  export namespace DeleteFeeTierEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::DeleteFeeTierEvent";

    const TYPE = new TypeDescriptor<DeleteFeeTierEvent>(
      DeleteFeeTierEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<DeleteFeeTierEvent> {
      return TYPE.apply();
    }
  }

  export interface DeleteFeeTierEventInstance
    extends TypedEventInstance<DeleteFeeTierEvent> {
    data_decoded: DeleteFeeTierEvent;
    type_arguments: [];
  }

  export interface FeeTier {
    tick_spacing: number;
    fee_rate: bigint;
  }

  export namespace FeeTier {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::FeeTier";

    const TYPE = new TypeDescriptor<FeeTier>(FeeTier.TYPE_QNAME);

    export function type(): TypeDescriptor<FeeTier> {
      return TYPE.apply();
    }
  }

  export interface FeeTierInstance extends TypedEventInstance<FeeTier> {
    data_decoded: FeeTier;
    type_arguments: [];
  }

  export interface GlobalConfig {
    id: _0x2.object$.UID;
    protocol_fee_rate: bigint;
    fee_tiers: _0x2.vec_map.VecMap<number, config.FeeTier>;
    acl: acl.ACL;
    package_version: bigint;
  }

  export namespace GlobalConfig {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::GlobalConfig";

    const TYPE = new TypeDescriptor<GlobalConfig>(GlobalConfig.TYPE_QNAME);

    export function type(): TypeDescriptor<GlobalConfig> {
      return TYPE.apply();
    }
  }

  export interface InitConfigEvent {
    admin_cap_id: _0x2.object$.ID;
    global_config_id: _0x2.object$.ID;
  }

  export namespace InitConfigEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::InitConfigEvent";

    const TYPE = new TypeDescriptor<InitConfigEvent>(
      InitConfigEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<InitConfigEvent> {
      return TYPE.apply();
    }
  }

  export interface InitConfigEventInstance
    extends TypedEventInstance<InitConfigEvent> {
    data_decoded: InitConfigEvent;
    type_arguments: [];
  }

  export interface ProtocolFeeClaimCap {
    id: _0x2.object$.UID;
  }

  export namespace ProtocolFeeClaimCap {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::ProtocolFeeClaimCap";

    const TYPE = new TypeDescriptor<ProtocolFeeClaimCap>(
      ProtocolFeeClaimCap.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<ProtocolFeeClaimCap> {
      return TYPE.apply();
    }
  }

  export interface RemoveMemberEvent {
    member: string;
  }

  export namespace RemoveMemberEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::RemoveMemberEvent";

    const TYPE = new TypeDescriptor<RemoveMemberEvent>(
      RemoveMemberEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RemoveMemberEvent> {
      return TYPE.apply();
    }
  }

  export interface RemoveMemberEventInstance
    extends TypedEventInstance<RemoveMemberEvent> {
    data_decoded: RemoveMemberEvent;
    type_arguments: [];
  }

  export interface RemoveRoleEvent {
    member: string;
    role: number;
  }

  export namespace RemoveRoleEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::RemoveRoleEvent";

    const TYPE = new TypeDescriptor<RemoveRoleEvent>(
      RemoveRoleEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RemoveRoleEvent> {
      return TYPE.apply();
    }
  }

  export interface RemoveRoleEventInstance
    extends TypedEventInstance<RemoveRoleEvent> {
    data_decoded: RemoveRoleEvent;
    type_arguments: [];
  }

  export interface SetPackageVersion {
    new_version: bigint;
    old_version: bigint;
  }

  export namespace SetPackageVersion {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::SetPackageVersion";

    const TYPE = new TypeDescriptor<SetPackageVersion>(
      SetPackageVersion.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<SetPackageVersion> {
      return TYPE.apply();
    }
  }

  export interface SetPackageVersionInstance
    extends TypedEventInstance<SetPackageVersion> {
    data_decoded: SetPackageVersion;
    type_arguments: [];
  }

  export interface SetRolesEvent {
    member: string;
    roles: bigint;
  }

  export namespace SetRolesEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::SetRolesEvent";

    const TYPE = new TypeDescriptor<SetRolesEvent>(SetRolesEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<SetRolesEvent> {
      return TYPE.apply();
    }
  }

  export interface SetRolesEventInstance
    extends TypedEventInstance<SetRolesEvent> {
    data_decoded: SetRolesEvent;
    type_arguments: [];
  }

  export interface UpdateFeeRateEvent {
    old_fee_rate: bigint;
    new_fee_rate: bigint;
  }

  export namespace UpdateFeeRateEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::UpdateFeeRateEvent";

    const TYPE = new TypeDescriptor<UpdateFeeRateEvent>(
      UpdateFeeRateEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateFeeRateEvent> {
      return TYPE.apply();
    }
  }

  export interface UpdateFeeRateEventInstance
    extends TypedEventInstance<UpdateFeeRateEvent> {
    data_decoded: UpdateFeeRateEvent;
    type_arguments: [];
  }

  export interface UpdateFeeTierEvent {
    tick_spacing: number;
    old_fee_rate: bigint;
    new_fee_rate: bigint;
  }

  export namespace UpdateFeeTierEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::UpdateFeeTierEvent";

    const TYPE = new TypeDescriptor<UpdateFeeTierEvent>(
      UpdateFeeTierEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateFeeTierEvent> {
      return TYPE.apply();
    }
  }

  export interface UpdateFeeTierEventInstance
    extends TypedEventInstance<UpdateFeeTierEvent> {
    data_decoded: UpdateFeeTierEvent;
    type_arguments: [];
  }

  export namespace builder {
    export function acl(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::acl",
        arguments: _args,
      });
    }
    export function addFeeTier(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::add_fee_tier",
        arguments: _args,
      });
    }
    export function addRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      _args.push(transactionArgumentOrPureU8(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::add_role",
        arguments: _args,
      });
    }
    export function checkFeeTierManagerRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::check_fee_tier_manager_role",
        arguments: _args,
      });
    }
    export function checkPartnerManagerRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::check_partner_manager_role",
        arguments: _args,
      });
    }
    export function checkPoolManagerRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::check_pool_manager_role",
        arguments: _args,
      });
    }
    export function checkProtocolFeeClaimRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::check_protocol_fee_claim_role",
        arguments: _args,
      });
    }
    export function checkRewarderManagerRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::check_rewarder_manager_role",
        arguments: _args,
      });
    }
    export function checkedPackageVersion(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::checked_package_version",
        arguments: _args,
      });
    }
    export function deleteFeeTier(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::delete_fee_tier",
        arguments: _args,
      });
    }
    export function feeRate(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::fee_rate",
        arguments: _args,
      });
    }
    export function feeTiers(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::fee_tiers",
        arguments: _args,
      });
    }
    export function getFeeRate(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::get_fee_rate",
        arguments: _args,
      });
    }
    export function getMembers(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::get_members",
        arguments: _args,
      });
    }
    export function getProtocolFeeRate(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::get_protocol_fee_rate",
        arguments: _args,
      });
    }
    export function maxFeeRate(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::max_fee_rate",
        arguments: _args,
      });
    }
    export function maxProtocolFeeRate(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::max_protocol_fee_rate",
        arguments: _args,
      });
    }
    export function protocolFeeRate(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::protocol_fee_rate",
        arguments: _args,
      });
    }
    export function removeMember(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::remove_member",
        arguments: _args,
      });
    }
    export function removeRole(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      _args.push(transactionArgumentOrPureU8(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::remove_role",
        arguments: _args,
      });
    }
    export function setRoles(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureAddress(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::set_roles",
        arguments: _args,
      });
    }
    export function tickSpacing(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::tick_spacing",
        arguments: _args,
      });
    }
    export function updateFeeTier(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::update_fee_tier",
        arguments: _args,
      });
    }
    export function updatePackageVersion(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::update_package_version",
        arguments: _args,
      });
    }
    export function updateProtocolFeeRate(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::config::update_protocol_fee_rate",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function acl(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.acl(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function addFeeTier(
      client: SuiClient,
      args: [string, number, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addFeeTier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function addRole(
      client: SuiClient,
      args: [string, string, string, number],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function checkFeeTierManagerRole(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkFeeTierManagerRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function checkPartnerManagerRole(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkPartnerManagerRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function checkPoolManagerRole(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkPoolManagerRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function checkProtocolFeeClaimRole(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkProtocolFeeClaimRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function checkRewarderManagerRole(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkRewarderManagerRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function checkedPackageVersion(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkedPackageVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function deleteFeeTier(
      client: SuiClient,
      args: [string, number],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.deleteFeeTier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function feeRate(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.feeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function feeTiers(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.feeTiers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function getFeeRate(
      client: SuiClient,
      args: [number, string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getMembers(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[acl.Member[]]>> {
      const tx = new Transaction();
      builder.getMembers(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [acl.Member[]]
      >(inspectRes);
    }
    export async function getProtocolFeeRate(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getProtocolFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function maxFeeRate(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.maxFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function maxProtocolFeeRate(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.maxProtocolFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function protocolFeeRate(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.protocolFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function removeMember(
      client: SuiClient,
      args: [string, string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeMember(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function removeRole(
      client: SuiClient,
      args: [string, string, string, number],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.removeRole(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function setRoles(
      client: SuiClient,
      args: [string, string, string, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setRoles(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function tickSpacing(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.tickSpacing(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function updateFeeTier(
      client: SuiClient,
      args: [string, number, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateFeeTier(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updatePackageVersion(
      client: SuiClient,
      args: [string, string, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updatePackageVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateProtocolFeeRate(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateProtocolFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export class factory extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("factory", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): factory {
    return new factory({ ...factory.DEFAULT_OPTIONS, ...options });
  }

  onEventCreatePoolEvent(
    func: (event: factory.CreatePoolEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): factory {
    this.onMoveEvent(func, { type: "factory::CreatePoolEvent" }, fetchConfig);
    return this;
  }

  onEventInitFactoryEvent(
    func: (event: factory.InitFactoryEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): factory {
    this.onMoveEvent(func, { type: "factory::InitFactoryEvent" }, fetchConfig);
    return this;
  }

  onEventPoolSimpleInfo(
    func: (event: factory.PoolSimpleInfoInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): factory {
    this.onMoveEvent(func, { type: "factory::PoolSimpleInfo" }, fetchConfig);
    return this;
  }
}

export namespace factory {
  export interface CreatePoolEvent {
    pool_id: _0x2.object$.ID;
    coin_type_a: string;
    coin_type_b: string;
    tick_spacing: number;
  }

  export namespace CreatePoolEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::CreatePoolEvent";

    const TYPE = new TypeDescriptor<CreatePoolEvent>(
      CreatePoolEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CreatePoolEvent> {
      return TYPE.apply();
    }
  }

  export interface CreatePoolEventInstance
    extends TypedEventInstance<CreatePoolEvent> {
    data_decoded: CreatePoolEvent;
    type_arguments: [];
  }

  export interface InitFactoryEvent {
    pools_id: _0x2.object$.ID;
  }

  export namespace InitFactoryEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::InitFactoryEvent";

    const TYPE = new TypeDescriptor<InitFactoryEvent>(
      InitFactoryEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<InitFactoryEvent> {
      return TYPE.apply();
    }
  }

  export interface InitFactoryEventInstance
    extends TypedEventInstance<InitFactoryEvent> {
    data_decoded: InitFactoryEvent;
    type_arguments: [];
  }

  export interface PoolSimpleInfo {
    pool_id: _0x2.object$.ID;
    pool_key: _0x2.object$.ID;
    coin_type_a: _0x1.type_name.TypeName;
    coin_type_b: _0x1.type_name.TypeName;
    tick_spacing: number;
  }

  export namespace PoolSimpleInfo {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::PoolSimpleInfo";

    const TYPE = new TypeDescriptor<PoolSimpleInfo>(PoolSimpleInfo.TYPE_QNAME);

    export function type(): TypeDescriptor<PoolSimpleInfo> {
      return TYPE.apply();
    }
  }

  export interface PoolSimpleInfoInstance
    extends TypedEventInstance<PoolSimpleInfo> {
    data_decoded: PoolSimpleInfo;
    type_arguments: [];
  }

  export interface Pools {
    id: _0x2.object$.UID;
    list: _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.linked_table.LinkedTable<
      _0x2.object$.ID,
      factory.PoolSimpleInfo
    >;
    index: bigint;
  }

  export namespace Pools {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::Pools";

    const TYPE = new TypeDescriptor<Pools>(Pools.TYPE_QNAME);

    export function type(): TypeDescriptor<Pools> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function coinTypes(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::coin_types",
        arguments: _args,
      });
    }
    export function createPool<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::create_pool",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function createPoolWithLiquidity<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPureU32(args[5], tx));
      _args.push(transactionArgumentOrPureU32(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrPureU64(args[10], tx));
      _args.push(transactionArgumentOrPureBool(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::create_pool_with_liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function fetchPools(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::fetch_pools",
        arguments: _args,
      });
    }
    export function index(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::index",
        arguments: _args,
      });
    }
    export function newPoolKey<T0 = any, T1 = any>(
      tx: Transaction,
      args: [number | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::new_pool_key",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function poolId(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::pool_id",
        arguments: _args,
      });
    }
    export function poolKey(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::pool_key",
        arguments: _args,
      });
    }
    export function poolSimpleInfo(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::pool_simple_info",
        arguments: _args,
      });
    }
    export function tickSpacing(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::factory::tick_spacing",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function coinTypes(
      client: SuiClient,
      args: [string],
    ): Promise<
      TypedDevInspectResults<[_0x1.type_name.TypeName, _0x1.type_name.TypeName]>
    > {
      const tx = new Transaction();
      builder.coinTypes(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.type_name.TypeName, _0x1.type_name.TypeName]
      >(inspectRes);
    }
    export async function createPool<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, number, bigint, string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.createPool(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function createPoolWithLiquidity<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        number,
        bigint,
        string,
        number,
        number,
        _0x2.coin.Coin<T0>,
        _0x2.coin.Coin<T1>,
        bigint,
        bigint,
        boolean,
        string,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [position.Position, _0x2.coin.Coin<T0>, _0x2.coin.Coin<T1>]
      >
    > {
      const tx = new Transaction();
      builder.createPoolWithLiquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [position.Position, _0x2.coin.Coin<T0>, _0x2.coin.Coin<T1>]
      >(inspectRes);
    }
    export async function fetchPools(
      client: SuiClient,
      args: [string, string[], bigint],
    ): Promise<TypedDevInspectResults<[factory.PoolSimpleInfo[]]>> {
      const tx = new Transaction();
      builder.fetchPools(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [factory.PoolSimpleInfo[]]
      >(inspectRes);
    }
    export async function index(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.index(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function newPoolKey<T0 = any, T1 = any>(
      client: SuiClient,
      args: [number],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.newPoolKey(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function poolId(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.poolId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function poolKey(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.poolKey(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function poolSimpleInfo(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.poolSimpleInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function tickSpacing(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.tickSpacing(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
  }
}

export class partner extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("partner", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): partner {
    return new partner({ ...partner.DEFAULT_OPTIONS, ...options });
  }

  onEventClaimRefFeeEvent(
    func: (event: partner.ClaimRefFeeEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): partner {
    this.onMoveEvent(func, { type: "partner::ClaimRefFeeEvent" }, fetchConfig);
    return this;
  }

  onEventCreatePartnerEvent(
    func: (event: partner.CreatePartnerEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): partner {
    this.onMoveEvent(
      func,
      { type: "partner::CreatePartnerEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventInitPartnerEvent(
    func: (event: partner.InitPartnerEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): partner {
    this.onMoveEvent(func, { type: "partner::InitPartnerEvent" }, fetchConfig);
    return this;
  }

  onEventReceiveRefFeeEvent(
    func: (event: partner.ReceiveRefFeeEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): partner {
    this.onMoveEvent(
      func,
      { type: "partner::ReceiveRefFeeEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventUpdateRefFeeRateEvent(
    func: (
      event: partner.UpdateRefFeeRateEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): partner {
    this.onMoveEvent(
      func,
      { type: "partner::UpdateRefFeeRateEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventUpdateTimeRangeEvent(
    func: (
      event: partner.UpdateTimeRangeEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): partner {
    this.onMoveEvent(
      func,
      { type: "partner::UpdateTimeRangeEvent" },
      fetchConfig,
    );
    return this;
  }
}

export namespace partner {
  export interface ClaimRefFeeEvent {
    partner_id: _0x2.object$.ID;
    amount: bigint;
    type_name: string;
  }

  export namespace ClaimRefFeeEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::ClaimRefFeeEvent";

    const TYPE = new TypeDescriptor<ClaimRefFeeEvent>(
      ClaimRefFeeEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<ClaimRefFeeEvent> {
      return TYPE.apply();
    }
  }

  export interface ClaimRefFeeEventInstance
    extends TypedEventInstance<ClaimRefFeeEvent> {
    data_decoded: ClaimRefFeeEvent;
    type_arguments: [];
  }

  export interface CreatePartnerEvent {
    recipient: string;
    partner_id: _0x2.object$.ID;
    partner_cap_id: _0x2.object$.ID;
    ref_fee_rate: bigint;
    name: string;
    start_time: bigint;
    end_time: bigint;
  }

  export namespace CreatePartnerEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::CreatePartnerEvent";

    const TYPE = new TypeDescriptor<CreatePartnerEvent>(
      CreatePartnerEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CreatePartnerEvent> {
      return TYPE.apply();
    }
  }

  export interface CreatePartnerEventInstance
    extends TypedEventInstance<CreatePartnerEvent> {
    data_decoded: CreatePartnerEvent;
    type_arguments: [];
  }

  export interface InitPartnerEvent {
    partners_id: _0x2.object$.ID;
  }

  export namespace InitPartnerEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::InitPartnerEvent";

    const TYPE = new TypeDescriptor<InitPartnerEvent>(
      InitPartnerEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<InitPartnerEvent> {
      return TYPE.apply();
    }
  }

  export interface InitPartnerEventInstance
    extends TypedEventInstance<InitPartnerEvent> {
    data_decoded: InitPartnerEvent;
    type_arguments: [];
  }

  export interface Partner {
    id: _0x2.object$.UID;
    name: string;
    ref_fee_rate: bigint;
    start_time: bigint;
    end_time: bigint;
    balances: _0x2.bag.Bag;
  }

  export namespace Partner {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::Partner";

    const TYPE = new TypeDescriptor<Partner>(Partner.TYPE_QNAME);

    export function type(): TypeDescriptor<Partner> {
      return TYPE.apply();
    }
  }

  export interface PartnerCap {
    id: _0x2.object$.UID;
    name: string;
    partner_id: _0x2.object$.ID;
  }

  export namespace PartnerCap {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::PartnerCap";

    const TYPE = new TypeDescriptor<PartnerCap>(PartnerCap.TYPE_QNAME);

    export function type(): TypeDescriptor<PartnerCap> {
      return TYPE.apply();
    }
  }

  export interface Partners {
    id: _0x2.object$.UID;
    partners: _0x2.vec_map.VecMap<string, _0x2.object$.ID>;
  }

  export namespace Partners {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::Partners";

    const TYPE = new TypeDescriptor<Partners>(Partners.TYPE_QNAME);

    export function type(): TypeDescriptor<Partners> {
      return TYPE.apply();
    }
  }

  export interface ReceiveRefFeeEvent {
    partner_id: _0x2.object$.ID;
    amount: bigint;
    type_name: string;
  }

  export namespace ReceiveRefFeeEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::ReceiveRefFeeEvent";

    const TYPE = new TypeDescriptor<ReceiveRefFeeEvent>(
      ReceiveRefFeeEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<ReceiveRefFeeEvent> {
      return TYPE.apply();
    }
  }

  export interface ReceiveRefFeeEventInstance
    extends TypedEventInstance<ReceiveRefFeeEvent> {
    data_decoded: ReceiveRefFeeEvent;
    type_arguments: [];
  }

  export interface UpdateRefFeeRateEvent {
    partner_id: _0x2.object$.ID;
    old_fee_rate: bigint;
    new_fee_rate: bigint;
  }

  export namespace UpdateRefFeeRateEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::UpdateRefFeeRateEvent";

    const TYPE = new TypeDescriptor<UpdateRefFeeRateEvent>(
      UpdateRefFeeRateEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateRefFeeRateEvent> {
      return TYPE.apply();
    }
  }

  export interface UpdateRefFeeRateEventInstance
    extends TypedEventInstance<UpdateRefFeeRateEvent> {
    data_decoded: UpdateRefFeeRateEvent;
    type_arguments: [];
  }

  export interface UpdateTimeRangeEvent {
    partner_id: _0x2.object$.ID;
    start_time: bigint;
    end_time: bigint;
  }

  export namespace UpdateTimeRangeEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::UpdateTimeRangeEvent";

    const TYPE = new TypeDescriptor<UpdateTimeRangeEvent>(
      UpdateTimeRangeEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateTimeRangeEvent> {
      return TYPE.apply();
    }
  }

  export interface UpdateTimeRangeEventInstance
    extends TypedEventInstance<UpdateTimeRangeEvent> {
    data_decoded: UpdateTimeRangeEvent;
    type_arguments: [];
  }

  export namespace builder {
    export function balances(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::balances",
        arguments: _args,
      });
    }
    export function claimRefFee<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::claim_ref_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function createPartner(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::create_partner",
        arguments: _args,
      });
    }
    export function currentRefFeeRate(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::current_ref_fee_rate",
        arguments: _args,
      });
    }
    export function endTime(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::end_time",
        arguments: _args,
      });
    }
    export function name(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::name",
        arguments: _args,
      });
    }
    export function receiveRefFee<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::receive_ref_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function refFeeRate(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::ref_fee_rate",
        arguments: _args,
      });
    }
    export function startTime(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::start_time",
        arguments: _args,
      });
    }
    export function updateRefFeeRate(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::update_ref_fee_rate",
        arguments: _args,
      });
    }
    export function updateTimeRange(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::partner::update_time_range",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function balances(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.balances(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function claimRefFee<T0 = any>(
      client: SuiClient,
      args: [string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.claimRefFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function createPartner(
      client: SuiClient,
      args: [string, string, string, bigint, bigint, bigint, string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.createPartner(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function currentRefFeeRate(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.currentRefFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function endTime(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.endTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function name(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.name(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function receiveRefFee<T0 = any>(
      client: SuiClient,
      args: [string, _0x2.balance.Balance<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.receiveRefFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function refFeeRate(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.refFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function startTime(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.startTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function updateRefFeeRate(
      client: SuiClient,
      args: [string, string, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateRefFeeRate(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateTimeRange(
      client: SuiClient,
      args: [string, string, bigint, bigint, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateTimeRange(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export class pool extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("pool", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): pool {
    return new pool({ ...pool.DEFAULT_OPTIONS, ...options });
  }

  onEventAddLiquidityEvent(
    func: (event: pool.AddLiquidityEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::AddLiquidityEvent" }, fetchConfig);
    return this;
  }

  onEventAddRewarderEvent(
    func: (event: pool.AddRewarderEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::AddRewarderEvent" }, fetchConfig);
    return this;
  }

  onEventCalculatedSwapResult(
    func: (event: pool.CalculatedSwapResultInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::CalculatedSwapResult" }, fetchConfig);
    return this;
  }

  onEventClosePositionEvent(
    func: (event: pool.ClosePositionEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::ClosePositionEvent" }, fetchConfig);
    return this;
  }

  onEventCollectFeeEvent(
    func: (event: pool.CollectFeeEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::CollectFeeEvent" }, fetchConfig);
    return this;
  }

  onEventCollectProtocolFeeEvent(
    func: (
      event: pool.CollectProtocolFeeEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(
      func,
      { type: "pool::CollectProtocolFeeEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventCollectRewardEvent(
    func: (event: pool.CollectRewardEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::CollectRewardEvent" }, fetchConfig);
    return this;
  }

  onEventOpenPositionEvent(
    func: (event: pool.OpenPositionEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::OpenPositionEvent" }, fetchConfig);
    return this;
  }

  onEventRemoveLiquidityEvent(
    func: (event: pool.RemoveLiquidityEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::RemoveLiquidityEvent" }, fetchConfig);
    return this;
  }

  onEventSwapEvent(
    func: (event: pool.SwapEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::SwapEvent" }, fetchConfig);
    return this;
  }

  onEventSwapResult(
    func: (event: pool.SwapResultInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::SwapResult" }, fetchConfig);
    return this;
  }

  onEventSwapStepResult(
    func: (event: pool.SwapStepResultInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::SwapStepResult" }, fetchConfig);
    return this;
  }

  onEventUpdateEmissionEvent(
    func: (event: pool.UpdateEmissionEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::UpdateEmissionEvent" }, fetchConfig);
    return this;
  }

  onEventUpdateFeeRateEvent(
    func: (event: pool.UpdateFeeRateEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): pool {
    this.onMoveEvent(func, { type: "pool::UpdateFeeRateEvent" }, fetchConfig);
    return this;
  }
}

export namespace pool {
  export interface AddLiquidityEvent {
    pool: _0x2.object$.ID;
    position: _0x2.object$.ID;
    tick_lower: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    tick_upper: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    liquidity: bigint;
    after_liquidity: bigint;
    amount_a: bigint;
    amount_b: bigint;
  }

  export namespace AddLiquidityEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::AddLiquidityEvent";

    const TYPE = new TypeDescriptor<AddLiquidityEvent>(
      AddLiquidityEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<AddLiquidityEvent> {
      return TYPE.apply();
    }
  }

  export interface AddLiquidityEventInstance
    extends TypedEventInstance<AddLiquidityEvent> {
    data_decoded: AddLiquidityEvent;
    type_arguments: [];
  }

  export interface AddLiquidityReceipt<T0, T1> {
    pool_id: _0x2.object$.ID;
    amount_a: bigint;
    amount_b: bigint;
  }

  export namespace AddLiquidityReceipt {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::AddLiquidityReceipt";

    const TYPE = new TypeDescriptor<AddLiquidityReceipt<any, any>>(
      AddLiquidityReceipt.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<AddLiquidityReceipt<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface AddRewarderEvent {
    pool: _0x2.object$.ID;
    rewarder_type: _0x1.type_name.TypeName;
  }

  export namespace AddRewarderEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::AddRewarderEvent";

    const TYPE = new TypeDescriptor<AddRewarderEvent>(
      AddRewarderEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<AddRewarderEvent> {
      return TYPE.apply();
    }
  }

  export interface AddRewarderEventInstance
    extends TypedEventInstance<AddRewarderEvent> {
    data_decoded: AddRewarderEvent;
    type_arguments: [];
  }

  export interface CalculatedSwapResult {
    amount_in: bigint;
    amount_out: bigint;
    fee_amount: bigint;
    fee_rate: bigint;
    after_sqrt_price: bigint;
    is_exceed: boolean;
    step_results: pool.SwapStepResult[];
  }

  export namespace CalculatedSwapResult {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::CalculatedSwapResult";

    const TYPE = new TypeDescriptor<CalculatedSwapResult>(
      CalculatedSwapResult.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CalculatedSwapResult> {
      return TYPE.apply();
    }
  }

  export interface CalculatedSwapResultInstance
    extends TypedEventInstance<CalculatedSwapResult> {
    data_decoded: CalculatedSwapResult;
    type_arguments: [];
  }

  export interface ClosePositionEvent {
    pool: _0x2.object$.ID;
    position: _0x2.object$.ID;
  }

  export namespace ClosePositionEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::ClosePositionEvent";

    const TYPE = new TypeDescriptor<ClosePositionEvent>(
      ClosePositionEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<ClosePositionEvent> {
      return TYPE.apply();
    }
  }

  export interface ClosePositionEventInstance
    extends TypedEventInstance<ClosePositionEvent> {
    data_decoded: ClosePositionEvent;
    type_arguments: [];
  }

  export interface CollectFeeEvent {
    position: _0x2.object$.ID;
    pool: _0x2.object$.ID;
    amount_a: bigint;
    amount_b: bigint;
  }

  export namespace CollectFeeEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::CollectFeeEvent";

    const TYPE = new TypeDescriptor<CollectFeeEvent>(
      CollectFeeEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CollectFeeEvent> {
      return TYPE.apply();
    }
  }

  export interface CollectFeeEventInstance
    extends TypedEventInstance<CollectFeeEvent> {
    data_decoded: CollectFeeEvent;
    type_arguments: [];
  }

  export interface CollectProtocolFeeEvent {
    pool: _0x2.object$.ID;
    amount_a: bigint;
    amount_b: bigint;
  }

  export namespace CollectProtocolFeeEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::CollectProtocolFeeEvent";

    const TYPE = new TypeDescriptor<CollectProtocolFeeEvent>(
      CollectProtocolFeeEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CollectProtocolFeeEvent> {
      return TYPE.apply();
    }
  }

  export interface CollectProtocolFeeEventInstance
    extends TypedEventInstance<CollectProtocolFeeEvent> {
    data_decoded: CollectProtocolFeeEvent;
    type_arguments: [];
  }

  export interface CollectRewardEvent {
    position: _0x2.object$.ID;
    pool: _0x2.object$.ID;
    amount: bigint;
  }

  export namespace CollectRewardEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::CollectRewardEvent";

    const TYPE = new TypeDescriptor<CollectRewardEvent>(
      CollectRewardEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CollectRewardEvent> {
      return TYPE.apply();
    }
  }

  export interface CollectRewardEventInstance
    extends TypedEventInstance<CollectRewardEvent> {
    data_decoded: CollectRewardEvent;
    type_arguments: [];
  }

  export interface FlashSwapReceipt<T0, T1> {
    pool_id: _0x2.object$.ID;
    a2b: boolean;
    partner_id: _0x2.object$.ID;
    pay_amount: bigint;
    ref_fee_amount: bigint;
  }

  export namespace FlashSwapReceipt {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::FlashSwapReceipt";

    const TYPE = new TypeDescriptor<FlashSwapReceipt<any, any>>(
      FlashSwapReceipt.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<FlashSwapReceipt<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface OpenPositionEvent {
    pool: _0x2.object$.ID;
    tick_lower: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    tick_upper: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    position: _0x2.object$.ID;
  }

  export namespace OpenPositionEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::OpenPositionEvent";

    const TYPE = new TypeDescriptor<OpenPositionEvent>(
      OpenPositionEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<OpenPositionEvent> {
      return TYPE.apply();
    }
  }

  export interface OpenPositionEventInstance
    extends TypedEventInstance<OpenPositionEvent> {
    data_decoded: OpenPositionEvent;
    type_arguments: [];
  }

  export interface POOL {
    dummy_field: boolean;
  }

  export namespace POOL {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::POOL";

    const TYPE = new TypeDescriptor<POOL>(POOL.TYPE_QNAME);

    export function type(): TypeDescriptor<POOL> {
      return TYPE.apply();
    }
  }

  export interface Pool<T0, T1> {
    id: _0x2.object$.UID;
    coin_a: _0x2.balance.Balance<T0>;
    coin_b: _0x2.balance.Balance<T1>;
    tick_spacing: number;
    fee_rate: bigint;
    liquidity: bigint;
    current_sqrt_price: bigint;
    current_tick_index: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    fee_growth_global_a: bigint;
    fee_growth_global_b: bigint;
    fee_protocol_coin_a: bigint;
    fee_protocol_coin_b: bigint;
    tick_manager: tick.TickManager;
    rewarder_manager: rewarder.RewarderManager;
    position_manager: position.PositionManager;
    is_pause: boolean;
    index: bigint;
    url: string;
  }

  export namespace Pool {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::Pool";

    const TYPE = new TypeDescriptor<Pool<any, any>>(Pool.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Pool<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface RemoveLiquidityEvent {
    pool: _0x2.object$.ID;
    position: _0x2.object$.ID;
    tick_lower: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    tick_upper: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    liquidity: bigint;
    after_liquidity: bigint;
    amount_a: bigint;
    amount_b: bigint;
  }

  export namespace RemoveLiquidityEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::RemoveLiquidityEvent";

    const TYPE = new TypeDescriptor<RemoveLiquidityEvent>(
      RemoveLiquidityEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RemoveLiquidityEvent> {
      return TYPE.apply();
    }
  }

  export interface RemoveLiquidityEventInstance
    extends TypedEventInstance<RemoveLiquidityEvent> {
    data_decoded: RemoveLiquidityEvent;
    type_arguments: [];
  }

  export interface SwapEvent {
    atob: boolean;
    pool: _0x2.object$.ID;
    partner: _0x2.object$.ID;
    amount_in: bigint;
    amount_out: bigint;
    ref_amount: bigint;
    fee_amount: bigint;
    vault_a_amount: bigint;
    vault_b_amount: bigint;
    before_sqrt_price: bigint;
    after_sqrt_price: bigint;
    steps: bigint;
  }

  export namespace SwapEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::SwapEvent";

    const TYPE = new TypeDescriptor<SwapEvent>(SwapEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<SwapEvent> {
      return TYPE.apply();
    }
  }

  export interface SwapEventInstance extends TypedEventInstance<SwapEvent> {
    data_decoded: SwapEvent;
    type_arguments: [];
  }

  export interface SwapResult {
    amount_in: bigint;
    amount_out: bigint;
    fee_amount: bigint;
    ref_fee_amount: bigint;
    steps: bigint;
  }

  export namespace SwapResult {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::SwapResult";

    const TYPE = new TypeDescriptor<SwapResult>(SwapResult.TYPE_QNAME);

    export function type(): TypeDescriptor<SwapResult> {
      return TYPE.apply();
    }
  }

  export interface SwapResultInstance extends TypedEventInstance<SwapResult> {
    data_decoded: SwapResult;
    type_arguments: [];
  }

  export interface SwapStepResult {
    current_sqrt_price: bigint;
    target_sqrt_price: bigint;
    current_liquidity: bigint;
    amount_in: bigint;
    amount_out: bigint;
    fee_amount: bigint;
    remainder_amount: bigint;
  }

  export namespace SwapStepResult {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::SwapStepResult";

    const TYPE = new TypeDescriptor<SwapStepResult>(SwapStepResult.TYPE_QNAME);

    export function type(): TypeDescriptor<SwapStepResult> {
      return TYPE.apply();
    }
  }

  export interface SwapStepResultInstance
    extends TypedEventInstance<SwapStepResult> {
    data_decoded: SwapStepResult;
    type_arguments: [];
  }

  export interface UpdateEmissionEvent {
    pool: _0x2.object$.ID;
    rewarder_type: _0x1.type_name.TypeName;
    emissions_per_second: bigint;
  }

  export namespace UpdateEmissionEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::UpdateEmissionEvent";

    const TYPE = new TypeDescriptor<UpdateEmissionEvent>(
      UpdateEmissionEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateEmissionEvent> {
      return TYPE.apply();
    }
  }

  export interface UpdateEmissionEventInstance
    extends TypedEventInstance<UpdateEmissionEvent> {
    data_decoded: UpdateEmissionEvent;
    type_arguments: [];
  }

  export interface UpdateFeeRateEvent {
    pool: _0x2.object$.ID;
    old_fee_rate: bigint;
    new_fee_rate: bigint;
  }

  export namespace UpdateFeeRateEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::UpdateFeeRateEvent";

    const TYPE = new TypeDescriptor<UpdateFeeRateEvent>(
      UpdateFeeRateEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<UpdateFeeRateEvent> {
      return TYPE.apply();
    }
  }

  export interface UpdateFeeRateEventInstance
    extends TypedEventInstance<UpdateFeeRateEvent> {
    data_decoded: UpdateFeeRateEvent;
    type_arguments: [];
  }

  export namespace builder {
    export function addLiquidity<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::add_liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function addLiquidityFixCoin<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::add_liquidity_fix_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function addLiquidityPayAmount<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::add_liquidity_pay_amount",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function balances<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::balances",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowPositionInfo<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::borrow_position_info",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowTick<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::borrow_tick",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function calculateAndUpdateFee<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculate_and_update_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function calculateAndUpdatePoints<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculate_and_update_points",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function calculateAndUpdateReward<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculate_and_update_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function calculateAndUpdateRewards<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculate_and_update_rewards",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function calculateSwapResult<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        boolean | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureBool(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculate_swap_result",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function calculateSwapResultStepResults(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculate_swap_result_step_results",
        arguments: _args,
      });
    }
    export function calculatedSwapResultAfterSqrtPrice(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculated_swap_result_after_sqrt_price",
        arguments: _args,
      });
    }
    export function calculatedSwapResultAmountIn(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculated_swap_result_amount_in",
        arguments: _args,
      });
    }
    export function calculatedSwapResultAmountOut(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculated_swap_result_amount_out",
        arguments: _args,
      });
    }
    export function calculatedSwapResultFeeAmount(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculated_swap_result_fee_amount",
        arguments: _args,
      });
    }
    export function calculatedSwapResultIsExceed(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculated_swap_result_is_exceed",
        arguments: _args,
      });
    }
    export function calculatedSwapResultStepSwapResult(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculated_swap_result_step_swap_result",
        arguments: _args,
      });
    }
    export function calculatedSwapResultStepsLength(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::calculated_swap_result_steps_length",
        arguments: _args,
      });
    }
    export function closePosition<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        position.Position | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::close_position",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function collectFee<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::collect_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function collectProtocolFee<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::collect_protocol_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function collectReward<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        boolean | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::collect_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function currentSqrtPrice<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::current_sqrt_price",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function currentTickIndex<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::current_tick_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function feeRate<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::fee_rate",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function feesGrowthGlobal<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::fees_growth_global",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function fetchPositions<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::fetch_positions",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function fetchTicks<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::fetch_ticks",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function flashSwap<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        boolean | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::flash_swap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function flashSwapWithPartner<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        boolean | TransactionArgument,
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureBool(args[3], tx));
      _args.push(transactionArgumentOrPureBool(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::flash_swap_with_partner",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getAmountByLiquidity(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_amount_by_liquidity",
        arguments: _args,
      });
    }
    export function getFeeInTickRange<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_fee_in_tick_range",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getFeeRewardsPointsInTickRange<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_fee_rewards_points_in_tick_range",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getLiquidityFromAmount(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrPureBool(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_liquidity_from_amount",
        arguments: _args,
      });
    }
    export function getPointsInTickRange<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_points_in_tick_range",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getPositionFee<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_position_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getPositionPoints<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_position_points",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getPositionReward<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_position_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function getPositionRewards<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_position_rewards",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function getRewardsInTickRange<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::get_rewards_in_tick_range",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function index<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function initializeRewarder<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::initialize_rewarder",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function isPause<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::is_pause",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isPositionExist<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::is_position_exist",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function liquidity<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function new$<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        number | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function openPosition<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        number | TransactionArgument,
        number | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));
      _args.push(transactionArgumentOrPureU32(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::open_position",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function pause<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::pause",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function positionManager<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::position_manager",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function protocolFee<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::protocol_fee",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function refFeeAmount<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::ref_fee_amount",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function removeLiquidity<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::remove_liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function repayAddLiquidity<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        _0x2.balance.Balance<T1> | TransactionArgument,
        pool.AddLiquidityReceipt<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::repay_add_liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function repayFlashSwap<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        _0x2.balance.Balance<T1> | TransactionArgument,
        pool.FlashSwapReceipt<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::repay_flash_swap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function repayFlashSwapWithPartner<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
        _0x2.balance.Balance<T1> | TransactionArgument,
        pool.FlashSwapReceipt<T0, T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::repay_flash_swap_with_partner",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function rewarderManager<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::rewarder_manager",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function setDisplay<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::set_display",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function stepSwapResultAmountIn(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::step_swap_result_amount_in",
        arguments: _args,
      });
    }
    export function stepSwapResultAmountOut(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::step_swap_result_amount_out",
        arguments: _args,
      });
    }
    export function stepSwapResultCurrentLiquidity(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::step_swap_result_current_liquidity",
        arguments: _args,
      });
    }
    export function stepSwapResultCurrentSqrtPrice(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::step_swap_result_current_sqrt_price",
        arguments: _args,
      });
    }
    export function stepSwapResultFeeAmount(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::step_swap_result_fee_amount",
        arguments: _args,
      });
    }
    export function stepSwapResultRemainderAmount(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::step_swap_result_remainder_amount",
        arguments: _args,
      });
    }
    export function stepSwapResultTargetSqrtPrice(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::step_swap_result_target_sqrt_price",
        arguments: _args,
      });
    }
    export function swapPayAmount<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::swap_pay_amount",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function tickManager<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::tick_manager",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function tickSpacing<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::tick_spacing",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function unpause<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::unpause",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function updateEmission<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::update_emission",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function updateFeeRate<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::update_fee_rate",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function updatePositionUrl<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::update_position_url",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function url<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::pool::url",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addLiquidity<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string, bigint, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[pool.AddLiquidityReceipt<T0, T1>]>> {
      const tx = new Transaction();
      builder.addLiquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.AddLiquidityReceipt<T0, T1>]
      >(inspectRes);
    }
    export async function addLiquidityFixCoin<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string, bigint, boolean, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[pool.AddLiquidityReceipt<T0, T1>]>> {
      const tx = new Transaction();
      builder.addLiquidityFixCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.AddLiquidityReceipt<T0, T1>]
      >(inspectRes);
    }
    export async function addLiquidityPayAmount<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.addLiquidityPayAmount(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function balances<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string, string]>> {
      const tx = new Transaction();
      builder.balances(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [string, string]
      >(inspectRes);
    }
    export async function borrowPositionInfo<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowPositionInfo(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowTick<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowTick(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function calculateAndUpdateFee<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, _0x2.object$.ID],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.calculateAndUpdateFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function calculateAndUpdatePoints<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, _0x2.object$.ID, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calculateAndUpdatePoints(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calculateAndUpdateReward<
      T0 = any,
      T1 = any,
      T2 = any,
    >(
      client: SuiClient,
      args: [string, string, _0x2.object$.ID, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calculateAndUpdateReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calculateAndUpdateRewards<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, _0x2.object$.ID, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.calculateAndUpdateRewards(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function calculateSwapResult<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, boolean, boolean, bigint],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[pool.CalculatedSwapResult]>> {
      const tx = new Transaction();
      builder.calculateSwapResult(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.CalculatedSwapResult]
      >(inspectRes);
    }
    export async function calculateSwapResultStepResults(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.calculateSwapResultStepResults(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function calculatedSwapResultAfterSqrtPrice(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calculatedSwapResultAfterSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calculatedSwapResultAmountIn(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calculatedSwapResultAmountIn(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calculatedSwapResultAmountOut(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calculatedSwapResultAmountOut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calculatedSwapResultFeeAmount(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calculatedSwapResultFeeAmount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calculatedSwapResultIsExceed(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.calculatedSwapResultIsExceed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function calculatedSwapResultStepSwapResult(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.calculatedSwapResultStepSwapResult(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function calculatedSwapResultStepsLength(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calculatedSwapResultStepsLength(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function closePosition<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, position.Position],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.closePosition(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFee<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string, boolean],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.balance.Balance<T0>, _0x2.balance.Balance<T1>]
      >
    > {
      const tx = new Transaction();
      builder.collectFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.balance.Balance<T0>, _0x2.balance.Balance<T1>]
      >(inspectRes);
    }
    export async function collectProtocolFee<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.balance.Balance<T0>, _0x2.balance.Balance<T1>]
      >
    > {
      const tx = new Transaction();
      builder.collectProtocolFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.balance.Balance<T0>, _0x2.balance.Balance<T1>]
      >(inspectRes);
    }
    export async function collectReward<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, string, string, boolean, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.balance.Balance<T2>]>> {
      const tx = new Transaction();
      builder.collectReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.balance.Balance<T2>]
      >(inspectRes);
    }
    export async function currentSqrtPrice<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.currentSqrtPrice(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function currentTickIndex<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >
    > {
      const tx = new Transaction();
      builder.currentTickIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >(inspectRes);
    }
    export async function feeRate<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.feeRate(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function feesGrowthGlobal<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.feesGrowthGlobal(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function fetchPositions<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string[], bigint],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[position.PositionInfo[]]>> {
      const tx = new Transaction();
      builder.fetchPositions(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [position.PositionInfo[]]
      >(inspectRes);
    }
    export async function fetchTicks<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string[], bigint],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[tick.Tick[]]>> {
      const tx = new Transaction();
      builder.fetchTicks(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[tick.Tick[]]>(
        inspectRes,
      );
    }
    export async function flashSwap<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, boolean, boolean, bigint, bigint, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.balance.Balance<T0>,
          _0x2.balance.Balance<T1>,
          pool.FlashSwapReceipt<T0, T1>,
        ]
      >
    > {
      const tx = new Transaction();
      builder.flashSwap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.balance.Balance<T0>,
          _0x2.balance.Balance<T1>,
          pool.FlashSwapReceipt<T0, T1>,
        ]
      >(inspectRes);
    }
    export async function flashSwapWithPartner<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string, boolean, boolean, bigint, bigint, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.balance.Balance<T0>,
          _0x2.balance.Balance<T1>,
          pool.FlashSwapReceipt<T0, T1>,
        ]
      >
    > {
      const tx = new Transaction();
      builder.flashSwapWithPartner(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.balance.Balance<T0>,
          _0x2.balance.Balance<T1>,
          pool.FlashSwapReceipt<T0, T1>,
        ]
      >(inspectRes);
    }
    export async function getAmountByLiquidity(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        bigint,
        boolean,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getAmountByLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getFeeInTickRange<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getFeeInTickRange(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getFeeRewardsPointsInTickRange<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint[], bigint]>> {
      const tx = new Transaction();
      builder.getFeeRewardsPointsInTickRange(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint[], bigint]
      >(inspectRes);
    }
    export async function getLiquidityFromAmount(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        bigint,
        boolean,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint, bigint]>> {
      const tx = new Transaction();
      builder.getLiquidityFromAmount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint, bigint]
      >(inspectRes);
    }
    export async function getPointsInTickRange<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPointsInTickRange(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPositionFee<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getPositionFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getPositionPoints<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPositionPoints(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPositionReward<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPositionReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getPositionRewards<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.getPositionRewards(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function getRewardsInTickRange<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.getRewardsInTickRange(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function index<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.index(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function initializeRewarder<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.initializeRewarder(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function isPause<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isPause(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isPositionExist<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isPositionExist(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function liquidity<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.liquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function new$<T0 = any, T1 = any>(
      client: SuiClient,
      args: [number, bigint, bigint, string, bigint, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0, T1>]>> {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0, T1>]
      >(inspectRes);
    }
    export async function openPosition<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, number, number],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[position.Position]>> {
      const tx = new Transaction();
      builder.openPosition(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [position.Position]
      >(inspectRes);
    }
    export async function pause<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.pause(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function positionManager<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.positionManager(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function protocolFee<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.protocolFee(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function refFeeAmount<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.refFeeAmount(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function removeLiquidity<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string, bigint, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.balance.Balance<T0>, _0x2.balance.Balance<T1>]
      >
    > {
      const tx = new Transaction();
      builder.removeLiquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.balance.Balance<T0>, _0x2.balance.Balance<T1>]
      >(inspectRes);
    }
    export async function repayAddLiquidity<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        _0x2.balance.Balance<T0>,
        _0x2.balance.Balance<T1>,
        pool.AddLiquidityReceipt<T0, T1>,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.repayAddLiquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function repayFlashSwap<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        _0x2.balance.Balance<T0>,
        _0x2.balance.Balance<T1>,
        pool.FlashSwapReceipt<T0, T1>,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.repayFlashSwap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function repayFlashSwapWithPartner<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        _0x2.balance.Balance<T0>,
        _0x2.balance.Balance<T1>,
        pool.FlashSwapReceipt<T0, T1>,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.repayFlashSwapWithPartner(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function rewarderManager<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.rewarderManager(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function setDisplay<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string, string, string, string, string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setDisplay(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function stepSwapResultAmountIn(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.stepSwapResultAmountIn(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function stepSwapResultAmountOut(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.stepSwapResultAmountOut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function stepSwapResultCurrentLiquidity(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.stepSwapResultCurrentLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function stepSwapResultCurrentSqrtPrice(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.stepSwapResultCurrentSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function stepSwapResultFeeAmount(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.stepSwapResultFeeAmount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function stepSwapResultRemainderAmount(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.stepSwapResultRemainderAmount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function stepSwapResultTargetSqrtPrice(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.stepSwapResultTargetSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function swapPayAmount<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.swapPayAmount(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function tickManager<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.tickManager(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function tickSpacing<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.tickSpacing(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function unpause<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.unpause(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateEmission<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, string, bigint, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateEmission(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateFeeRate<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, bigint],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateFeeRate(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updatePositionUrl<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updatePositionUrl(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function url<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.url(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export class position extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("position", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): position {
    return new position({ ...position.DEFAULT_OPTIONS, ...options });
  }

  onEventPositionInfo(
    func: (event: position.PositionInfoInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position {
    this.onMoveEvent(func, { type: "position::PositionInfo" }, fetchConfig);
    return this;
  }

  onEventPositionReward(
    func: (event: position.PositionRewardInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): position {
    this.onMoveEvent(func, { type: "position::PositionReward" }, fetchConfig);
    return this;
  }
}

export namespace position {
  export interface POSITION {
    dummy_field: boolean;
  }

  export namespace POSITION {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::POSITION";

    const TYPE = new TypeDescriptor<POSITION>(POSITION.TYPE_QNAME);

    export function type(): TypeDescriptor<POSITION> {
      return TYPE.apply();
    }
  }

  export interface Position {
    id: _0x2.object$.UID;
    pool: _0x2.object$.ID;
    index: bigint;
    coin_type_a: _0x1.type_name.TypeName;
    coin_type_b: _0x1.type_name.TypeName;
    name: string;
    description: string;
    url: string;
    tick_lower_index: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    tick_upper_index: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    liquidity: bigint;
  }

  export namespace Position {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::Position";

    const TYPE = new TypeDescriptor<Position>(Position.TYPE_QNAME);

    export function type(): TypeDescriptor<Position> {
      return TYPE.apply();
    }
  }

  export interface PositionInfo {
    position_id: _0x2.object$.ID;
    liquidity: bigint;
    tick_lower_index: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    tick_upper_index: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    fee_growth_inside_a: bigint;
    fee_growth_inside_b: bigint;
    fee_owned_a: bigint;
    fee_owned_b: bigint;
    points_owned: bigint;
    points_growth_inside: bigint;
    rewards: position.PositionReward[];
  }

  export namespace PositionInfo {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::PositionInfo";

    const TYPE = new TypeDescriptor<PositionInfo>(PositionInfo.TYPE_QNAME);

    export function type(): TypeDescriptor<PositionInfo> {
      return TYPE.apply();
    }
  }

  export interface PositionInfoInstance
    extends TypedEventInstance<PositionInfo> {
    data_decoded: PositionInfo;
    type_arguments: [];
  }

  export interface PositionManager {
    tick_spacing: number;
    position_index: bigint;
    positions: _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.linked_table.LinkedTable<
      _0x2.object$.ID,
      position.PositionInfo
    >;
  }

  export namespace PositionManager {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::PositionManager";

    const TYPE = new TypeDescriptor<PositionManager>(
      PositionManager.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<PositionManager> {
      return TYPE.apply();
    }
  }

  export interface PositionReward {
    growth_inside: bigint;
    amount_owned: bigint;
  }

  export namespace PositionReward {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::PositionReward";

    const TYPE = new TypeDescriptor<PositionReward>(PositionReward.TYPE_QNAME);

    export function type(): TypeDescriptor<PositionReward> {
      return TYPE.apply();
    }
  }

  export interface PositionRewardInstance
    extends TypedEventInstance<PositionReward> {
    data_decoded: PositionReward;
    type_arguments: [];
  }

  export namespace builder {
    export function borrowPositionInfo(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::borrow_position_info",
        arguments: _args,
      });
    }
    export function checkPositionTickRange(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        number | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU32(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::check_position_tick_range",
        arguments: _args,
      });
    }
    export function closePosition(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        position.Position | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::close_position",
        arguments: _args,
      });
    }
    export function decreaseLiquidity(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::decrease_liquidity",
        arguments: _args,
      });
    }
    export function description(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::description",
        arguments: _args,
      });
    }
    export function fetchPositions(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::fetch_positions",
        arguments: _args,
      });
    }
    export function increaseLiquidity(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::increase_liquidity",
        arguments: _args,
      });
    }
    export function index(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::index",
        arguments: _args,
      });
    }
    export function infoFeeGrowthInside(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_fee_growth_inside",
        arguments: _args,
      });
    }
    export function infoFeeOwned(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_fee_owned",
        arguments: _args,
      });
    }
    export function infoLiquidity(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_liquidity",
        arguments: _args,
      });
    }
    export function infoPointsGrowthInside(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_points_growth_inside",
        arguments: _args,
      });
    }
    export function infoPointsOwned(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_points_owned",
        arguments: _args,
      });
    }
    export function infoPositionId(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_position_id",
        arguments: _args,
      });
    }
    export function infoRewards(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_rewards",
        arguments: _args,
      });
    }
    export function infoTickRange(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::info_tick_range",
        arguments: _args,
      });
    }
    export function initedRewardsCount(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::inited_rewards_count",
        arguments: _args,
      });
    }
    export function isEmpty(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::is_empty",
        arguments: _args,
      });
    }
    export function isPositionExist(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::is_position_exist",
        arguments: _args,
      });
    }
    export function liquidity(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::liquidity",
        arguments: _args,
      });
    }
    export function name(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::name",
        arguments: _args,
      });
    }
    export function new$(
      tx: Transaction,
      args: [number | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::new",
        arguments: _args,
      });
    }
    export function openPosition<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::open_position",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function poolId(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::pool_id",
        arguments: _args,
      });
    }
    export function resetFee(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::reset_fee",
        arguments: _args,
      });
    }
    export function resetRewarder(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::reset_rewarder",
        arguments: _args,
      });
    }
    export function rewardAmountOwned(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::reward_amount_owned",
        arguments: _args,
      });
    }
    export function rewardGrowthInside(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::reward_growth_inside",
        arguments: _args,
      });
    }
    export function rewardsAmountOwned(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::rewards_amount_owned",
        arguments: _args,
      });
    }
    export function setDisplay(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::set_display",
        arguments: _args,
      });
    }
    export function tickRange(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::tick_range",
        arguments: _args,
      });
    }
    export function updateAndResetFee(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::update_and_reset_fee",
        arguments: _args,
      });
    }
    export function updateAndResetRewards(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::update_and_reset_rewards",
        arguments: _args,
      });
    }
    export function updateFee(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::update_fee",
        arguments: _args,
      });
    }
    export function updatePoints(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::update_points",
        arguments: _args,
      });
    }
    export function updateRewards(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.object$.ID | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::update_rewards",
        arguments: _args,
      });
    }
    export function url(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::position::url",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function borrowPositionInfo(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowPositionInfo(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function checkPositionTickRange(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        number,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.checkPositionTickRange(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function closePosition(
      client: SuiClient,
      args: [string, position.Position],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.closePosition(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function decreaseLiquidity(
      client: SuiClient,
      args: [string, string, bigint, bigint, bigint, bigint, string[]],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.decreaseLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function description(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.description(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function fetchPositions(
      client: SuiClient,
      args: [string, string[], bigint],
    ): Promise<TypedDevInspectResults<[position.PositionInfo[]]>> {
      const tx = new Transaction();
      builder.fetchPositions(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [position.PositionInfo[]]
      >(inspectRes);
    }
    export async function increaseLiquidity(
      client: SuiClient,
      args: [string, string, bigint, bigint, bigint, bigint, string[]],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.increaseLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function index(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.index(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function infoFeeGrowthInside(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.infoFeeGrowthInside(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function infoFeeOwned(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.infoFeeOwned(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function infoLiquidity(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.infoLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function infoPointsGrowthInside(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.infoPointsGrowthInside(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function infoPointsOwned(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.infoPointsOwned(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function infoPositionId(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.infoPositionId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function infoRewards(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.infoRewards(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function infoTickRange(
      client: SuiClient,
      args: [string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >
    > {
      const tx = new Transaction();
      builder.infoTickRange(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >(inspectRes);
    }
    export async function initedRewardsCount(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.initedRewardsCount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function isEmpty(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isEmpty(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isPositionExist(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isPositionExist(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function liquidity(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.liquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function name(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.name(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function new$(
      client: SuiClient,
      args: [number],
    ): Promise<TypedDevInspectResults<[position.PositionManager]>> {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [position.PositionManager]
      >(inspectRes);
    }
    export async function openPosition<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        _0x2.object$.ID,
        bigint,
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[position.Position]>> {
      const tx = new Transaction();
      builder.openPosition(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [position.Position]
      >(inspectRes);
    }
    export async function poolId(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.poolId(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function resetFee(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.resetFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function resetRewarder(
      client: SuiClient,
      args: [string, _0x2.object$.ID, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.resetRewarder(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function rewardAmountOwned(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.rewardAmountOwned(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function rewardGrowthInside(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.rewardGrowthInside(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function rewardsAmountOwned(
      client: SuiClient,
      args: [string, _0x2.object$.ID],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.rewardsAmountOwned(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function setDisplay(
      client: SuiClient,
      args: [string, string, string, string, string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.setDisplay(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function tickRange(
      client: SuiClient,
      args: [string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >
    > {
      const tx = new Transaction();
      builder.tickRange(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >(inspectRes);
    }
    export async function updateAndResetFee(
      client: SuiClient,
      args: [string, _0x2.object$.ID, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.updateAndResetFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function updateAndResetRewards(
      client: SuiClient,
      args: [string, _0x2.object$.ID, string[], bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.updateAndResetRewards(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function updateFee(
      client: SuiClient,
      args: [string, _0x2.object$.ID, bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.updateFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function updatePoints(
      client: SuiClient,
      args: [string, _0x2.object$.ID, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.updatePoints(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function updateRewards(
      client: SuiClient,
      args: [string, _0x2.object$.ID, string[]],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.updateRewards(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function url(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.url(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export class rewarder extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("rewarder", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): rewarder {
    return new rewarder({ ...rewarder.DEFAULT_OPTIONS, ...options });
  }

  onEventDepositEvent(
    func: (event: rewarder.DepositEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): rewarder {
    this.onMoveEvent(func, { type: "rewarder::DepositEvent" }, fetchConfig);
    return this;
  }

  onEventEmergentWithdrawEvent(
    func: (
      event: rewarder.EmergentWithdrawEventInstance,
      ctx: SuiContext,
    ) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): rewarder {
    this.onMoveEvent(
      func,
      { type: "rewarder::EmergentWithdrawEvent" },
      fetchConfig,
    );
    return this;
  }

  onEventRewarder(
    func: (event: rewarder.RewarderInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): rewarder {
    this.onMoveEvent(func, { type: "rewarder::Rewarder" }, fetchConfig);
    return this;
  }

  onEventRewarderInitEvent(
    func: (event: rewarder.RewarderInitEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): rewarder {
    this.onMoveEvent(
      func,
      { type: "rewarder::RewarderInitEvent" },
      fetchConfig,
    );
    return this;
  }
}

export namespace rewarder {
  export interface DepositEvent {
    reward_type: _0x1.type_name.TypeName;
    deposit_amount: bigint;
    after_amount: bigint;
  }

  export namespace DepositEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::DepositEvent";

    const TYPE = new TypeDescriptor<DepositEvent>(DepositEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<DepositEvent> {
      return TYPE.apply();
    }
  }

  export interface DepositEventInstance
    extends TypedEventInstance<DepositEvent> {
    data_decoded: DepositEvent;
    type_arguments: [];
  }

  export interface EmergentWithdrawEvent {
    reward_type: _0x1.type_name.TypeName;
    withdraw_amount: bigint;
    after_amount: bigint;
  }

  export namespace EmergentWithdrawEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::EmergentWithdrawEvent";

    const TYPE = new TypeDescriptor<EmergentWithdrawEvent>(
      EmergentWithdrawEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<EmergentWithdrawEvent> {
      return TYPE.apply();
    }
  }

  export interface EmergentWithdrawEventInstance
    extends TypedEventInstance<EmergentWithdrawEvent> {
    data_decoded: EmergentWithdrawEvent;
    type_arguments: [];
  }

  export interface Rewarder {
    reward_coin: _0x1.type_name.TypeName;
    emissions_per_second: bigint;
    growth_global: bigint;
  }

  export namespace Rewarder {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::Rewarder";

    const TYPE = new TypeDescriptor<Rewarder>(Rewarder.TYPE_QNAME);

    export function type(): TypeDescriptor<Rewarder> {
      return TYPE.apply();
    }
  }

  export interface RewarderInstance extends TypedEventInstance<Rewarder> {
    data_decoded: Rewarder;
    type_arguments: [];
  }

  export interface RewarderGlobalVault {
    id: _0x2.object$.UID;
    balances: _0x2.bag.Bag;
  }

  export namespace RewarderGlobalVault {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::RewarderGlobalVault";

    const TYPE = new TypeDescriptor<RewarderGlobalVault>(
      RewarderGlobalVault.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RewarderGlobalVault> {
      return TYPE.apply();
    }
  }

  export interface RewarderInitEvent {
    global_vault_id: _0x2.object$.ID;
  }

  export namespace RewarderInitEvent {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::RewarderInitEvent";

    const TYPE = new TypeDescriptor<RewarderInitEvent>(
      RewarderInitEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RewarderInitEvent> {
      return TYPE.apply();
    }
  }

  export interface RewarderInitEventInstance
    extends TypedEventInstance<RewarderInitEvent> {
    data_decoded: RewarderInitEvent;
    type_arguments: [];
  }

  export interface RewarderManager {
    rewarders: rewarder.Rewarder[];
    points_released: bigint;
    points_growth_global: bigint;
    last_updated_time: bigint;
  }

  export namespace RewarderManager {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::RewarderManager";

    const TYPE = new TypeDescriptor<RewarderManager>(
      RewarderManager.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<RewarderManager> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addRewarder<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::add_rewarder",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function balanceOf<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::balance_of",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function balances(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::balances",
        arguments: _args,
      });
    }
    export function borrowMutRewarder<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::borrow_mut_rewarder",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowRewarder<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::borrow_rewarder",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function depositReward<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.balance.Balance<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::deposit_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function emergentWithdraw<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::emergent_withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function emissionsPerSecond(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::emissions_per_second",
        arguments: _args,
      });
    }
    export function growthGlobal(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::growth_global",
        arguments: _args,
      });
    }
    export function lastUpdateTime(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::last_update_time",
        arguments: _args,
      });
    }
    export function new$(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::new",
        arguments: _args,
      });
    }
    export function pointsGrowthGlobal(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::points_growth_global",
        arguments: _args,
      });
    }
    export function pointsReleased(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::points_released",
        arguments: _args,
      });
    }
    export function rewardCoin(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::reward_coin",
        arguments: _args,
      });
    }
    export function rewarderIndex<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::rewarder_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function rewarders(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::rewarders",
        arguments: _args,
      });
    }
    export function rewardsGrowthGlobal(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::rewards_growth_global",
        arguments: _args,
      });
    }
    export function settle(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::settle",
        arguments: _args,
      });
    }
    export function updateEmission<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::update_emission",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function withdrawReward<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::rewarder::withdraw_reward",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addRewarder<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addRewarder(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function balanceOf<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.balanceOf(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function balances(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.balances(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMutRewarder<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMutRewarder(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowRewarder<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowRewarder(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function depositReward<T0 = any>(
      client: SuiClient,
      args: [string, string, _0x2.balance.Balance<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.depositReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function emergentWithdraw<T0 = any>(
      client: SuiClient,
      args: [string, string, string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.balance.Balance<T0>]>> {
      const tx = new Transaction();
      builder.emergentWithdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.balance.Balance<T0>]
      >(inspectRes);
    }
    export async function emissionsPerSecond(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.emissionsPerSecond(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function growthGlobal(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.growthGlobal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function lastUpdateTime(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.lastUpdateTime(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function new$(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[rewarder.RewarderManager]>> {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [rewarder.RewarderManager]
      >(inspectRes);
    }
    export async function pointsGrowthGlobal(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.pointsGrowthGlobal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function pointsReleased(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.pointsReleased(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function rewardCoin(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[_0x1.type_name.TypeName]>> {
      const tx = new Transaction();
      builder.rewardCoin(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.type_name.TypeName]
      >(inspectRes);
    }
    export async function rewarderIndex<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<bigint>]>> {
      const tx = new Transaction();
      builder.rewarderIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<bigint>]
      >(inspectRes);
    }
    export async function rewarders(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[rewarder.Rewarder[]]>> {
      const tx = new Transaction();
      builder.rewarders(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [rewarder.Rewarder[]]
      >(inspectRes);
    }
    export async function rewardsGrowthGlobal(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.rewardsGrowthGlobal(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function settle(
      client: SuiClient,
      args: [string, bigint, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.settle(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function updateEmission<T0 = any>(
      client: SuiClient,
      args: [string, string, bigint, bigint, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateEmission(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function withdrawReward<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.balance.Balance<T0>]>> {
      const tx = new Transaction();
      builder.withdrawReward(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.balance.Balance<T0>]
      >(inspectRes);
    }
  }
}

export class tick extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("tick", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): tick {
    return new tick({ ...tick.DEFAULT_OPTIONS, ...options });
  }

  onEventTick(
    func: (event: tick.TickInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): tick {
    this.onMoveEvent(func, { type: "tick::Tick" }, fetchConfig);
    return this;
  }
}

export namespace tick {
  export interface Tick {
    index: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32;
    sqrt_price: bigint;
    liquidity_net: _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i128.I128;
    liquidity_gross: bigint;
    fee_growth_outside_a: bigint;
    fee_growth_outside_b: bigint;
    points_growth_outside: bigint;
    rewards_growth_outside: bigint[];
  }

  export namespace Tick {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::Tick";

    const TYPE = new TypeDescriptor<Tick>(Tick.TYPE_QNAME);

    export function type(): TypeDescriptor<Tick> {
      return TYPE.apply();
    }
  }

  export interface TickInstance extends TypedEventInstance<Tick> {
    data_decoded: Tick;
    type_arguments: [];
  }

  export interface TickManager {
    tick_spacing: number;
    ticks: _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.skip_list.SkipList<tick.Tick>;
  }

  export namespace TickManager {
    export const TYPE_QNAME =
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::TickManager";

    const TYPE = new TypeDescriptor<TickManager>(TickManager.TYPE_QNAME);

    export function type(): TypeDescriptor<TickManager> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function borrowTick(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::borrow_tick",
        arguments: _args,
      });
    }
    export function borrowTickForSwap(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::borrow_tick_for_swap",
        arguments: _args,
      });
    }
    export function crossBySwap(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        boolean | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::cross_by_swap",
        arguments: _args,
      });
    }
    export function decreaseLiquidity(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrPureU128(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::decrease_liquidity",
        arguments: _args,
      });
    }
    export function feeGrowthOutside(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::fee_growth_outside",
        arguments: _args,
      });
    }
    export function fetchTicks(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::fetch_ticks",
        arguments: _args,
      });
    }
    export function firstScoreForSwap(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        boolean | TransactionArgument,
      ],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::first_score_for_swap",
        arguments: _args,
      });
    }
    export function getFeeInRange(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        _0x1.option.Option<tick.Tick> | TransactionArgument,
        _0x1.option.Option<tick.Tick> | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::get_fee_in_range",
        arguments: _args,
      });
    }
    export function getPointsInRange(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        _0x1.option.Option<tick.Tick> | TransactionArgument,
        _0x1.option.Option<tick.Tick> | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::get_points_in_range",
        arguments: _args,
      });
    }
    export function getRewardGrowthOutside(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::get_reward_growth_outside",
        arguments: _args,
      });
    }
    export function getRewardsInRange(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x1.option.Option<tick.Tick> | TransactionArgument,
        _0x1.option.Option<tick.Tick> | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrVec(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::get_rewards_in_range",
        arguments: _args,
      });
    }
    export function increaseLiquidity(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU128(args[4], tx));
      _args.push(transactionArgumentOrPureU128(args[5], tx));
      _args.push(transactionArgumentOrPureU128(args[6], tx));
      _args.push(transactionArgumentOrPureU128(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::increase_liquidity",
        arguments: _args,
      });
    }
    export function index(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::index",
        arguments: _args,
      });
    }
    export function liquidityGross(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::liquidity_gross",
        arguments: _args,
      });
    }
    export function liquidityNet(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::liquidity_net",
        arguments: _args,
      });
    }
    export function new$(
      tx: Transaction,
      args: [number | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU32(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::new",
        arguments: _args,
      });
    }
    export function pointsGrowthOutside(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::points_growth_outside",
        arguments: _args,
      });
    }
    export function rewardsGrowthOutside(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::rewards_growth_outside",
        arguments: _args,
      });
    }
    export function sqrtPrice(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::sqrt_price",
        arguments: _args,
      });
    }
    export function tickSpacing(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::tick_spacing",
        arguments: _args,
      });
    }
    export function tryBorrowTick(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick::try_borrow_tick",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function borrowTick(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowTickForSwap(
      client: SuiClient,
      args: [string, bigint, boolean],
    ): Promise<
      TypedDevInspectResults<
        [
          string,
          _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.option_u64.OptionU64,
        ]
      >
    > {
      const tx = new Transaction();
      builder.borrowTickForSwap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          string,
          _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.option_u64.OptionU64,
        ]
      >(inspectRes);
    }
    export async function crossBySwap(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        boolean,
        bigint,
        bigint,
        bigint,
        bigint,
        string[],
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.crossBySwap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function decreaseLiquidity(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        bigint,
        bigint,
        bigint,
        string[],
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.decreaseLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function feeGrowthOutside(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.feeGrowthOutside(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function fetchTicks(
      client: SuiClient,
      args: [string, string[], bigint],
    ): Promise<TypedDevInspectResults<[tick.Tick[]]>> {
      const tx = new Transaction();
      builder.fetchTicks(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[tick.Tick[]]>(
        inspectRes,
      );
    }
    export async function firstScoreForSwap(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        boolean,
      ],
    ): Promise<
      TypedDevInspectResults<
        [
          _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.option_u64.OptionU64,
        ]
      >
    > {
      const tx = new Transaction();
      builder.firstScoreForSwap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.option_u64.OptionU64,
        ]
      >(inspectRes);
    }
    export async function getFeeInRange(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        bigint,
        _0x1.option.Option<tick.Tick>,
        _0x1.option.Option<tick.Tick>,
      ],
    ): Promise<TypedDevInspectResults<[bigint, bigint]>> {
      const tx = new Transaction();
      builder.getFeeInRange(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint]
      >(inspectRes);
    }
    export async function getPointsInRange(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        _0x1.option.Option<tick.Tick>,
        _0x1.option.Option<tick.Tick>,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getPointsInRange(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getRewardGrowthOutside(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getRewardGrowthOutside(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getRewardsInRange(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        string[],
        _0x1.option.Option<tick.Tick>,
        _0x1.option.Option<tick.Tick>,
      ],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.getRewardsInRange(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function increaseLiquidity(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        bigint,
        bigint,
        bigint,
        bigint,
        string[],
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.increaseLiquidity(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function index(
      client: SuiClient,
      args: [string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >
    > {
      const tx = new Transaction();
      builder.index(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >(inspectRes);
    }
    export async function liquidityGross(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.liquidityGross(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function liquidityNet(
      client: SuiClient,
      args: [string],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i128.I128,
        ]
      >
    > {
      const tx = new Transaction();
      builder.liquidityNet(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i128.I128,
        ]
      >(inspectRes);
    }
    export async function new$(
      client: SuiClient,
      args: [number, bigint],
    ): Promise<TypedDevInspectResults<[tick.TickManager]>> {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [tick.TickManager]
      >(inspectRes);
    }
    export async function pointsGrowthOutside(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.pointsGrowthOutside(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function rewardsGrowthOutside(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.rewardsGrowthOutside(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function sqrtPrice(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.sqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function tickSpacing(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.tickSpacing(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function tryBorrowTick(
      client: SuiClient,
      args: [
        string,
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<tick.Tick>]>> {
      const tx = new Transaction();
      builder.tryBorrowTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<tick.Tick>]
      >(inspectRes);
    }
  }
}

export namespace tick_math {
  export namespace builder {
    export function getSqrtPriceAtTick(
      tx: Transaction,
      args: [
        | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
        | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::get_sqrt_price_at_tick",
        arguments: _args,
      });
    }
    export function getTickAtSqrtPrice(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU128(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::get_tick_at_sqrt_price",
        arguments: _args,
      });
    }
    export function isValidIndex(
      tx: Transaction,
      args: [
        (
          | _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32
          | TransactionArgument
        ),
        number | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU32(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::is_valid_index",
        arguments: _args,
      });
    }
    export function maxSqrtPrice(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::max_sqrt_price",
        arguments: _args,
      });
    }
    export function maxTick(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::max_tick",
        arguments: _args,
      });
    }
    export function minSqrtPrice(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::min_sqrt_price",
        arguments: _args,
      });
    }
    export function minTick(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::min_tick",
        arguments: _args,
      });
    }
    export function tickBound(
      tx: Transaction,
      args: [],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::tick_math::tick_bound",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function getSqrtPriceAtTick(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.getSqrtPriceAtTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function getTickAtSqrtPrice(
      client: SuiClient,
      args: [bigint],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >
    > {
      const tx = new Transaction();
      builder.getTickAtSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >(inspectRes);
    }
    export async function isValidIndex(
      client: SuiClient,
      args: [
        _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        number,
      ],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isValidIndex(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function maxSqrtPrice(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.maxSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function maxTick(
      client: SuiClient,
      args: [],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >
    > {
      const tx = new Transaction();
      builder.maxTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >(inspectRes);
    }
    export async function minSqrtPrice(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.minSqrtPrice(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function minTick(
      client: SuiClient,
      args: [],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >
    > {
      const tx = new Transaction();
      builder.minTick(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.i32.I32,
        ]
      >(inspectRes);
    }
    export async function tickBound(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.tickBound(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
  }
}

export namespace utils {
  export namespace builder {
    export function str(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb::utils::str",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function str(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.str(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

const MODULES = JSON.parse(
  '{"acl":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"acl","friends":[],"structs":{"ACL":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"permissions","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":["Address","U128"]}}}]},"Member":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"address","type":"Address"},{"name":"permission","type":"U128"}]}},"exposedFunctions":{"add_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}},"Address","U8"],"return":[]},"get_members":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"Member","typeArguments":[]}}}]},"get_permission":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}},"Address"],"return":["U128"]},"has_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}},"Address","U8"],"return":["Bool"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}]},"remove_member":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}},"Address"],"return":[]},"remove_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}},"Address","U8"],"return":[]},"set_roles":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}},"Address","U128"],"return":[]}}},"clmm_math":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"clmm_math","friends":[],"structs":{},"exposedFunctions":{"compute_swap_step":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","U64","U64","Bool","Bool"],"return":["U64","U64","U128","U64"]},"fee_rate_denominator":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"get_amount_by_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128","U128","Bool"],"return":["U64","U64"]},"get_delta_a":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool"],"return":["U64"]},"get_delta_b":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool"],"return":["U64"]},"get_delta_down_from_output":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool"],"return":["U256"]},"get_delta_up_from_input":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U128","Bool"],"return":["U256"]},"get_liquidity_by_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128","U64","Bool"],"return":["U128","U64","U64"]},"get_liquidity_from_a":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U64","Bool"],"return":["U128"]},"get_liquidity_from_b":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U64","Bool"],"return":["U128"]},"get_next_sqrt_price_a_up":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U64","Bool"],"return":["U128"]},"get_next_sqrt_price_b_down":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U64","Bool"],"return":["U128"]},"get_next_sqrt_price_from_input":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U64","Bool"],"return":["U128"]},"get_next_sqrt_price_from_output":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128","U128","U64","Bool"],"return":["U128"]}}},"config":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"config","friends":[],"structs":{"AddFeeTierEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"tick_spacing","type":"U32"},{"name":"fee_rate","type":"U64"}]},"AddRoleEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"member","type":"Address"},{"name":"role","type":"U8"}]},"AdminCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"DeleteFeeTierEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"tick_spacing","type":"U32"},{"name":"fee_rate","type":"U64"}]},"FeeTier":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"tick_spacing","type":"U32"},{"name":"fee_rate","type":"U64"}]},"GlobalConfig":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"protocol_fee_rate","type":"U64"},{"name":"fee_tiers","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["U32",{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"FeeTier","typeArguments":[]}}]}}},{"name":"acl","type":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}},{"name":"package_version","type":"U64"}]},"InitConfigEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"admin_cap_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"global_config_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"ProtocolFeeClaimCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"RemoveMemberEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"member","type":"Address"}]},"RemoveRoleEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"member","type":"Address"},{"name":"role","type":"U8"}]},"SetPackageVersion":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"new_version","type":"U64"},{"name":"old_version","type":"U64"}]},"SetRolesEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"member","type":"Address"},{"name":"roles","type":"U128"}]},"UpdateFeeRateEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"old_fee_rate","type":"U64"},{"name":"new_fee_rate","type":"U64"}]},"UpdateFeeTierEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"tick_spacing","type":"U32"},{"name":"old_fee_rate","type":"U64"},{"name":"new_fee_rate","type":"U64"}]}},"exposedFunctions":{"acl":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"ACL","typeArguments":[]}}}]},"add_fee_tier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"U32","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"add_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"AdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address","U8"],"return":[]},"check_fee_tier_manager_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address"],"return":[]},"check_partner_manager_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address"],"return":[]},"check_pool_manager_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address"],"return":[]},"check_protocol_fee_claim_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address"],"return":[]},"check_rewarder_manager_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address"],"return":[]},"checked_package_version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}}],"return":[]},"delete_fee_tier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"U32",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"FeeTier","typeArguments":[]}}}],"return":["U64"]},"fee_tiers":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":["U32",{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"FeeTier","typeArguments":[]}}]}}}]},"get_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U32",{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}}],"return":["U64"]},"get_members":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"acl","name":"Member","typeArguments":[]}}}]},"get_protocol_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}}],"return":["U64"]},"max_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"max_protocol_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U64"]},"protocol_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}}],"return":["U64"]},"remove_member":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"AdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address"],"return":[]},"remove_role":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"AdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address","U8"],"return":[]},"set_roles":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"AdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"Address","U128"],"return":[]},"tick_spacing":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"FeeTier","typeArguments":[]}}}],"return":["U32"]},"update_fee_tier":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"U32","U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_package_version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"AdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"U64"],"return":[]},"update_protocol_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"factory":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"factory","friends":[],"structs":{"CreatePoolEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"coin_type_a","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"coin_type_b","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"tick_spacing","type":"U32"}]},"InitFactoryEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pools_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"PoolSimpleInfo":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"pool_key","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"coin_type_a","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"coin_type_b","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"tick_spacing","type":"U32"}]},"Pools":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"list","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"PoolSimpleInfo","typeArguments":[]}}]}}},{"name":"index","type":"U64"}]}},"exposedFunctions":{"coin_types":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"PoolSimpleInfo","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}},{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]},"create_pool":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"Pools","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"U32","U128",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"create_pool_with_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"Pools","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},"U32","U128",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U32","U32",{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},"U64","U64","Bool",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}]},"fetch_pools":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"Pools","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"U64"],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"PoolSimpleInfo","typeArguments":[]}}}]},"index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"Pools","typeArguments":[]}}}],"return":["U64"]},"new_pool_key":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U32"],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"pool_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"PoolSimpleInfo","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"pool_key":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"PoolSimpleInfo","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"pool_simple_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"Pools","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"PoolSimpleInfo","typeArguments":[]}}}]},"tick_spacing":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"factory","name":"PoolSimpleInfo","typeArguments":[]}}}],"return":["U32"]}}},"partner":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"partner","friends":[],"structs":{"ClaimRefFeeEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"partner_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount","type":"U64"},{"name":"type_name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"CreatePartnerEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"recipient","type":"Address"},{"name":"partner_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"partner_cap_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"ref_fee_rate","type":"U64"},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"start_time","type":"U64"},{"name":"end_time","type":"U64"}]},"InitPartnerEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"partners_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Partner":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"ref_fee_rate","type":"U64"},{"name":"start_time","type":"U64"},{"name":"end_time","type":"U64"},{"name":"balances","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"PartnerCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"partner_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"Partners":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"partners","type":{"Struct":{"address":"0x2","module":"vec_map","name":"VecMap","typeArguments":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}}]},"ReceiveRefFeeEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"partner_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount","type":"U64"},{"name":"type_name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"UpdateRefFeeRateEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"partner_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"old_fee_rate","type":"U64"},{"name":"new_fee_rate","type":"U64"}]},"UpdateTimeRangeEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"partner_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"start_time","type":"U64"},{"name":"end_time","type":"U64"}]}},"exposedFunctions":{"balances":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"claim_ref_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"PartnerCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"create_partner":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partners","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64","U64","U64","Address",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"current_ref_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}},"U64"],"return":["U64"]},"end_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}}],"return":["U64"]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"receive_ref_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"ref_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}}],"return":["U64"]},"start_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}}],"return":["U64"]},"update_ref_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_time_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}},"U64","U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"pool":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"pool","friends":[{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"factory"}],"structs":{"AddLiquidityEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"position","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"tick_lower","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"liquidity","type":"U128"},{"name":"after_liquidity","type":"U128"},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"}]},"AddLiquidityReceipt":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"}]},"AddRewarderEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"rewarder_type","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}}]},"CalculatedSwapResult":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"amount_in","type":"U64"},{"name":"amount_out","type":"U64"},{"name":"fee_amount","type":"U64"},{"name":"fee_rate","type":"U64"},{"name":"after_sqrt_price","type":"U128"},{"name":"is_exceed","type":"Bool"},{"name":"step_results","type":{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}}]},"ClosePositionEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"position","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"CollectFeeEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"position","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"}]},"CollectProtocolFeeEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"}]},"CollectRewardEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"position","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount","type":"U64"}]},"FlashSwapReceipt":{"abilities":{"abilities":[]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"a2b","type":"Bool"},{"name":"partner_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"pay_amount","type":"U64"},{"name":"ref_fee_amount","type":"U64"}]},"OpenPositionEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"tick_lower","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"position","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"POOL":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"Pool":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true},{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"coin_a","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"coin_b","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}}},{"name":"tick_spacing","type":"U32"},{"name":"fee_rate","type":"U64"},{"name":"liquidity","type":"U128"},{"name":"current_sqrt_price","type":"U128"},{"name":"current_tick_index","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"fee_growth_global_a","type":"U128"},{"name":"fee_growth_global_b","type":"U128"},{"name":"fee_protocol_coin_a","type":"U64"},{"name":"fee_protocol_coin_b","type":"U64"},{"name":"tick_manager","type":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"name":"rewarder_manager","type":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}},{"name":"position_manager","type":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"name":"is_pause","type":"Bool"},{"name":"index","type":"U64"},{"name":"url","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}}]},"RemoveLiquidityEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"position","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"tick_lower","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"liquidity","type":"U128"},{"name":"after_liquidity","type":"U128"},{"name":"amount_a","type":"U64"},{"name":"amount_b","type":"U64"}]},"SwapEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"atob","type":"Bool"},{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"partner","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"amount_in","type":"U64"},{"name":"amount_out","type":"U64"},{"name":"ref_amount","type":"U64"},{"name":"fee_amount","type":"U64"},{"name":"vault_a_amount","type":"U64"},{"name":"vault_b_amount","type":"U64"},{"name":"before_sqrt_price","type":"U128"},{"name":"after_sqrt_price","type":"U128"},{"name":"steps","type":"U64"}]},"SwapResult":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"amount_in","type":"U64"},{"name":"amount_out","type":"U64"},{"name":"fee_amount","type":"U64"},{"name":"ref_fee_amount","type":"U64"},{"name":"steps","type":"U64"}]},"SwapStepResult":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"current_sqrt_price","type":"U128"},{"name":"target_sqrt_price","type":"U128"},{"name":"current_liquidity","type":"U128"},{"name":"amount_in","type":"U64"},{"name":"amount_out","type":"U64"},{"name":"fee_amount","type":"U64"},{"name":"remainder_amount","type":"U64"}]},"UpdateEmissionEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"rewarder_type","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"emissions_per_second","type":"U128"}]},"UpdateFeeRateEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"old_fee_rate","type":"U64"},{"name":"new_fee_rate","type":"U64"}]}},"exposedFunctions":{"add_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}},"U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"AddLiquidityReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"add_liquidity_fix_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}},"U64","Bool",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"AddLiquidityReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"add_liquidity_pay_amount":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"AddLiquidityReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64","U64"]},"balances":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}}}]},"borrow_position_info":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}]},"borrow_tick":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}]},"calculate_and_update_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["U64","U64"]},"calculate_and_update_points":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U128"]},"calculate_and_update_reward":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":["U64"]},"calculate_and_update_rewards":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Vector":"U64"}]},"calculate_swap_result":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Bool","Bool","U64"],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}]},"calculate_swap_result_step_results":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}}],"return":[{"Reference":{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}}]},"calculated_swap_result_after_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}}],"return":["U128"]},"calculated_swap_result_amount_in":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}}],"return":["U64"]},"calculated_swap_result_amount_out":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}}],"return":["U64"]},"calculated_swap_result_fee_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}}],"return":["U64"]},"calculated_swap_result_is_exceed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}}],"return":["Bool"]},"calculated_swap_result_step_swap_result":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}},"U64"],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}]},"calculated_swap_result_steps_length":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"CalculatedSwapResult","typeArguments":[]}}}],"return":["U64"]},"close_position":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}],"return":[]},"collect_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}},"Bool"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}}]},"collect_protocol_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}}]},"collect_reward":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}},"Bool",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":2}]}}]},"current_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U128"]},"current_tick_index":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"fees_growth_global":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U128","U128"]},"fetch_positions":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"U64"],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}]},"fetch_ticks":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Vector":"U32"},"U64"],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}]},"flash_swap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"Bool","Bool","U64","U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"FlashSwapReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"flash_swap_with_partner":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}},"Bool","Bool","U64","U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"FlashSwapReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"get_amount_by_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128","U128","Bool"],"return":["U64","U64"]},"get_fee_in_tick_range":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U128","U128"]},"get_fee_rewards_points_in_tick_range":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U128","U128",{"Vector":"U128"},"U128"]},"get_liquidity_from_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128","U64","Bool"],"return":["U128","U64","U64"]},"get_points_in_tick_range":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U128"]},"get_position_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["U64","U64"]},"get_position_points":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["U128"]},"get_position_reward":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["U64"]},"get_position_rewards":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Vector":"U64"}]},"get_rewards_in_tick_range":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Vector":"U128"}]},"index":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"initialize_rewarder":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"is_pause":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"is_position_exist":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U128"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":["U32","U128","U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"open_position":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U32","U32",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}]},"pause":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"position_manager":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}}]},"protocol_fee":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64","U64"]},"ref_fee_amount":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"FlashSwapReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"remove_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}},"U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}}]},"repay_add_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"AddLiquidityReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"repay_flash_swap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"FlashSwapReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"repay_flash_swap_with_partner":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"partner","name":"Partner","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"FlashSwapReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"rewarder_manager":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}]},"set_display":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"step_swap_result_amount_in":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}],"return":["U64"]},"step_swap_result_amount_out":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}],"return":["U64"]},"step_swap_result_current_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}],"return":["U128"]},"step_swap_result_current_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}],"return":["U128"]},"step_swap_result_fee_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}],"return":["U64"]},"step_swap_result_remainder_amount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}],"return":["U64"]},"step_swap_result_target_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"SwapStepResult","typeArguments":[]}}}],"return":["U128"]},"swap_pay_amount":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"FlashSwapReceipt","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"tick_manager":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}}]},"tick_spacing":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U32"]},"unpause":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_emission":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}},"U128",{"Reference":{"Struct":{"address":"0x2","module":"clock","name":"Clock","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_fee_rate":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},"U64",{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"update_position_url":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Reference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"url":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},"position":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"position","friends":[{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"pool"}],"structs":{"POSITION":{"abilities":{"abilities":["Drop"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"Position":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"pool","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"index","type":"U64"},{"name":"coin_type_a","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"coin_type_b","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"description","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"url","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"tick_lower_index","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper_index","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"liquidity","type":"U128"}]},"PositionInfo":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"position_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"liquidity","type":"U128"},{"name":"tick_lower_index","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"tick_upper_index","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"fee_growth_inside_a","type":"U128"},{"name":"fee_growth_inside_b","type":"U128"},{"name":"fee_owned_a","type":"U64"},{"name":"fee_owned_b","type":"U64"},{"name":"points_owned","type":"U128"},{"name":"points_growth_inside","type":"U128"},{"name":"rewards","type":{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionReward","typeArguments":[]}}}}]},"PositionManager":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"tick_spacing","type":"U32"},{"name":"position_index","type":"U64"},{"name":"positions","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}]}}}]},"PositionReward":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"growth_inside","type":"U128"},{"name":"amount_owned","type":"U64"}]}},"exposedFunctions":{"borrow_position_info":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}]},"check_position_tick_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U32"],"return":[]},"close_position":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}],"return":[]},"decrease_liquidity":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}},"U128","U128","U128","U128",{"Vector":"U128"}],"return":["U128"]},"description":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"fetch_positions":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},"U64"],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}]},"increase_liquidity":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}},"U128","U128","U128","U128",{"Vector":"U128"}],"return":["U128"]},"index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}}],"return":["U64"]},"info_fee_growth_inside":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":["U128","U128"]},"info_fee_owned":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":["U64","U64"]},"info_liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":["U128"]},"info_points_growth_inside":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":["U128"]},"info_points_owned":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":["U128"]},"info_position_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"info_rewards":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":[{"Reference":{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionReward","typeArguments":[]}}}}]},"info_tick_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"inited_rewards_count":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["U64"]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionInfo","typeArguments":[]}}}],"return":["Bool"]},"is_position_exist":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["Bool"]},"liquidity":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}}],"return":["U128"]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U32",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}]},"open_position":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64",{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}]},"pool_id":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"reset_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":["U64","U64"]},"reset_rewarder":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U64"],"return":["U64"]},"reward_amount_owned":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionReward","typeArguments":[]}}}],"return":["U64"]},"reward_growth_inside":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionReward","typeArguments":[]}}}],"return":["U128"]},"rewards_amount_owned":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}],"return":[{"Vector":"U64"}]},"set_display":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"package","name":"Publisher","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"tick_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"update_and_reset_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U128","U128"],"return":["U64","U64"]},"update_and_reset_rewards":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Vector":"U128"},"U64"],"return":["U64"]},"update_fee":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U128","U128"],"return":["U64","U64"]},"update_points":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},"U128"],"return":["U128"]},"update_rewards":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"PositionManager","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}},{"Vector":"U128"}],"return":[{"Vector":"U64"}]},"url":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"position","name":"Position","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}},"rewarder":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"rewarder","friends":[{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"pool"}],"structs":{"DepositEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"reward_type","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"deposit_amount","type":"U64"},{"name":"after_amount","type":"U64"}]},"EmergentWithdrawEvent":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"reward_type","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"withdraw_amount","type":"U64"},{"name":"after_amount","type":"U64"}]},"Rewarder":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"reward_coin","type":{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}},{"name":"emissions_per_second","type":"U128"},{"name":"growth_global","type":"U128"}]},"RewarderGlobalVault":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"balances","type":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"RewarderInitEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"global_vault_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}}]},"RewarderManager":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"rewarders","type":{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"Rewarder","typeArguments":[]}}}},{"name":"points_released","type":"U128"},{"name":"points_growth_global","type":"U128"},{"name":"last_updated_time","type":"U64"}]}},"exposedFunctions":{"add_rewarder":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":[]},"balance_of":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}}],"return":["U64"]},"balances":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"bag","name":"Bag","typeArguments":[]}}}]},"borrow_mut_rewarder":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"Rewarder","typeArguments":[]}}}]},"borrow_rewarder":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"Rewarder","typeArguments":[]}}}]},"deposit_reward":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}],"return":["U64"]},"emergent_withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"AdminCap","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"config","name":"GlobalConfig","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]},"emissions_per_second":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"Rewarder","typeArguments":[]}}}],"return":["U128"]},"growth_global":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"Rewarder","typeArguments":[]}}}],"return":["U128"]},"last_update_time":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":["U64"]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}]},"points_growth_global":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":["U128"]},"points_released":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":["U128"]},"reward_coin":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"Rewarder","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"type_name","name":"TypeName","typeArguments":[]}}]},"rewarder_index":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}}]},"rewarders":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"Rewarder","typeArguments":[]}}}]},"rewards_growth_global":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}}],"return":[{"Vector":"U128"}]},"settle":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}},"U128","U64"],"return":[]},"update_emission":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderManager","typeArguments":[]}}},"U128","U128","U64"],"return":[]},"withdraw_reward":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"rewarder","name":"RewarderGlobalVault","typeArguments":[]}}},"U64"],"return":[{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}]}}},"tick":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"tick","friends":[{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"pool"}],"structs":{"Tick":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"index","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}},{"name":"sqrt_price","type":"U128"},{"name":"liquidity_net","type":{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}},{"name":"liquidity_gross","type":"U128"},{"name":"fee_growth_outside_a","type":"U128"},{"name":"fee_growth_outside_b","type":"U128"},{"name":"points_growth_outside","type":"U128"},{"name":"rewards_growth_outside","type":{"Vector":"U128"}}]},"TickManager":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"tick_spacing","type":"U32"},{"name":"ticks","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}}}]}},"exposedFunctions":{"borrow_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}]},"borrow_tick_for_swap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},"U64","Bool"],"return":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}},{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"cross_by_swap":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"Bool","U128","U128","U128","U128",{"Vector":"U128"}],"return":["U128"]},"decrease_liquidity":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128","U128","U128","U128",{"Vector":"U128"}],"return":[]},"fee_growth_outside":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}],"return":["U128","U128"]},"fetch_ticks":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"Vector":"U32"},"U64"],"return":[{"Vector":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}]},"first_score_for_swap":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"Bool"],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"get_fee_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128","U128",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}}],"return":["U128","U128"]},"get_points_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}}],"return":["U128"]},"get_reward_growth_outside":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}},"U64"],"return":["U128"]},"get_rewards_in_range":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Vector":"U128"},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}}],"return":[{"Vector":"U128"}]},"increase_liquidity":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U128","U128","U128","U128",{"Vector":"U128"}],"return":[]},"index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"liquidity_gross":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}],"return":["U128"]},"liquidity_net":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i128","name":"I128","typeArguments":[]}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":["U32","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}]},"points_growth_outside":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}],"return":["U128"]},"rewards_growth_outside":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}],"return":[{"Reference":{"Vector":"U128"}}]},"sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}}],"return":["U128"]},"tick_spacing":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}}],"return":["U32"]},"try_borrow_tick":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"TickManager","typeArguments":[]}}},{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Struct":{"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","module":"tick","name":"Tick","typeArguments":[]}}]}}]}}},"tick_math":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"tick_math","friends":[],"structs":{},"exposedFunctions":{"get_sqrt_price_at_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}],"return":["U128"]},"get_tick_at_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U128"],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"is_valid_index":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}},"U32"],"return":["Bool"]},"max_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U128"]},"max_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"min_sqrt_price":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U128"]},"min_tick":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57","module":"i32","name":"I32","typeArguments":[]}}]},"tick_bound":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":["U32"]}}},"utils":{"fileFormatVersion":6,"address":"0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb","name":"utils","friends":[],"structs":{},"exposedFunctions":{"str":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa.loadAllTypes(
    coder,
  );
  _0x2.loadAllTypes(coder);
  _0x714a63a0dba6da4f017b42d5d0fb78867f18bcde904868e51d951a5a6f5b7f57.loadAllTypes(
    coder,
  );
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x1eabed72c53feb3805120a081dc15963c204dc8d091542592abaf7a35689b2fb",
    );
  }
}

loadAllTypes(defaultMoveCoder(SuiNetwork.MAIN_NET));
