/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa, original address 0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@sentio/sdk/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import { CallFilter, MoveFetchConfig } from "@sentio/sdk/move";
import {
  SuiBindOptions,
  SuiBaseProcessor,
  SuiNetwork,
  TypedFunctionPayload,
  SuiContext,
} from "@sentio/sdk/sui";

import * as _0x2 from "@sentio/sdk/sui/builtin/0x2";
import * as _0x1 from "@sentio/sdk/sui/builtin/0x1";

export namespace linked_table {
  export interface LinkedTable<T0, T1> {
    id: _0x2.object$.UID;
    head: _0x1.option.Option<T0>;
    tail: _0x1.option.Option<T0>;
    size: bigint;
  }

  export namespace LinkedTable {
    export const TYPE_QNAME =
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::LinkedTable";

    const TYPE = new TypeDescriptor<LinkedTable<any, any>>(
      LinkedTable.TYPE_QNAME,
    );

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<LinkedTable<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export interface Node<T0, T1> {
    prev: _0x1.option.Option<T0>;
    next: _0x1.option.Option<T0>;
    value: T1;
  }

  export namespace Node {
    export const TYPE_QNAME =
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::Node";

    const TYPE = new TypeDescriptor<Node<any, any>>(Node.TYPE_QNAME);

    export function type<T0, T1>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
      arg1: TypeDescriptor<T1> = ANY_TYPE,
    ): TypeDescriptor<Node<T0, T1>> {
      return TYPE.apply(arg0, arg1);
    }
  }

  export namespace builder {
    export function borrow<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowMut<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::borrow_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowMutNode<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::borrow_mut_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowMutValue<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::borrow_mut_value",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowNode<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::borrow_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function borrowValue<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::borrow_value",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function contains<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::contains",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function destroyEmpty<T0 = any, T1 = any>(
      tx: Transaction,
      args: [linked_table.LinkedTable<T0, T1> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::destroy_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function drop<T0 = any, T1 = any>(
      tx: Transaction,
      args: [linked_table.LinkedTable<T0, T1> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::drop",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function head<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::head",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function insertAfter<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::insert_after",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function insertBefore<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::insert_before",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function isEmpty<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::is_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function length<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::length",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function new$<T0 = any, T1 = any>(
      tx: Transaction,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function next<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::next",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function prev<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::prev",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function pushBack<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::push_back",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function pushFront<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
        T1 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::push_front",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function remove<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::remove",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function tail<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::linked_table::tail",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function borrow<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMut<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMutNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMutNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMutValue<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMutValue(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowNode<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowValue<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowValue(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function contains<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.contains(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function destroyEmpty<T0 = any, T1 = any>(
      client: SuiClient,
      args: [linked_table.LinkedTable<T0, T1>],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.destroyEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function drop<T0 = any, T1 = any>(
      client: SuiClient,
      args: [linked_table.LinkedTable<T0, T1>],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.drop(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function head<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new Transaction();
      builder.head(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
    export async function insertAfter<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0, T0, T1],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.insertAfter(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function insertBefore<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0, T0, T1],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.insertBefore(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function isEmpty<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function length<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.length(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function new$<T0 = any, T1 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[linked_table.LinkedTable<T0, T1>]>> {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [linked_table.LinkedTable<T0, T1>]
      >(inspectRes);
    }
    export async function next<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new Transaction();
      builder.next(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
    export async function prev<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new Transaction();
      builder.prev(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
    export async function pushBack<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0, T1],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.pushBack(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function pushFront<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0, T1],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.pushFront(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function remove<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, T0],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[T1]>> {
      const tx = new Transaction();
      builder.remove(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T1]>(
        inspectRes,
      );
    }
    export async function tail<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x1.option.Option<T0>]>> {
      const tx = new Transaction();
      builder.tail(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.option.Option<T0>]
      >(inspectRes);
    }
  }
}

export class option_u64 extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("option_u64", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): option_u64 {
    return new option_u64({ ...option_u64.DEFAULT_OPTIONS, ...options });
  }

  onEventOptionU64(
    func: (event: option_u64.OptionU64Instance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): option_u64 {
    this.onMoveEvent(func, { type: "option_u64::OptionU64" }, fetchConfig);
    return this;
  }
}

export namespace option_u64 {
  export interface OptionU64 {
    is_none: boolean;
    v: bigint;
  }

  export namespace OptionU64 {
    export const TYPE_QNAME =
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::OptionU64";

    const TYPE = new TypeDescriptor<OptionU64>(OptionU64.TYPE_QNAME);

    export function type(): TypeDescriptor<OptionU64> {
      return TYPE.apply();
    }
  }

  export interface OptionU64Instance extends TypedEventInstance<OptionU64> {
    data_decoded: OptionU64;
    type_arguments: [];
  }

  export namespace builder {
    export function borrow(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::borrow",
        arguments: _args,
      });
    }
    export function borrowMut(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::borrow_mut",
        arguments: _args,
      });
    }
    export function contains(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::contains",
        arguments: _args,
      });
    }
    export function isNone(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::is_none",
        arguments: _args,
      });
    }
    export function isSome(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::is_some",
        arguments: _args,
      });
    }
    export function isSomeAndLte(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::is_some_and_lte",
        arguments: _args,
      });
    }
    export function none(tx: Transaction, args: []): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::none",
        arguments: _args,
      });
    }
    export function some(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::some",
        arguments: _args,
      });
    }
    export function swapOrFill(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::option_u64::swap_or_fill",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function borrow(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.borrow(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function borrowMut(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMut(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function contains(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.contains(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isNone(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isNone(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isSome(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isSome(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function isSomeAndLte(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isSomeAndLte(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function none(
      client: SuiClient,
      args: [],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.none(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
    export async function some(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.some(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
    export async function swapOrFill(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.swapOrFill(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export class random extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("random", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): random {
    return new random({ ...random.DEFAULT_OPTIONS, ...options });
  }

  onEventRandom(
    func: (event: random.RandomInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): random {
    this.onMoveEvent(func, { type: "random::Random" }, fetchConfig);
    return this;
  }
}

export namespace random {
  export interface Random {
    seed: bigint;
  }

  export namespace Random {
    export const TYPE_QNAME =
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::random::Random";

    const TYPE = new TypeDescriptor<Random>(Random.TYPE_QNAME);

    export function type(): TypeDescriptor<Random> {
      return TYPE.apply();
    }
  }

  export interface RandomInstance extends TypedEventInstance<Random> {
    data_decoded: Random;
    type_arguments: [];
  }

  export namespace builder {
    export function new$(
      tx: Transaction,
      args: [bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::random::new",
        arguments: _args,
      });
    }
    export function rand(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::random::rand",
        arguments: _args,
      });
    }
    export function randN(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::random::rand_n",
        arguments: _args,
      });
    }
    export function seed(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::random::seed",
        arguments: _args,
      });
    }
    export function seedRand(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::random::seed_rand",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function new$(
      client: SuiClient,
      args: [bigint],
    ): Promise<TypedDevInspectResults<[random.Random]>> {
      const tx = new Transaction();
      builder.new$(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [random.Random]
      >(inspectRes);
    }
    export async function rand(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.rand(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function randN(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.randN(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function seed(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.seed(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function seedRand(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.seedRand(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace skip_list {
  export interface Item {
    n: bigint;
    score: bigint;
    finded: option_u64.OptionU64;
  }

  export namespace Item {
    export const TYPE_QNAME =
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::Item";

    const TYPE = new TypeDescriptor<Item>(Item.TYPE_QNAME);

    export function type(): TypeDescriptor<Item> {
      return TYPE.apply();
    }
  }

  export interface Node<T0> {
    score: bigint;
    nexts: option_u64.OptionU64[];
    prev: option_u64.OptionU64;
    value: T0;
  }

  export namespace Node {
    export const TYPE_QNAME =
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::Node";

    const TYPE = new TypeDescriptor<Node<any>>(Node.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Node<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface SkipList<T0> {
    id: _0x2.object$.UID;
    head: option_u64.OptionU64[];
    tail: option_u64.OptionU64;
    level: bigint;
    max_level: bigint;
    list_p: bigint;
    size: bigint;
    random: random.Random;
  }

  export namespace SkipList {
    export const TYPE_QNAME =
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::SkipList";

    const TYPE = new TypeDescriptor<SkipList<any>>(SkipList.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<SkipList<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function borrow<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::borrow",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowMut<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::borrow_mut",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowMutNode<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::borrow_mut_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowMutValue<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::borrow_mut_value",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowNode<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::borrow_node",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowValue<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::borrow_value",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function contains<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::contains",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function destroyEmpty<T0 = any>(
      tx: Transaction,
      args: [skip_list.SkipList<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::destroy_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function findNext<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::find_next",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function findPrev<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        boolean | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureBool(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::find_prev",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function head<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::head",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function insert<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        T0 | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::insert",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function isEmpty<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::is_empty",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function length<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::length",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function metadata<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::metadata",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new$<T0 = any>(
      tx: Transaction,
      args: [
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function nextScore<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::next_score",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function prevScore<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::prev_score",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function remove<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::remove",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function tail<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa::skip_list::tail",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function borrow<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrow(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMut<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMutNode<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMutNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowMutValue<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowMutValue(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowNode<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowNode(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function borrowValue<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowValue(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function contains<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.contains(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function destroyEmpty<T0 = any>(
      client: SuiClient,
      args: [skip_list.SkipList<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.destroyEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function findNext<T0 = any>(
      client: SuiClient,
      args: [string, bigint, boolean],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.findNext(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
    export async function findPrev<T0 = any>(
      client: SuiClient,
      args: [string, bigint, boolean],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.findPrev(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
    export async function head<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.head(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
    export async function insert<T0 = any>(
      client: SuiClient,
      args: [string, bigint, T0],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.insert(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function isEmpty<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isEmpty(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function length<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.length(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function metadata<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<
      TypedDevInspectResults<
        [
          option_u64.OptionU64[],
          option_u64.OptionU64,
          bigint,
          bigint,
          bigint,
          bigint,
        ]
      >
    > {
      const tx = new Transaction();
      builder.metadata(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          option_u64.OptionU64[],
          option_u64.OptionU64,
          bigint,
          bigint,
          bigint,
          bigint,
        ]
      >(inspectRes);
    }
    export async function new$<T0 = any>(
      client: SuiClient,
      args: [bigint, bigint, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[skip_list.SkipList<T0>]>> {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [skip_list.SkipList<T0>]
      >(inspectRes);
    }
    export async function nextScore<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.nextScore(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
    export async function prevScore<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.prevScore(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
    export async function remove<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[T0]>> {
      const tx = new Transaction();
      builder.remove(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[T0]>(
        inspectRes,
      );
    }
    export async function tail<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[option_u64.OptionU64]>> {
      const tx = new Transaction();
      builder.tail(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [option_u64.OptionU64]
      >(inspectRes);
    }
  }
}

const MODULES = JSON.parse(
  '[{"fileFormatVersion":6,"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","name":"linked_table","friends":[],"structs":{"LinkedTable":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false},{"constraints":{"abilities":["Store"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"head","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"tail","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"size","type":"U64"}]},"Node":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Copy","Drop","Store"]},"isPhantom":false},{"constraints":{"abilities":["Store"]},"isPhantom":false}],"fields":[{"name":"prev","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"next","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}},{"name":"value","type":{"TypeParameter":1}}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"TypeParameter":1}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"TypeParameter":1}}]},"borrow_mut_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}]},"borrow_mut_value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"MutableReference":{"TypeParameter":1}}]},"borrow_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}]},"borrow_value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Reference":{"TypeParameter":1}}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Drop","Store"]}],"parameters":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"drop":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}],"return":[]},"head":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]},"insert_after":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"insert_before":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":["U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}]},"next":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]},"prev":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"Node","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]},"push_back":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"push_front":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0},{"TypeParameter":1}],"return":[]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}},{"TypeParameter":0}],"return":[{"TypeParameter":1}]},"tail":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Copy","Drop","Store"]},{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"linked_table","name":"LinkedTable","typeArguments":[{"TypeParameter":0},{"TypeParameter":1}]}}}],"return":[{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"TypeParameter":0}]}}]}}},{"fileFormatVersion":6,"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","name":"option_u64","friends":[],"structs":{"OptionU64":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"is_none","type":"Bool"},{"name":"v","type":"U64"}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}}],"return":["U64"]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}}],"return":[{"MutableReference":"U64"}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}},"U64"],"return":["Bool"]},"is_none":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}}],"return":["Bool"]},"is_some":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}}],"return":["Bool"]},"is_some_and_lte":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}},"U64"],"return":["Bool"]},"none":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"some":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"swap_or_fill":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}},"U64"],"return":[]}}},{"fileFormatVersion":6,"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","name":"random","friends":[],"structs":{"Random":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"seed","type":"U64"}]}},"exposedFunctions":{"new":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64"],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"random","name":"Random","typeArguments":[]}}]},"rand":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"random","name":"Random","typeArguments":[]}}}],"return":["U64"]},"rand_n":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"random","name":"Random","typeArguments":[]}}},"U64"],"return":["U64"]},"seed":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"random","name":"Random","typeArguments":[]}}},"U64"],"return":[]},"seed_rand":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"random","name":"Random","typeArguments":[]}}},"U64"],"return":["U64"]}}},{"fileFormatVersion":6,"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","name":"skip_list","friends":[],"structs":{"Item":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"n","type":"U64"},{"name":"score","type":"U64"},{"name":"finded","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}}]},"Node":{"abilities":{"abilities":["Store"]},"typeParameters":[{"constraints":{"abilities":["Store"]},"isPhantom":false}],"fields":[{"name":"score","type":"U64"},{"name":"nexts","type":{"Vector":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}}},{"name":"prev","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}},{"name":"value","type":{"TypeParameter":0}}]},"SkipList":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":["Store"]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"head","type":{"Vector":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}}},{"name":"tail","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}},{"name":"level","type":"U64"},{"name":"max_level","type":"U64"},{"name":"list_p","type":"U64"},{"name":"size","type":"U64"},{"name":"random","type":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"random","name":"Random","typeArguments":[]}}}]}},"exposedFunctions":{"borrow":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Reference":{"TypeParameter":0}}]},"borrow_mut":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"MutableReference":{"TypeParameter":0}}]},"borrow_mut_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"Node","typeArguments":[{"TypeParameter":0}]}}}]},"borrow_mut_value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"Node","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"MutableReference":{"TypeParameter":0}}]},"borrow_node":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"Node","typeArguments":[{"TypeParameter":0}]}}}]},"borrow_value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"Node","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"TypeParameter":0}}]},"contains":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":["Bool"]},"destroy_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop","Store"]}],"parameters":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"find_next":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64","Bool"],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"find_prev":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64","Bool"],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"head":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"insert":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64",{"TypeParameter":0}],"return":[]},"is_empty":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"length":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"metadata":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}},{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}},"U64","U64","U64","U64"]},"new":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":["U64","U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}]},"next_score":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"Node","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"prev_score":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"Node","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]},"remove":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"TypeParameter":0}]},"tail":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Store"]}],"parameters":[{"Reference":{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"skip_list","name":"SkipList","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa","module":"option_u64","name":"OptionU64","typeArguments":[]}}]}}}]',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0xbe21a06129308e0495431d12286127897aff07a8ade3970495a4404d97f9eaaa",
    );
  }
}

loadAllTypes(defaultMoveCoder(SuiNetwork.MAIN_NET));
