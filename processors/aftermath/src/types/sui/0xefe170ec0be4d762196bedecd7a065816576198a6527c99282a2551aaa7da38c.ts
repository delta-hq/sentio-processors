/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c, original address 0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@sentio/sdk/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import { CallFilter, MoveFetchConfig } from "@sentio/sdk/move";
import {
  SuiBindOptions,
  SuiBaseProcessor,
  SuiNetwork,
  TypedFunctionPayload,
  SuiContext,
} from "@sentio/sdk/sui";

import * as _0x2 from "@sentio/sdk/sui/builtin/0x2";
import * as _0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06 from "./0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06.js";
import * as _0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a from "./0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a.js";
import * as _0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f from "./0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f.js";
import * as _0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf from "./0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf.js";
import * as _0x1 from "@sentio/sdk/sui/builtin/0x1";

export class admin extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("admin", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): admin {
    return new admin({ ...admin.DEFAULT_OPTIONS, ...options });
  }

  onEventAuthKey(
    func: (event: admin.AuthKeyInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): admin {
    this.onMoveEvent(func, { type: "admin::AuthKey" }, fetchConfig);
    return this;
  }
}

export namespace admin {
  export interface AdminCap {
    id: _0x2.object$.UID;
  }

  export namespace AdminCap {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::admin::AdminCap";

    const TYPE = new TypeDescriptor<AdminCap>(AdminCap.TYPE_QNAME);

    export function type(): TypeDescriptor<AdminCap> {
      return TYPE.apply();
    }
  }

  export interface AuthCap {
    dummy_field: boolean;
  }

  export namespace AuthCap {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::admin::AuthCap";

    const TYPE = new TypeDescriptor<AuthCap>(AuthCap.TYPE_QNAME);

    export function type(): TypeDescriptor<AuthCap> {
      return TYPE.apply();
    }
  }

  export interface AuthKey {
    dummy_field: boolean;
  }

  export namespace AuthKey {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::admin::AuthKey";

    const TYPE = new TypeDescriptor<AuthKey>(AuthKey.TYPE_QNAME);

    export function type(): TypeDescriptor<AuthKey> {
      return TYPE.apply();
    }
  }

  export type AuthKeyInstance = TypedEventInstance<AuthKey> & {
    data_decoded: AuthKey;
    type_arguments: [];
  };

  export namespace builder {
    export function authorize(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::admin::authorize",
        arguments: _args,
      });
    }
    export function isAuthorized(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::admin::is_authorized",
        arguments: _args,
      });
    }
    export function revokeAuth(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::admin::revoke_auth",
        arguments: _args,
      });
    }
    export function transfer(
      tx: Transaction,
      args: [
        admin.AdminCap | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::admin::transfer",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function authorize(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.authorize(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function isAuthorized(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.isAuthorized(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function revokeAuth(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.revokeAuth(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function transfer(
      client: SuiClient,
      args: [admin.AdminCap, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transfer(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace deposit {
  export namespace builder {
    export function allCoinDeposit2Coins<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::all_coin_deposit_2_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function allCoinDeposit3Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::all_coin_deposit_3_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function allCoinDeposit4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::all_coin_deposit_4_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function allCoinDeposit5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::all_coin_deposit_5_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
        ],
      });
    }
    export function allCoinDeposit6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::all_coin_deposit_6_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
        ],
      });
    }
    export function allCoinDeposit7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::all_coin_deposit_7_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
        ],
      });
    }
    export function allCoinDeposit8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));
      _args.push(transactionArgumentOrObject(args[13], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::all_coin_deposit_8_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
        ],
      });
    }
    export function deposit1Coins<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPureU128(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_1_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function deposit2Coins<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPureU128(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_2_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function deposit3Coins<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPureU128(args[9], tx));
      _args.push(transactionArgumentOrPureU64(args[10], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_3_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function deposit4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPureU128(args[10], tx));
      _args.push(transactionArgumentOrPureU64(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_4_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function deposit5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));
      _args.push(transactionArgumentOrPureU128(args[11], tx));
      _args.push(transactionArgumentOrPureU64(args[12], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_5_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
        ],
      });
    }
    export function deposit6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        _0x2.coin.Coin<T6> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));
      _args.push(transactionArgumentOrPure(args[11], tx));
      _args.push(transactionArgumentOrPureU128(args[12], tx));
      _args.push(transactionArgumentOrPureU64(args[13], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_6_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
        ],
      });
    }
    export function deposit7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        _0x2.coin.Coin<T6> | TransactionArgument,
        _0x2.coin.Coin<T7> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));
      _args.push(transactionArgumentOrPure(args[11], tx));
      _args.push(transactionArgumentOrPure(args[12], tx));
      _args.push(transactionArgumentOrPureU128(args[13], tx));
      _args.push(transactionArgumentOrPureU64(args[14], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_7_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
        ],
      });
    }
    export function deposit8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        _0x2.coin.Coin<T6> | TransactionArgument,
        _0x2.coin.Coin<T7> | TransactionArgument,
        _0x2.coin.Coin<T8> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPure(args[7], tx));
      _args.push(transactionArgumentOrPure(args[8], tx));
      _args.push(transactionArgumentOrPure(args[9], tx));
      _args.push(transactionArgumentOrPure(args[10], tx));
      _args.push(transactionArgumentOrPure(args[11], tx));
      _args.push(transactionArgumentOrPure(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPureU128(args[14], tx));
      _args.push(transactionArgumentOrPureU64(args[15], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::deposit::deposit_8_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function allCoinDeposit2Coins<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, string, string, string, string, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.allCoinDeposit2Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function allCoinDeposit3Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.allCoinDeposit3Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function allCoinDeposit4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.allCoinDeposit4Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function allCoinDeposit5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.allCoinDeposit5Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function allCoinDeposit6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.allCoinDeposit6Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function allCoinDeposit7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.allCoinDeposit7Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function allCoinDeposit8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.allCoinDeposit8Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit1Coins<T0 = any, T1 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        bigint,
        bigint,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit1Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit2Coins<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit2Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit3Coins<T0 = any, T1 = any, T2 = any, T3 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit3Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit4Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit5Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        _0x2.coin.Coin<T6>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit6Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        _0x2.coin.Coin<T6>,
        _0x2.coin.Coin<T7>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit7Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function deposit8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        _0x2.coin.Coin<T6>,
        _0x2.coin.Coin<T7>,
        _0x2.coin.Coin<T8>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.deposit8Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
  }
}

export class events extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("events", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): events {
    return new events({ ...events.DEFAULT_OPTIONS, ...options });
  }

  onEventCreatedPoolEvent(
    func: (event: events.CreatedPoolEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): events {
    this.onMoveEvent(func, { type: "events::CreatedPoolEvent" }, fetchConfig);
    return this;
  }

  onEventDepositEvent(
    func: (event: events.DepositEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): events {
    this.onMoveEvent(func, { type: "events::DepositEvent" }, fetchConfig);
    return this;
  }

  onEventOraclePriceEvent(
    func: (event: events.OraclePriceEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): events {
    this.onMoveEvent(func, { type: "events::OraclePriceEvent" }, fetchConfig);
    return this;
  }

  onEventSpotPriceEvent(
    func: (event: events.SpotPriceEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): events {
    this.onMoveEvent(func, { type: "events::SpotPriceEvent" }, fetchConfig);
    return this;
  }

  onEventSwapEvent(
    func: (event: events.SwapEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): events {
    this.onMoveEvent(func, { type: "events::SwapEvent" }, fetchConfig);
    return this;
  }

  onEventWithdrawEvent(
    func: (event: events.WithdrawEventInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): events {
    this.onMoveEvent(func, { type: "events::WithdrawEvent" }, fetchConfig);
    return this;
  }
}

export namespace events {
  export interface CreatedPoolEvent {
    pool_id: _0x2.object$.ID;
    name: string;
    creator: string;
    lp_type: _0x1.ascii.String;
    coins: _0x1.ascii.String[];
    weights: bigint[];
    flatness: bigint;
    fees_swap_in: bigint[];
    fees_swap_out: bigint[];
    fees_deposit: bigint[];
    fees_withdraw: bigint[];
  }

  export namespace CreatedPoolEvent {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::CreatedPoolEvent";

    const TYPE = new TypeDescriptor<CreatedPoolEvent>(
      CreatedPoolEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<CreatedPoolEvent> {
      return TYPE.apply();
    }
  }

  export type CreatedPoolEventInstance =
    TypedEventInstance<CreatedPoolEvent> & {
      data_decoded: CreatedPoolEvent;
      type_arguments: [];
    };

  export interface DepositEvent {
    pool_id: _0x2.object$.ID;
    issuer: string;
    referrer: _0x1.option.Option<string>;
    types: _0x1.ascii.String[];
    deposits: bigint[];
    lp_coins_minted: bigint;
  }

  export namespace DepositEvent {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::DepositEvent";

    const TYPE = new TypeDescriptor<DepositEvent>(DepositEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<DepositEvent> {
      return TYPE.apply();
    }
  }

  export type DepositEventInstance = TypedEventInstance<DepositEvent> & {
    data_decoded: DepositEvent;
    type_arguments: [];
  };

  export interface OraclePriceEvent {
    pool_id: _0x2.object$.ID;
    base_type: _0x1.ascii.String;
    quote_type: _0x1.ascii.String;
    oracle_price: bigint;
  }

  export namespace OraclePriceEvent {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::OraclePriceEvent";

    const TYPE = new TypeDescriptor<OraclePriceEvent>(
      OraclePriceEvent.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<OraclePriceEvent> {
      return TYPE.apply();
    }
  }

  export type OraclePriceEventInstance =
    TypedEventInstance<OraclePriceEvent> & {
      data_decoded: OraclePriceEvent;
      type_arguments: [];
    };

  export interface SpotPriceEvent {
    pool_id: _0x2.object$.ID;
    base_type: _0x1.ascii.String;
    quote_type: _0x1.ascii.String;
    spot_price: bigint;
  }

  export namespace SpotPriceEvent {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::SpotPriceEvent";

    const TYPE = new TypeDescriptor<SpotPriceEvent>(SpotPriceEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<SpotPriceEvent> {
      return TYPE.apply();
    }
  }

  export type SpotPriceEventInstance = TypedEventInstance<SpotPriceEvent> & {
    data_decoded: SpotPriceEvent;
    type_arguments: [];
  };

  export interface SwapEvent {
    pool_id: _0x2.object$.ID;
    issuer: string;
    referrer: _0x1.option.Option<string>;
    types_in: _0x1.ascii.String[];
    amounts_in: bigint[];
    types_out: _0x1.ascii.String[];
    amounts_out: bigint[];
  }

  export namespace SwapEvent {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::SwapEvent";

    const TYPE = new TypeDescriptor<SwapEvent>(SwapEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<SwapEvent> {
      return TYPE.apply();
    }
  }

  export type SwapEventInstance = TypedEventInstance<SwapEvent> & {
    data_decoded: SwapEvent;
    type_arguments: [];
  };

  export interface WithdrawEvent {
    pool_id: _0x2.object$.ID;
    issuer: string;
    referrer: _0x1.option.Option<string>;
    types: _0x1.ascii.String[];
    withdrawn: bigint[];
    lp_coins_burned: bigint;
  }

  export namespace WithdrawEvent {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::WithdrawEvent";

    const TYPE = new TypeDescriptor<WithdrawEvent>(WithdrawEvent.TYPE_QNAME);

    export function type(): TypeDescriptor<WithdrawEvent> {
      return TYPE.apply();
    }
  }

  export type WithdrawEventInstance = TypedEventInstance<WithdrawEvent> & {
    data_decoded: WithdrawEvent;
    type_arguments: [];
  };

  export namespace builder {
    export function emitCreatedPoolEvent<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::emit_created_pool_event",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function emitDepositEvent<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::emit_deposit_event",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function emitOraclePriceEvent<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::emit_oracle_price_event",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function emitSpotPriceEvent<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::emit_spot_price_event",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function emitSwapEvent<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::emit_swap_event",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function emitWithdrawEvent<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
        _0x1.option.Option<string> | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::events::emit_withdraw_event",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function emitCreatedPoolEvent<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.emitCreatedPoolEvent(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function emitDepositEvent<T0 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        _0x1.option.Option<string>,
        string[],
        string[],
        bigint,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.emitDepositEvent(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function emitOraclePriceEvent<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.emitOraclePriceEvent(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function emitSpotPriceEvent<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.emitSpotPriceEvent(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function emitSwapEvent<T0 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        _0x1.option.Option<string>,
        string[],
        string[],
        string[],
        string[],
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.emitSwapEvent(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function emitWithdrawEvent<T0 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        _0x1.option.Option<string>,
        string[],
        string[],
        bigint,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.emitWithdrawEvent(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export class keys extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("keys", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): keys {
    return new keys({ ...keys.DEFAULT_OPTIONS, ...options });
  }

  onEventBalanceKey(
    func: (event: keys.BalanceKeyInstance, ctx: SuiContext) => void,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): keys {
    this.onMoveEvent(func, { type: "keys::BalanceKey" }, fetchConfig);
    return this;
  }
}

export namespace keys {
  export interface BalanceKey<T0> {
    dummy_field: boolean;
  }

  export namespace BalanceKey {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::keys::BalanceKey";

    const TYPE = new TypeDescriptor<BalanceKey<any>>(BalanceKey.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<BalanceKey<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export type BalanceKeyInstance = TypedEventInstance<BalanceKey<any>> & {
    data_decoded: BalanceKey<any>;
    type_arguments: [string];
  };

  export namespace builder {
    export function typeToBalanceKey<T0 = any>(
      tx: Transaction,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::keys::type_to_balance_key",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function typeToString<T0 = any>(
      tx: Transaction,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [] {
      const _args: any[] = [];

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::keys::type_to_string",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function typeToBalanceKey<T0 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[keys.BalanceKey<T0>]>> {
      const tx = new Transaction();
      builder.typeToBalanceKey(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [keys.BalanceKey<T0>]
      >(inspectRes);
    }
    export async function typeToString<T0 = any>(
      client: SuiClient,
      args: [],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new Transaction();
      builder.typeToString(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
  }
}

export namespace math {
  export namespace builder {
    export function calcAllCoinDeposit<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_all_coin_deposit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function calcAllCoinWithdraw<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_all_coin_withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function calcDepositExactIn<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU128(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_deposit_exact_in",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function calcInvariant<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_invariant",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function calcLpCoinsToMintFromT<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_lp_coins_to_mint_from_t",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function calcLpRatioAfterBurningLpCoin(
      tx: Transaction,
      args: [bigint | TransactionArgument, bigint | TransactionArgument],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPureU64(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_lp_ratio_after_burning_lp_coin",
        arguments: _args,
      });
    }
    export function calcOraclePrice<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_oracle_price",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function calcSpotPrice<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_spot_price",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function calcSwapExactIn<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_swap_exact_in",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function calcSwapExactOut<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::calc_swap_exact_out",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function reorderAndZeroOutEmptyCoins<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::reorder_and_zero_out_empty_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function reorderByOrderOfCallingFunction<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::math::reorder_by_order_of_calling_function",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function calcAllCoinDeposit<T0 = any>(
      client: SuiClient,
      args: [string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint, bigint[]]>> {
      const tx = new Transaction();
      builder.calcAllCoinDeposit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [bigint, bigint[]]
      >(inspectRes);
    }
    export async function calcAllCoinWithdraw<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.calcAllCoinWithdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function calcDepositExactIn<T0 = any>(
      client: SuiClient,
      args: [string, string, string, bigint, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcDepositExactIn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calcInvariant<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcInvariant(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calcLpCoinsToMintFromT<T0 = any>(
      client: SuiClient,
      args: [string, bigint, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcLpCoinsToMintFromT(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calcLpRatioAfterBurningLpCoin(
      client: SuiClient,
      args: [bigint, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcLpRatioAfterBurningLpCoin(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calcOraclePrice<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcOraclePrice(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calcSpotPrice<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcSpotPrice(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calcSwapExactIn<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint, bigint, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcSwapExactIn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function calcSwapExactOut<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, bigint, bigint, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.calcSwapExactOut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function reorderAndZeroOutEmptyCoins<T0 = any>(
      client: SuiClient,
      args: [string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.reorderAndZeroOutEmptyCoins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function reorderByOrderOfCallingFunction<T0 = any>(
      client: SuiClient,
      args: [string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.reorderByOrderOfCallingFunction(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
  }
}

export namespace pool {
  export interface CreatePoolCap<T0> {
    id: _0x2.object$.UID;
    lp_treasury_cap: _0x2.coin.TreasuryCap<T0>;
    lp_coin_metadata: _0x2.coin.CoinMetadata<T0>;
  }

  export namespace CreatePoolCap {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::CreatePoolCap";

    const TYPE = new TypeDescriptor<CreatePoolCap<any>>(
      CreatePoolCap.TYPE_QNAME,
    );

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<CreatePoolCap<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export interface Pool<T0> {
    id: _0x2.object$.UID;
    name: string;
    creator: string;
    lp_supply: _0x2.balance.Supply<T0>;
    illiquid_lp_supply: _0x2.balance.Balance<T0>;
    type_names: _0x1.ascii.String[];
    normalized_balances: bigint[];
    weights: bigint[];
    flatness: bigint;
    fees_swap_in: bigint[];
    fees_swap_out: bigint[];
    fees_deposit: bigint[];
    fees_withdraw: bigint[];
    coin_decimals: _0x1.option.Option<number[]>;
    decimal_scalars: bigint[];
    lp_decimals: number;
    lp_decimal_scalar: bigint;
  }

  export namespace Pool {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::Pool";

    const TYPE = new TypeDescriptor<Pool<any>>(Pool.TYPE_QNAME);

    export function type<T0>(
      arg0: TypeDescriptor<T0> = ANY_TYPE,
    ): TypeDescriptor<Pool<T0>> {
      return TYPE.apply(arg0);
    }
  }

  export namespace builder {
    export function balanceOf<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::balance_of",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function balances<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::balances",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function burnLpCoins<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::burn_lp_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function coinDecimals<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::coin_decimals",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function containsType<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::contains_type",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function createLpCoin<T0 = any>(
      tx: Transaction,
      args: [T0 | TransactionArgument, number | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::create_lp_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function creator<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::creator",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function feesDeposit<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_deposit",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function feesDepositFor<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_deposit_for",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function feesSwapIn<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_swap_in",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function feesSwapInFor<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_swap_in_for",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function feesSwapOut<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_swap_out",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function feesSwapOutFor<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_swap_out_for",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function feesWithdraw<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_withdraw",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function feesWithdrawFor<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::fees_withdraw_for",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function flatness<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::flatness",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function initializeLiquidity<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::initialize_liquidity",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function initializeLpSupply<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::initialize_lp_supply",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function join<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::join",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function lpDecimals<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::lp_decimals",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function lpSupplyValue<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::lp_supply_value",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function lpType<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::lp_type",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function mintLpCoins<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::mint_lp_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function name<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::name",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function new$<T0 = any>(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrVec(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPureBool(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::new",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function normalizeAmount<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::normalize_amount",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function normalizeAmountWithIndex<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU64(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::normalize_amount_with_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function normalizeAmounts<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::normalize_amounts",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function normalizeLpAmount<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::normalize_lp_amount",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function normalizedBalanceByIndex<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::normalized_balance_by_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function normalizedBalanceOf<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::normalized_balance_of",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function normalizedBalances<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::normalized_balances",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function share<T0 = any>(
      tx: Transaction,
      args: [pool.Pool<T0> | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::share",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function size<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::size",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function take<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::take",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function transferCreatePoolCap<T0 = any>(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::transfer_create_pool_cap",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function typeNameToBalanceValue<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::type_name_to_balance_value",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function typeNameToIndex<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::type_name_to_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function typeNameToNormalizedBalanceValue<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.ascii.String | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPure(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::type_name_to_normalized_balance_value",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function typeNames<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::type_names",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function typeToIndex<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::type_to_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function unnormalizeAmount<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::unnormalize_amount",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function unnormalizeAmountWithIndex<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [TransactionArgument, TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));
      _args.push(transactionArgumentOrPureU128(args[2], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::unnormalize_amount_with_index",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function unnormalizeAmounts<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::unnormalize_amounts",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function unnormalizeLpAmount<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU128(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::unnormalize_lp_amount",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function weightOf<T0 = any, T1 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::weight_of",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function weights<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool::weights",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function balanceOf<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.balanceOf(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function balances<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.balances(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function burnLpCoins<T0 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.Coin<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.burnLpCoins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function coinDecimals<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.coinDecimals(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function containsType<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.containsType(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function createLpCoin<T0 = any>(
      client: SuiClient,
      args: [T0, number],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[pool.CreatePoolCap<T0>]>> {
      const tx = new Transaction();
      builder.createLpCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.CreatePoolCap<T0>]
      >(inspectRes);
    }
    export async function creator<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.creator(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function feesDeposit<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.feesDeposit(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function feesDepositFor<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.feesDepositFor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function feesSwapIn<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.feesSwapIn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function feesSwapInFor<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.feesSwapInFor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function feesSwapOut<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.feesSwapOut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function feesSwapOutFor<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.feesSwapOutFor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function feesWithdraw<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.feesWithdraw(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function feesWithdrawFor<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.feesWithdrawFor(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function flatness<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.flatness(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function initializeLiquidity<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, _0x2.coin.Coin<T1>],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.initializeLiquidity(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function initializeLpSupply<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.initializeLpSupply(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function join<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, _0x2.coin.Coin<T1>],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.join(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function lpDecimals<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[number]>> {
      const tx = new Transaction();
      builder.lpDecimals(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[number]>(
        inspectRes,
      );
    }
    export async function lpSupplyValue<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.lpSupplyValue(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function lpType<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String]>> {
      const tx = new Transaction();
      builder.lpType(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String]
      >(inspectRes);
    }
    export async function mintLpCoins<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.mintLpCoins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function name<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.name(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function new$<T0 = any>(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>]>> {
      const tx = new Transaction();
      builder.new$(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>]
      >(inspectRes);
    }
    export async function normalizeAmount<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.normalizeAmount(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function normalizeAmountWithIndex<T0 = any>(
      client: SuiClient,
      args: [string, bigint, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.normalizeAmountWithIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function normalizeAmounts<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.normalizeAmounts(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function normalizeLpAmount<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.normalizeLpAmount(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function normalizedBalanceByIndex<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.normalizedBalanceByIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function normalizedBalanceOf<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.normalizedBalanceOf(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function normalizedBalances<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.normalizedBalances(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function share<T0 = any>(
      client: SuiClient,
      args: [pool.Pool<T0>],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.share(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function size<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.size(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function take<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T1>]>> {
      const tx = new Transaction();
      builder.take(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T1>]
      >(inspectRes);
    }
    export async function transferCreatePoolCap<T0 = any>(
      client: SuiClient,
      args: [pool.CreatePoolCap<T0>, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transferCreatePoolCap(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function typeNameToBalanceValue<T0 = any>(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.typeNameToBalanceValue(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function typeNameToIndex<T0 = any>(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.typeNameToIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function typeNameToNormalizedBalanceValue<T0 = any>(
      client: SuiClient,
      args: [string, _0x1.ascii.String],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.typeNameToNormalizedBalanceValue(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function typeNames<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x1.ascii.String[]]>> {
      const tx = new Transaction();
      builder.typeNames(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x1.ascii.String[]]
      >(inspectRes);
    }
    export async function typeToIndex<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.typeToIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function unnormalizeAmount<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.unnormalizeAmount(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function unnormalizeAmountWithIndex<T0 = any>(
      client: SuiClient,
      args: [string, bigint, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.unnormalizeAmountWithIndex(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function unnormalizeAmounts<T0 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.unnormalizeAmounts(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
    export async function unnormalizeLpAmount<T0 = any>(
      client: SuiClient,
      args: [string, bigint],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.unnormalizeLpAmount(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function weightOf<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.weightOf(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function weights<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[bigint[]]>> {
      const tx = new Transaction();
      builder.weights(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint[]]>(
        inspectRes,
      );
    }
  }
}

export namespace pool_factory {
  export namespace builder {
    export function createLpCoin<T0 = any>(
      tx: Transaction,
      args: [T0 | TransactionArgument, number | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureU8(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_lp_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function createPool2Coins<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPureBool(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_pool_2_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function createPool3Coins<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPureBool(args[17], tx));
      _args.push(transactionArgumentOrPure(args[18], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_pool_3_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function createPool4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));
      _args.push(transactionArgumentOrPureBool(args[18], tx));
      _args.push(transactionArgumentOrPure(args[19], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_pool_4_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function createPool5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));
      _args.push(transactionArgumentOrPure(args[18], tx));
      _args.push(transactionArgumentOrPureBool(args[19], tx));
      _args.push(transactionArgumentOrPure(args[20], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_pool_5_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
        ],
      });
    }
    export function createPool6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        _0x2.coin.Coin<T6> | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));
      _args.push(transactionArgumentOrPure(args[18], tx));
      _args.push(transactionArgumentOrPure(args[19], tx));
      _args.push(transactionArgumentOrPureBool(args[20], tx));
      _args.push(transactionArgumentOrPure(args[21], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_pool_6_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
        ],
      });
    }
    export function createPool7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        _0x2.coin.Coin<T6> | TransactionArgument,
        _0x2.coin.Coin<T7> | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));
      _args.push(transactionArgumentOrPure(args[18], tx));
      _args.push(transactionArgumentOrPure(args[19], tx));
      _args.push(transactionArgumentOrPure(args[20], tx));
      _args.push(transactionArgumentOrPureBool(args[21], tx));
      _args.push(transactionArgumentOrPure(args[22], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_pool_7_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
        ],
      });
    }
    export function createPool8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      tx: Transaction,
      args: [
        pool.CreatePoolCap<T0> | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        _0x2.coin.Coin<T3> | TransactionArgument,
        _0x2.coin.Coin<T4> | TransactionArgument,
        _0x2.coin.Coin<T5> | TransactionArgument,
        _0x2.coin.Coin<T6> | TransactionArgument,
        _0x2.coin.Coin<T7> | TransactionArgument,
        _0x2.coin.Coin<T8> | TransactionArgument,
        _0x1.option.Option<number[]> | TransactionArgument,
        boolean | TransactionArgument,
        _0x1.option.Option<number> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrVec(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrVec(args[9], tx));
      _args.push(transactionArgumentOrVec(args[10], tx));
      _args.push(transactionArgumentOrVec(args[11], tx));
      _args.push(transactionArgumentOrVec(args[12], tx));
      _args.push(transactionArgumentOrPure(args[13], tx));
      _args.push(transactionArgumentOrPure(args[14], tx));
      _args.push(transactionArgumentOrPure(args[15], tx));
      _args.push(transactionArgumentOrPure(args[16], tx));
      _args.push(transactionArgumentOrPure(args[17], tx));
      _args.push(transactionArgumentOrPure(args[18], tx));
      _args.push(transactionArgumentOrPure(args[19], tx));
      _args.push(transactionArgumentOrPure(args[20], tx));
      _args.push(transactionArgumentOrPure(args[21], tx));
      _args.push(transactionArgumentOrPureBool(args[22], tx));
      _args.push(transactionArgumentOrPure(args[23], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_factory::create_pool_8_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function createLpCoin<T0 = any>(
      client: SuiClient,
      args: [T0, number],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[pool.CreatePoolCap<T0>]>> {
      const tx = new Transaction();
      builder.createLpCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.CreatePoolCap<T0>]
      >(inspectRes);
    }
    export async function createPool2Coins<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>, _0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.createPool2Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>, _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function createPool3Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>, _0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.createPool3Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>, _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function createPool4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>, _0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.createPool4Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>, _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function createPool5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>, _0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.createPool5Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>, _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function createPool6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        _0x2.coin.Coin<T6>,
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>, _0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.createPool6Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>, _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function createPool7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        _0x2.coin.Coin<T6>,
        _0x2.coin.Coin<T7>,
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>, _0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.createPool7Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>, _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
    export async function createPool8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      client: SuiClient,
      args: [
        pool.CreatePoolCap<T0>,
        string,
        string[],
        string[],
        string[],
        string[],
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
        _0x2.coin.Coin<T1>,
        _0x2.coin.Coin<T2>,
        _0x2.coin.Coin<T3>,
        _0x2.coin.Coin<T4>,
        _0x2.coin.Coin<T5>,
        _0x2.coin.Coin<T6>,
        _0x2.coin.Coin<T7>,
        _0x2.coin.Coin<T8>,
        _0x1.option.Option<number[]>,
        boolean,
        _0x1.option.Option<number>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): Promise<TypedDevInspectResults<[pool.Pool<T0>, _0x2.coin.Coin<T0>]>> {
      const tx = new Transaction();
      builder.createPool8Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [pool.Pool<T0>, _0x2.coin.Coin<T0>]
      >(inspectRes);
    }
  }
}

export namespace pool_registry {
  export interface PoolRegistry {
    id: _0x2.object$.UID;
    protocol_version: bigint;
  }

  export namespace PoolRegistry {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::PoolRegistry";

    const TYPE = new TypeDescriptor<PoolRegistry>(PoolRegistry.TYPE_QNAME);

    export function type(): TypeDescriptor<PoolRegistry> {
      return TYPE.apply();
    }
  }

  export interface PoolRegistryStateV1 {
    id: _0x2.object$.UID;
    coins: _0x2.table.Table<_0x1.ascii.String, boolean>;
    lp_coin_map: _0x2.table.Table<_0x1.ascii.String, _0x2.object$.ID>;
    registered_pools: _0x2.table.Table<number[], boolean>;
  }

  export namespace PoolRegistryStateV1 {
    export const TYPE_QNAME =
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::PoolRegistryStateV1";

    const TYPE = new TypeDescriptor<PoolRegistryStateV1>(
      PoolRegistryStateV1.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<PoolRegistryStateV1> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function addCoin<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::add_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function borrowUid(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::borrow_uid",
        arguments: _args,
      });
    }
    export function containsCoin<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::contains_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function containsLpCoin<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::contains_lp_coin",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function lpCoinMap(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::lp_coin_map",
        arguments: _args,
      });
    }
    export function lpTypeToPoolId<T0 = any>(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::lp_type_to_pool_id",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function protocolVersion(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::protocol_version",
        arguments: _args,
      });
    }
    export function registerPool<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        bigint | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
        (string | TransactionObjectArgument)[] | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrVec(args[2], tx));
      _args.push(transactionArgumentOrVec(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));
      _args.push(transactionArgumentOrVec(args[5], tx));
      _args.push(transactionArgumentOrVec(args[6], tx));
      _args.push(transactionArgumentOrVec(args[7], tx));
      _args.push(transactionArgumentOrVec(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::register_pool",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function supportedCoins(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::pool_registry::supported_coins",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function addCoin<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.addCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function borrowUid(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.borrowUid(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function containsCoin<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.containsCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function containsLpCoin<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[boolean]>> {
      const tx = new Transaction();
      builder.containsLpCoin(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[boolean]>(
        inspectRes,
      );
    }
    export async function lpCoinMap(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.lpCoinMap(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
    export async function lpTypeToPoolId<T0 = any>(
      client: SuiClient,
      args: [string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[_0x2.object$.ID]>> {
      const tx = new Transaction();
      builder.lpTypeToPoolId(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.object$.ID]
      >(inspectRes);
    }
    export async function protocolVersion(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.protocolVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function registerPool<T0 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string[],
        string[],
        bigint,
        string[],
        string[],
        string[],
        string[],
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.registerPool(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function supportedCoins(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[string]>> {
      const tx = new Transaction();
      builder.supportedCoins(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[string]>(
        inspectRes,
      );
    }
  }
}

export namespace price {
  export namespace builder {
    export function oraclePrice<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::price::oracle_price",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function spotPrice<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::price::spot_price",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function oraclePrice<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.oraclePrice(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function spotPrice<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.spotPrice(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
  }
}

export namespace protocol_fees {
  export namespace builder {
    export function collectFees10Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
      T9 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
        TypeDescriptor<T9> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));
      _args.push(transactionArgumentOrObject(args[13], tx));
      _args.push(transactionArgumentOrPureAddress(args[14], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_10_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
          typeof typeArguments[9] === "string"
            ? typeArguments[9]
            : typeArguments[9].getSignature(),
        ],
      });
    }
    export function collectFees11Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
      T9 = any,
      T10 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
        TypeDescriptor<T9> | string,
        TypeDescriptor<T10> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));
      _args.push(transactionArgumentOrObject(args[13], tx));
      _args.push(transactionArgumentOrObject(args[14], tx));
      _args.push(transactionArgumentOrPureAddress(args[15], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_11_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
          typeof typeArguments[9] === "string"
            ? typeArguments[9]
            : typeArguments[9].getSignature(),
          typeof typeArguments[10] === "string"
            ? typeArguments[10]
            : typeArguments[10].getSignature(),
        ],
      });
    }
    export function collectFees12Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
      T9 = any,
      T10 = any,
      T11 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
        TypeDescriptor<T9> | string,
        TypeDescriptor<T10> | string,
        TypeDescriptor<T11> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));
      _args.push(transactionArgumentOrObject(args[13], tx));
      _args.push(transactionArgumentOrObject(args[14], tx));
      _args.push(transactionArgumentOrObject(args[15], tx));
      _args.push(transactionArgumentOrPureAddress(args[16], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_12_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
          typeof typeArguments[9] === "string"
            ? typeArguments[9]
            : typeArguments[9].getSignature(),
          typeof typeArguments[10] === "string"
            ? typeArguments[10]
            : typeArguments[10].getSignature(),
          typeof typeArguments[11] === "string"
            ? typeArguments[11]
            : typeArguments[11].getSignature(),
        ],
      });
    }
    export function collectFees2Coins<T0 = any, T1 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPureAddress(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_2_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
        ],
      });
    }
    export function collectFees3Coins<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrPureAddress(args[7], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_3_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function collectFees4Coins<T0 = any, T1 = any, T2 = any, T3 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrPureAddress(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_4_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function collectFees5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrPureAddress(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_5_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function collectFees6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrPureAddress(args[10], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_6_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
        ],
      });
    }
    export function collectFees7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrPureAddress(args[11], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_7_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
        ],
      });
    }
    export function collectFees8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));
      _args.push(transactionArgumentOrPureAddress(args[12], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_8_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
        ],
      });
    }
    export function collectFees9Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrObject(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrObject(args[8], tx));
      _args.push(transactionArgumentOrObject(args[9], tx));
      _args.push(transactionArgumentOrObject(args[10], tx));
      _args.push(transactionArgumentOrObject(args[11], tx));
      _args.push(transactionArgumentOrObject(args[12], tx));
      _args.push(transactionArgumentOrPureAddress(args[13], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::protocol_fees::collect_fees_9_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function collectFees10Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
      T9 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
        TypeDescriptor<T9> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees10Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees11Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
      T9 = any,
      T10 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
        TypeDescriptor<T9> | string,
        TypeDescriptor<T10> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees11Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees12Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
      T9 = any,
      T10 = any,
      T11 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
        TypeDescriptor<T9> | string,
        TypeDescriptor<T10> | string,
        TypeDescriptor<T11> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees12Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees2Coins<T0 = any, T1 = any>(
      client: SuiClient,
      args: [string, string, string, string, string, string, string],
      typeArguments: [TypeDescriptor<T0> | string, TypeDescriptor<T1> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees2Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees3Coins<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [string, string, string, string, string, string, string, string],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees3Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees4Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees5Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees6Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees7Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees8Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees9Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        string,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees9Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }
}

export namespace swap {
  export namespace builder {
    export function addSwapExactInToRoute<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T2> | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPureU64(args[4], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::swap::add_swap_exact_in_to_route",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function addSwapExactOutToRoute<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrPureU64(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrPureU64(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::swap::add_swap_exact_out_to_route",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function swapExactIn<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T1> | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));
      _args.push(transactionArgumentOrPureU64(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::swap::swap_exact_in",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function swapExactOut<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
        bigint | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPureU64(args[6], tx));
      _args.push(transactionArgumentOrObject(args[7], tx));
      _args.push(transactionArgumentOrPureU64(args[8], tx));
      _args.push(transactionArgumentOrPureU64(args[9], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::swap::swap_exact_out",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function addSwapExactInToRoute<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [string, string, string, _0x2.coin.Coin<T2>, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T3>]>> {
      const tx = new Transaction();
      builder.addSwapExactInToRoute(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T3>]
      >(inspectRes);
    }
    export async function addSwapExactOutToRoute<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [string, string, string, bigint, string, bigint],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T3>]>> {
      const tx = new Transaction();
      builder.addSwapExactOutToRoute(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T3>]
      >(inspectRes);
    }
    export async function swapExactIn<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T1>,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T2>]>> {
      const tx = new Transaction();
      builder.swapExactIn(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T2>]
      >(inspectRes);
    }
    export async function swapExactOut<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        bigint,
        string,
        bigint,
        bigint,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<TypedDevInspectResults<[_0x2.coin.Coin<T2>]>> {
      const tx = new Transaction();
      builder.swapExactOut(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T2>]
      >(inspectRes);
    }
  }
}

export namespace withdraw {
  export namespace builder {
    export function allCoinWithdraw2Coins<T0 = any, T1 = any, T2 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::withdraw::all_coin_withdraw_2_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
        ],
      });
    }
    export function allCoinWithdraw3Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::withdraw::all_coin_withdraw_3_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
        ],
      });
    }
    export function allCoinWithdraw4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::withdraw::all_coin_withdraw_4_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
        ],
      });
    }
    export function allCoinWithdraw5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::withdraw::all_coin_withdraw_5_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
        ],
      });
    }
    export function allCoinWithdraw6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::withdraw::all_coin_withdraw_6_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
        ],
      });
    }
    export function allCoinWithdraw7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::withdraw::all_coin_withdraw_7_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
        ],
      });
    }
    export function allCoinWithdraw8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x2.coin.Coin<T0> | TransactionArgument,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrObject(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c::withdraw::all_coin_withdraw_8_coins",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
          typeof typeArguments[1] === "string"
            ? typeArguments[1]
            : typeArguments[1].getSignature(),
          typeof typeArguments[2] === "string"
            ? typeArguments[2]
            : typeArguments[2].getSignature(),
          typeof typeArguments[3] === "string"
            ? typeArguments[3]
            : typeArguments[3].getSignature(),
          typeof typeArguments[4] === "string"
            ? typeArguments[4]
            : typeArguments[4].getSignature(),
          typeof typeArguments[5] === "string"
            ? typeArguments[5]
            : typeArguments[5].getSignature(),
          typeof typeArguments[6] === "string"
            ? typeArguments[6]
            : typeArguments[6].getSignature(),
          typeof typeArguments[7] === "string"
            ? typeArguments[7]
            : typeArguments[7].getSignature(),
          typeof typeArguments[8] === "string"
            ? typeArguments[8]
            : typeArguments[8].getSignature(),
        ],
      });
    }
  }
  export namespace view {
    export async function allCoinWithdraw2Coins<T0 = any, T1 = any, T2 = any>(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T0>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
      ],
    ): Promise<
      TypedDevInspectResults<[_0x2.coin.Coin<T1>, _0x2.coin.Coin<T2>]>
    > {
      const tx = new Transaction();
      builder.allCoinWithdraw2Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T1>, _0x2.coin.Coin<T2>]
      >(inspectRes);
    }
    export async function allCoinWithdraw3Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T0>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
      ],
    ): Promise<
      TypedDevInspectResults<
        [_0x2.coin.Coin<T1>, _0x2.coin.Coin<T2>, _0x2.coin.Coin<T3>]
      >
    > {
      const tx = new Transaction();
      builder.allCoinWithdraw3Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [_0x2.coin.Coin<T1>, _0x2.coin.Coin<T2>, _0x2.coin.Coin<T3>]
      >(inspectRes);
    }
    export async function allCoinWithdraw4Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T0>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
      ],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
        ]
      >
    > {
      const tx = new Transaction();
      builder.allCoinWithdraw4Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
        ]
      >(inspectRes);
    }
    export async function allCoinWithdraw5Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T0>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
      ],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
        ]
      >
    > {
      const tx = new Transaction();
      builder.allCoinWithdraw5Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
        ]
      >(inspectRes);
    }
    export async function allCoinWithdraw6Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T0>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
      ],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
          _0x2.coin.Coin<T6>,
        ]
      >
    > {
      const tx = new Transaction();
      builder.allCoinWithdraw6Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
          _0x2.coin.Coin<T6>,
        ]
      >(inspectRes);
    }
    export async function allCoinWithdraw7Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T0>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
      ],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
          _0x2.coin.Coin<T6>,
          _0x2.coin.Coin<T7>,
        ]
      >
    > {
      const tx = new Transaction();
      builder.allCoinWithdraw7Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
          _0x2.coin.Coin<T6>,
          _0x2.coin.Coin<T7>,
        ]
      >(inspectRes);
    }
    export async function allCoinWithdraw8Coins<
      T0 = any,
      T1 = any,
      T2 = any,
      T3 = any,
      T4 = any,
      T5 = any,
      T6 = any,
      T7 = any,
      T8 = any,
    >(
      client: SuiClient,
      args: [
        string,
        string,
        string,
        string,
        string,
        string,
        _0x2.coin.Coin<T0>,
      ],
      typeArguments: [
        TypeDescriptor<T0> | string,
        TypeDescriptor<T1> | string,
        TypeDescriptor<T2> | string,
        TypeDescriptor<T3> | string,
        TypeDescriptor<T4> | string,
        TypeDescriptor<T5> | string,
        TypeDescriptor<T6> | string,
        TypeDescriptor<T7> | string,
        TypeDescriptor<T8> | string,
      ],
    ): Promise<
      TypedDevInspectResults<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
          _0x2.coin.Coin<T6>,
          _0x2.coin.Coin<T7>,
          _0x2.coin.Coin<T8>,
        ]
      >
    > {
      const tx = new Transaction();
      builder.allCoinWithdraw8Coins(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<
        [
          _0x2.coin.Coin<T1>,
          _0x2.coin.Coin<T2>,
          _0x2.coin.Coin<T3>,
          _0x2.coin.Coin<T4>,
          _0x2.coin.Coin<T5>,
          _0x2.coin.Coin<T6>,
          _0x2.coin.Coin<T7>,
          _0x2.coin.Coin<T8>,
        ]
      >(inspectRes);
    }
  }
}

const MODULES = JSON.parse(
  '{"admin":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"admin","friends":[{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"swap"}],"structs":{"AdminCap":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"AuthCap":{"abilities":{"abilities":["Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]},"AuthKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"authorize":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"admin","name":"AdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[]},"is_authorized":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":["Bool"]},"revoke_auth":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"admin","name":"AdminCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}],"return":[]},"transfer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"admin","name":"AdminCap","typeArguments":[]}},"Address"],"return":[]}}},"deposit":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"deposit","friends":[],"structs":{},"exposedFunctions":{"all_coin_deposit_2_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"all_coin_deposit_3_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"all_coin_deposit_4_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"all_coin_deposit_5_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"all_coin_deposit_6_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"all_coin_deposit_7_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"all_coin_deposit_8_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_1_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_2_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_3_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_4_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_5_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_6_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_7_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"deposit_8_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}},"U128","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}}},"events":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"events","friends":[{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"deposit"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"pool_factory"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"price"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"swap"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"withdraw"}],"structs":{"CreatedPoolEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"creator","type":"Address"},{"name":"lp_type","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"coins","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"name":"weights","type":{"Vector":"U64"}},{"name":"flatness","type":"U64"},{"name":"fees_swap_in","type":{"Vector":"U64"}},{"name":"fees_swap_out","type":{"Vector":"U64"}},{"name":"fees_deposit","type":{"Vector":"U64"}},{"name":"fees_withdraw","type":{"Vector":"U64"}}]},"DepositEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"issuer","type":"Address"},{"name":"referrer","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"types","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"name":"deposits","type":{"Vector":"U64"}},{"name":"lp_coins_minted","type":"U64"}]},"OraclePriceEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"base_type","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"quote_type","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"oracle_price","type":"U128"}]},"SpotPriceEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"base_type","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"quote_type","type":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"name":"spot_price","type":"U128"}]},"SwapEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"issuer","type":"Address"},{"name":"referrer","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"types_in","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"name":"amounts_in","type":{"Vector":"U64"}},{"name":"types_out","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"name":"amounts_out","type":{"Vector":"U64"}}]},"WithdrawEvent":{"abilities":{"abilities":["Copy","Drop"]},"typeParameters":[],"fields":[{"name":"pool_id","type":{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}},{"name":"issuer","type":"Address"},{"name":"referrer","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}}},{"name":"types","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"name":"withdrawn","type":{"Vector":"U64"}},{"name":"lp_coins_burned","type":"U64"}]}},"exposedFunctions":{"emit_created_pool_event":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[]},"emit_deposit_event":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"Address",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":"U64"},"U64"],"return":[]},"emit_oracle_price_event":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U128"],"return":[]},"emit_spot_price_event":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U128"],"return":[]},"emit_swap_event":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"Address",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":"U64"},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":"U64"}],"return":[]},"emit_withdraw_event":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"Address",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["Address"]}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":"U64"},"U64"],"return":[]}}},"keys":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"keys","friends":[],"structs":{"BalanceKey":{"abilities":{"abilities":["Copy","Drop","Store"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"dummy_field","type":"Bool"}]}},"exposedFunctions":{"type_to_balance_key":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"keys","name":"BalanceKey","typeArguments":[{"TypeParameter":0}]}}]},"type_to_string":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]}}},"math":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"math","friends":[],"structs":{},"exposedFunctions":{"calc_all_coin_deposit":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"Reference":{"Vector":"U64"}}],"return":["U64",{"Vector":"U64"}]},"calc_all_coin_withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":[{"Vector":"U64"}]},"calc_deposit_exact_in":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"Reference":{"Vector":"U64"}},"U128","U64"],"return":["U64"]},"calc_invariant":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Vector":"U128"}}],"return":["U128"]},"calc_lp_coins_to_mint_from_t":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64","U64"],"return":["U64"]},"calc_lp_ratio_after_burning_lp_coin":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":["U64","U64"],"return":["U64"]},"calc_oracle_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U128"]},"calc_spot_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U128"]},"calc_swap_exact_in":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U64"],"return":["U64"]},"calc_swap_exact_out":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64","U64","U64"],"return":["U64"]},"reorder_and_zero_out_empty_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"Reference":{"Vector":"U64"}}],"return":[{"Vector":"U64"}]},"reorder_by_order_of_calling_function":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"Reference":{"Vector":"U64"}}],"return":[{"Vector":"U64"}]}}},"pool":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"pool","friends":[{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"deposit"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"events"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"math"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"pool_factory"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"swap"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"withdraw"}],"structs":{"CreatePoolCap":{"abilities":{"abilities":["Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"lp_treasury_cap","type":{"Struct":{"address":"0x2","module":"coin","name":"TreasuryCap","typeArguments":[{"TypeParameter":0}]}}},{"name":"lp_coin_metadata","type":{"Struct":{"address":"0x2","module":"coin","name":"CoinMetadata","typeArguments":[{"TypeParameter":0}]}}}]},"Pool":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[{"constraints":{"abilities":[]},"isPhantom":true}],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"name","type":{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}},{"name":"creator","type":"Address"},{"name":"lp_supply","type":{"Struct":{"address":"0x2","module":"balance","name":"Supply","typeArguments":[{"TypeParameter":0}]}}},{"name":"illiquid_lp_supply","type":{"Struct":{"address":"0x2","module":"balance","name":"Balance","typeArguments":[{"TypeParameter":0}]}}},{"name":"type_names","type":{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}},{"name":"normalized_balances","type":{"Vector":"U128"}},{"name":"weights","type":{"Vector":"U64"}},{"name":"flatness","type":"U64"},{"name":"fees_swap_in","type":{"Vector":"U64"}},{"name":"fees_swap_out","type":{"Vector":"U64"}},{"name":"fees_deposit","type":{"Vector":"U64"}},{"name":"fees_withdraw","type":{"Vector":"U64"}},{"name":"coin_decimals","type":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}},{"name":"decimal_scalars","type":{"Vector":"U128"}},{"name":"lp_decimals","type":"U8"},{"name":"lp_decimal_scalar","type":"U128"}]}},"exposedFunctions":{"balance_of":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"balances":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U64"}]},"burn_lp_coins":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"coin_decimals":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Reference":{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}}}]},"contains_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["Bool"]},"create_lp_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U8",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}}]},"creator":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["Address"]},"fees_deposit":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U64"}]},"fees_deposit_for":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"fees_swap_in":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U64"}]},"fees_swap_in_for":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"fees_swap_out":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U64"}]},"fees_swap_out_for":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"fees_withdraw":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U64"}]},"fees_withdraw_for":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"flatness":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"initialize_liquidity":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}],"return":[]},"initialize_lp_supply":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"join":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}],"return":[]},"lp_decimals":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U8"]},"lp_supply_value":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"lp_type":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}]},"mint_lp_coins":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"name":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Struct":{"address":"0x1","module":"string","name":"String","typeArguments":[]}}]},"new":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}]},"normalize_amount":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":["U128"]},"normalize_amount_with_index":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64","U64"],"return":["U128"]},"normalize_amounts":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Vector":"U64"}}],"return":[{"Vector":"U128"}]},"normalize_lp_amount":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":["U128"]},"normalized_balance_by_index":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64"],"return":["U128"]},"normalized_balance_of":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U128"]},"normalized_balances":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U128"}]},"share":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}],"return":[]},"size":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"take":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}]},"transfer_create_pool_cap":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},"Address"],"return":[]},"type_name_to_balance_value":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["U64"]},"type_name_to_index":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["U64"]},"type_name_to_normalized_balance_value":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}],"return":["U128"]},"type_names":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}}]},"type_to_index":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"unnormalize_amount":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U128"],"return":["U64"]},"unnormalize_amount_with_index":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U64","U128"],"return":["U64"]},"unnormalize_amounts":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Vector":"U128"}}],"return":[{"Vector":"U64"}]},"unnormalize_lp_amount":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},"U128"],"return":["U64"]},"weight_of":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":["U64"]},"weights":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}}],"return":[{"Vector":"U64"}]}}},"pool_factory":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"pool_factory","friends":[],"structs":{},"exposedFunctions":{"create_lp_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":["Drop"]}],"parameters":[{"TypeParameter":0},"U8",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}}]},"create_pool_2_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"create_pool_3_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"create_pool_4_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"create_pool_5_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"create_pool_6_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"create_pool_7_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]},"create_pool_8_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"CreatePoolCap","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U8"},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":[{"Vector":"U8"}]}},"Bool",{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U8"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}]}}},"pool_registry":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"pool_registry","friends":[{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"pool"},{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"swap"}],"structs":{"PoolRegistry":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"protocol_version","type":"U64"}]},"PoolRegistryStateV1":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"coins","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Bool"]}}},{"name":"lp_coin_map","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}},{"name":"registered_pools","type":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Vector":"U8"},"Bool"]}}}]}},"exposedFunctions":{"add_coin":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":[]},"borrow_uid":{"visibility":"Friend","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}}]},"contains_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":["Bool"]},"contains_lp_coin":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":["Bool"]},"lp_coin_map":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]}}}]},"lp_type_to_pool_id":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"object","name":"ID","typeArguments":[]}}]},"protocol_version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":["U64"]},"register_pool":{"visibility":"Friend","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Vector":{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}}},{"Vector":"U64"},"U64",{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"},{"Vector":"U64"}],"return":[]},"supported_coins":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":[{"Reference":{"Struct":{"address":"0x2","module":"table","name":"Table","typeArguments":[{"Struct":{"address":"0x1","module":"ascii","name":"String","typeArguments":[]}},"Bool"]}}}]}}},"price":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"price","friends":[],"structs":{},"exposedFunctions":{"oracle_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":["U128"]},"spot_price":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}}],"return":["U128"]}}},"protocol_fees":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"protocol_fees","friends":[],"structs":{},"exposedFunctions":{"collect_fees_10_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":9}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_11_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":9}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":10}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_12_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":9}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":10}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":11}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_2_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_3_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_4_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_5_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_6_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_7_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_8_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees_9_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}},"swap":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"swap","friends":[],"structs":{},"exposedFunctions":{"add_swap_exact_in_to_route":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":1}]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}]},"add_swap_exact_out_to_route":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":1}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}]},"swap_exact_in":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}]},"swap_exact_out":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},"U64",{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}}},"U64","U64",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}]}}},"withdraw":{"fileFormatVersion":6,"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","name":"withdraw","friends":[],"structs":{},"exposedFunctions":{"all_coin_withdraw_2_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}}]},"all_coin_withdraw_3_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}}]},"all_coin_withdraw_4_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}}]},"all_coin_withdraw_5_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}}]},"all_coin_withdraw_6_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}}]},"all_coin_withdraw_7_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}}]},"all_coin_withdraw_8_coins":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]},{"abilities":[]}],"parameters":[{"MutableReference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool","name":"Pool","typeArguments":[{"TypeParameter":0}]}}},{"Reference":{"Struct":{"address":"0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c","module":"pool_registry","name":"PoolRegistry","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":1}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":2}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":3}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":4}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":5}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":6}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":7}]}},{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":8}]}}]}}}}',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06.loadAllTypes(
    coder,
  );
  _0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a.loadAllTypes(
    coder,
  );
  _0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f.loadAllTypes(
    coder,
  );
  _0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf.loadAllTypes(
    coder,
  );
  _0x1.loadAllTypes(coder);
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0xefe170ec0be4d762196bedecd7a065816576198a6527c99282a2551aaa7da38c",
    );
  }
}

loadAllTypes(defaultMoveCoder(SuiNetwork.MAIN_NET));
