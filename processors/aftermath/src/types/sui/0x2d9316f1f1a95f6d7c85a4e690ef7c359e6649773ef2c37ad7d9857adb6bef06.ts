/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

/* Generated types for 0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06, original address 0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06 */

import { TypeDescriptor, ANY_TYPE } from "@typemove/move";
import { MoveCoder, TypedEventInstance } from "@typemove/sui";

import { defaultMoveCoder } from "@sentio/sdk/sui";

import {
  ZERO_ADDRESS,
  TypedDevInspectResults,
  getMoveCoder,
} from "@typemove/sui";
import {
  Transaction,
  TransactionArgument,
  TransactionObjectArgument,
} from "@mysten/sui/transactions";
import { SuiClient } from "@mysten/sui/client";
import {
  transactionArgumentOrObject,
  transactionArgumentOrVec,
  transactionArgumentOrPure,
  transactionArgumentOrPureU8,
  transactionArgumentOrPureU16,
  transactionArgumentOrPureU32,
  transactionArgumentOrPureU64,
  transactionArgumentOrPureU128,
  transactionArgumentOrPureU256,
  transactionArgumentOrPureBool,
  transactionArgumentOrPureString,
  transactionArgumentOrPureAddress,
} from "@typemove/sui";

import { CallFilter, MoveFetchConfig } from "@sentio/sdk/move";
import {
  SuiBindOptions,
  SuiBaseProcessor,
  SuiNetwork,
  TypedFunctionPayload,
  SuiContext,
} from "@sentio/sdk/sui";

import * as _0x2 from "@sentio/sdk/sui/builtin/0x2";
import * as _0x1 from "@sentio/sdk/sui/builtin/0x1";
import * as _0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a from "./0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a.js";
import * as _0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f from "./0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f.js";
import * as _0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf from "./0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf.js";

export class vault extends SuiBaseProcessor {
  constructor(options: SuiBindOptions) {
    super("vault", options);
  }
  static DEFAULT_OPTIONS: SuiBindOptions = {
    address:
      "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06",
    network: SuiNetwork.MAIN_NET,
  };

  static bind(options: Partial<SuiBindOptions> = {}): vault {
    return new vault({ ...vault.DEFAULT_OPTIONS, ...options });
  }

  onEntryChangeFeePercentages(
    func: (call: vault.ChangeFeePercentagesPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): vault {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "vault::change_fee_percentages",
      },
      fetchConfig,
    );
    return this;
  }

  onEntryUpdateDevWalletAddress(
    func: (call: vault.UpdateDevWalletAddressPayload, ctx: SuiContext) => void,
    filter?: CallFilter,
    fetchConfig?: Partial<MoveFetchConfig>,
  ): vault {
    this.onEntryFunctionCall(
      func,
      {
        ...filter,
        function: "vault::update_dev_wallet_address",
      },
      fetchConfig,
    );
    return this;
  }
}

export namespace vault {
  export interface ChangeFeeCap {
    id: _0x2.object$.UID;
    last_used_epoch: bigint;
  }

  export namespace ChangeFeeCap {
    export const TYPE_QNAME =
      "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::ChangeFeeCap";

    const TYPE = new TypeDescriptor<ChangeFeeCap>(ChangeFeeCap.TYPE_QNAME);

    export function type(): TypeDescriptor<ChangeFeeCap> {
      return TYPE.apply();
    }
  }

  export interface FeePercentages {
    total_protocol_fee: bigint;
    treasury: bigint;
    insurance_fund: bigint;
    dev_wallet: bigint;
    referee_discount: bigint;
  }

  export namespace FeePercentages {
    export const TYPE_QNAME =
      "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::FeePercentages";

    const TYPE = new TypeDescriptor<FeePercentages>(FeePercentages.TYPE_QNAME);

    export function type(): TypeDescriptor<FeePercentages> {
      return TYPE.apply();
    }
  }

  export interface ProtocolFeeVault {
    id: _0x2.object$.UID;
    version: bigint;
    dev_wallet: string;
    fee_percentages: vault.FeePercentages;
  }

  export namespace ProtocolFeeVault {
    export const TYPE_QNAME =
      "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::ProtocolFeeVault";

    const TYPE = new TypeDescriptor<ProtocolFeeVault>(
      ProtocolFeeVault.TYPE_QNAME,
    );

    export function type(): TypeDescriptor<ProtocolFeeVault> {
      return TYPE.apply();
    }
  }

  export namespace builder {
    export function assertVersion(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::assert_version",
        arguments: _args,
      });
    }
    export function changeFeePercentages(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
        _0x1.option.Option<bigint> | TransactionArgument,
      ],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrPure(args[2], tx));
      _args.push(transactionArgumentOrPure(args[3], tx));
      _args.push(transactionArgumentOrPure(args[4], tx));
      _args.push(transactionArgumentOrPure(args[5], tx));
      _args.push(transactionArgumentOrPure(args[6], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::change_fee_percentages",
        arguments: _args,
      });
    }
    export function collectFees<T0 = any>(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
      typeArguments: [TypeDescriptor<T0> | string],
    ): TransactionArgument &
      [
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
        TransactionArgument,
      ] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrObject(args[1], tx));
      _args.push(transactionArgumentOrObject(args[2], tx));
      _args.push(transactionArgumentOrObject(args[3], tx));
      _args.push(transactionArgumentOrObject(args[4], tx));
      _args.push(transactionArgumentOrPureAddress(args[5], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::collect_fees",
        arguments: _args,
        typeArguments: [
          typeof typeArguments[0] === "string"
            ? typeArguments[0]
            : typeArguments[0].getSignature(),
        ],
      });
    }
    export function devWalletFee(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::dev_wallet_fee",
        arguments: _args,
      });
    }
    export function insuranceFundFee(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::insurance_fund_fee",
        arguments: _args,
      });
    }
    export function minimumBeforeFees(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        bigint | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureU64(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::minimum_before_fees",
        arguments: _args,
      });
    }
    export function refereeDiscount(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::referee_discount",
        arguments: _args,
      });
    }
    export function totalProtocolFee(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::total_protocol_fee",
        arguments: _args,
      });
    }
    export function transfer(
      tx: Transaction,
      args: [
        vault.ChangeFeeCap | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrPure(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::transfer",
        arguments: _args,
      });
    }
    export function treasuryFee(
      tx: Transaction,
      args: [string | TransactionObjectArgument | TransactionArgument],
    ): TransactionArgument & [TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::treasury_fee",
        arguments: _args,
      });
    }
    export function updateDevWalletAddress(
      tx: Transaction,
      args: [
        string | TransactionObjectArgument | TransactionArgument,
        string | TransactionArgument,
      ],
    ): TransactionArgument & [TransactionArgument, TransactionArgument] {
      const _args: any[] = [];
      _args.push(transactionArgumentOrObject(args[0], tx));
      _args.push(transactionArgumentOrPureAddress(args[1], tx));

      // @ts-ignore
      return tx.moveCall({
        target:
          "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06::vault::update_dev_wallet_address",
        arguments: _args,
      });
    }
  }
  export namespace view {
    export async function assertVersion(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.assertVersion(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function changeFeePercentages(
      client: SuiClient,
      args: [
        string,
        string,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
      ],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.changeFeePercentages(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function collectFees<T0 = any>(
      client: SuiClient,
      args: [string, string, string, string, string, string],
      typeArguments: [TypeDescriptor<T0> | string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.collectFees(tx, args, typeArguments);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function devWalletFee(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.devWalletFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function insuranceFundFee(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.insuranceFundFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function minimumBeforeFees(
      client: SuiClient,
      args: [string, bigint],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.minimumBeforeFees(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function refereeDiscount(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.refereeDiscount(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function totalProtocolFee(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.totalProtocolFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function transfer(
      client: SuiClient,
      args: [vault.ChangeFeeCap, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.transfer(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
    export async function treasuryFee(
      client: SuiClient,
      args: [string],
    ): Promise<TypedDevInspectResults<[bigint]>> {
      const tx = new Transaction();
      builder.treasuryFee(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[bigint]>(
        inspectRes,
      );
    }
    export async function updateDevWalletAddress(
      client: SuiClient,
      args: [string, string],
    ): Promise<TypedDevInspectResults<[]>> {
      const tx = new Transaction();
      builder.updateDevWalletAddress(tx, args);
      const inspectRes = await client.devInspectTransactionBlock({
        transactionBlock: tx,
        sender: ZERO_ADDRESS,
      });

      return (await getMoveCoder(client)).decodeDevInspectResult<[]>(
        inspectRes,
      );
    }
  }

  export interface ChangeFeePercentagesPayload
    extends TypedFunctionPayload<
      [
        string,
        string,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
        _0x1.option.Option<bigint>,
        string,
      ]
    > {
    arguments_decoded: [
      string,
      string,
      _0x1.option.Option<bigint>,
      _0x1.option.Option<bigint>,
      _0x1.option.Option<bigint>,
      _0x1.option.Option<bigint>,
      _0x1.option.Option<bigint>,
      string,
    ];
    type_arguments: [];
  }

  export interface UpdateDevWalletAddressPayload
    extends TypedFunctionPayload<[string, string, string]> {
    arguments_decoded: [string, string, string];
    type_arguments: [];
  }
}

const MODULES = JSON.parse(
  '[{"fileFormatVersion":6,"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","name":"vault","friends":[],"structs":{"ChangeFeeCap":{"abilities":{"abilities":["Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"last_used_epoch","type":"U64"}]},"FeePercentages":{"abilities":{"abilities":["Store"]},"typeParameters":[],"fields":[{"name":"total_protocol_fee","type":"U64"},{"name":"treasury","type":"U64"},{"name":"insurance_fund","type":"U64"},{"name":"dev_wallet","type":"U64"},{"name":"referee_discount","type":"U64"}]},"ProtocolFeeVault":{"abilities":{"abilities":["Store","Key"]},"typeParameters":[],"fields":[{"name":"id","type":{"Struct":{"address":"0x2","module":"object","name":"UID","typeArguments":[]}}},{"name":"version","type":"U64"},{"name":"dev_wallet","type":"Address"},{"name":"fee_percentages","type":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"FeePercentages","typeArguments":[]}}}]}},"exposedFunctions":{"assert_version":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}}],"return":[]},"change_fee_percentages":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ChangeFeeCap","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"Struct":{"address":"0x1","module":"option","name":"Option","typeArguments":["U64"]}},{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"collect_fees":{"visibility":"Public","isEntry":false,"typeParameters":[{"abilities":[]}],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a","module":"treasury","name":"Treasury","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f","module":"insurance_fund","name":"InsuranceFund","typeArguments":[]}}},{"Reference":{"Struct":{"address":"0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf","module":"referral_vault","name":"ReferralVault","typeArguments":[]}}},{"MutableReference":{"Struct":{"address":"0x2","module":"coin","name":"Coin","typeArguments":[{"TypeParameter":0}]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]},"dev_wallet_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}}],"return":["U64"]},"insurance_fund_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}}],"return":["U64"]},"minimum_before_fees":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},"U64"],"return":["U64"]},"referee_discount":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}}],"return":["U64"]},"total_protocol_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}}],"return":["U64"]},"transfer":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ChangeFeeCap","typeArguments":[]}},"Address"],"return":[]},"treasury_fee":{"visibility":"Public","isEntry":false,"typeParameters":[],"parameters":[{"Reference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}}],"return":["U64"]},"update_dev_wallet_address":{"visibility":"Public","isEntry":true,"typeParameters":[],"parameters":[{"MutableReference":{"Struct":{"address":"0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06","module":"vault","name":"ProtocolFeeVault","typeArguments":[]}}},"Address",{"MutableReference":{"Struct":{"address":"0x2","module":"tx_context","name":"TxContext","typeArguments":[]}}}],"return":[]}}}]',
);

export function loadAllTypes(coder: MoveCoder) {
  _0x2.loadAllTypes(coder);
  _0x1.loadAllTypes(coder);
  _0x64213b0e4a52bac468d4ac3f140242f70714381653a1919a6d57cd49c628207a.loadAllTypes(
    coder,
  );
  _0xa6baab1e668c7868991c1c3c11e144100f5734c407d020f72a01b9d1a8bcb97f.loadAllTypes(
    coder,
  );
  _0xc66fabf1a9253e43c70f1cc02d40a1d18db183140ecaae2a3f58fa6b66c55acf.loadAllTypes(
    coder,
  );
  for (const m of Object.values(MODULES)) {
    coder.load(
      m as any,
      "0x2d9316f1f1a95f6d7c85a4e690ef7c359e6649773ef2c37ad7d9857adb6bef06",
    );
  }
}

loadAllTypes(defaultMoveCoder(SuiNetwork.MAIN_NET));
